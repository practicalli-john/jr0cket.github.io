<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jr0cket</title>
  <icon>https://www.gravatar.com/avatar/1ff5786158c0be54051ef8e5c544555d</icon>
  <subtitle>community developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jr0cket.co.uk/"/>
  <updated>2022-01-02T20:20:15.290Z</updated>
  <id>http://jr0cket.co.uk/</id>
  
  <author>
    <name>John Stevenson</name>
    <email>john@jr0cket.co.uk</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Beautiful Terminalation - Ohmyzsh on Ubuntu</title>
    <link href="http://jr0cket.co.uk/2017/08/beautiful-terminalation-ohmyzsh-on-ubuntu.html"/>
    <id>http://jr0cket.co.uk/2017/08/beautiful-terminalation-ohmyzsh-on-ubuntu.html</id>
    <published>2017-08-19T12:58:08.000Z</published>
    <updated>2022-01-02T20:20:15.290Z</updated>
    
    <content type="html"><![CDATA[<p>I frequently use the command line because of its speed and am using <a href="http://ohmyz.sh/" target="_blank" rel="noopener">ohmyzsh</a> to make the experience more valuable and enjoyable.  I configure ohmyzsh to use the <a href="https://github.com/bhilburn/powerlevel9k" target="_blank" rel="noopener">powerlevel9k theme</a> which provides lots of useful information as well as looking fancy.</p><p><img src="/images/ohmyzsh-powerlevel9k-theme-animated.gif" alt="Ohmyzsh with powerlevel9k theme in action"></p><blockquote><p>We are more connected to the work we do if its an enjoyable experience.</p></blockquote><p>Read on for details on how to configure Ubuntu with zsh, ohmyzsh and powerlevel9k theme.</p><a id="more"></a><h2 id="Install-zsh"><a href="#Install-zsh" class="headerlink" title="Install zsh"></a>Install zsh</h2><p>Ubuntu has a package for <code>zsh</code> so its easy to install</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install zsh</span><br></pre></td></tr></table></figure><p>You could try this new shell by typing <code>zsh</code> in the terminal window, however its not going to be as nice without some configuration first.  So lets add that next.</p><h2 id="Install-ohmyzsh"><a href="#Install-ohmyzsh" class="headerlink" title="Install ohmyzsh"></a>Install ohmyzsh</h2><p>Oh-My-Zsh is an open source, community-driven framework for managing your ZSH configuration. It comes bundled with a ton of helpful functions, helpers, plugins and lots of themes to make your command line look fancy!</p><p>Install <code>ohmyzsh</code> with either wget or curl.  I prefer wget on Ubuntu as its installed by default</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure><p>See the <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">ohmyzsh website</a> for alternative installation information.</p><h2 id="Install-the-powerlevel9k-theme"><a href="#Install-the-powerlevel9k-theme" class="headerlink" title="Install the powerlevel9k theme"></a>Install the powerlevel9k theme</h2><p>Powerlevel9k is a theme for ZSH which is easy to customise and feature rich.  The theme works for your own custom zsh setup as well as ohmyzsh, prezto and other configuration.</p><p>Clone the powerlevel9k theme into the existing <code>ohmyzsh</code> project</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span><br></pre></td></tr></table></figure><p>Edit the <code>./zshrc</code> file and set the theme to powerlevel9k</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;</span><br></pre></td></tr></table></figure><blockquote><p>Ensure that there is only one theme set with this value.</p></blockquote><h2 id="Installing-Powerline-fonts"><a href="#Installing-Powerline-fonts" class="headerlink" title="Installing Powerline fonts"></a>Installing Powerline fonts</h2><p>The powerlevel9k theme uses Powerline Fonts so we need to install them too.</p><p>There are several powerline packages in the ubuntu archives, so either install the powerline fonts or use the powerline meta-package to include powerline support for python too.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## just the fonts</span></span><br><span class="line">sudo apt install fonts-powerline</span><br><span class="line"></span><br><span class="line"><span class="comment">## or use the meta-package for python support too</span></span><br><span class="line">sudo apt install powerline</span><br></pre></td></tr></table></figure><blockquote><p>To find the packages I simply searched the Ubuntu archives using the command <code>apt-cache search --names-only powerline</code></p></blockquote><h2 id="Set-your-default-shell"><a href="#Set-your-default-shell" class="headerlink" title="Set your default shell"></a>Set your default shell</h2><p>Once you are happy with your new setup, you can make zsh the default for the Ubuntu terminal.  Run <code>terminal</code> and edit the profile you are using to run zsh:</p><p><strong>Profile Preferences</strong> &gt; <strong>Command</strong> &gt; <strong>Custom command</strong> &gt; <code>/usr/bin/zsh</code></p><p><img src="/images/ubuntu-terminal-profile-preferences-command-zsh.png" alt="Ubuntu Terminal - Profile Preferences - Custom Command - Zsh"></p><p>Change the default login shell by running the <code>chsh</code> command.  This will prompt you for your login password and then show you the current login shell.  Type <code>/usr/bin/zsh</code> if the current shell is not zsh.</p><p><img src="/images/ubuntu-change-login-shell.png" alt="Ubuntu - change login shell to zsh"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>With a few Ubuntu packages and two cloned repositories you can quickly create an enhanced experience in your command line.</p><p>Take a look at <a href="https://github.com/bhilburn/powerlevel9k/wiki/Show-Off-Your-Config" target="_blank" rel="noopener">how others have configured the powerlevel9k theme</a> for there own needs</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I frequently use the command line because of its speed and am using &lt;a href=&quot;http://ohmyz.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ohmyzsh&lt;/a&gt; to make the experience more valuable and enjoyable.  I configure ohmyzsh to use the &lt;a href=&quot;https://github.com/bhilburn/powerlevel9k&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;powerlevel9k theme&lt;/a&gt; which provides lots of useful information as well as looking fancy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ohmyzsh-powerlevel9k-theme-animated.gif&quot; alt=&quot;Ohmyzsh with powerlevel9k theme in action&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are more connected to the work we do if its an enjoyable experience.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Read on for details on how to configure Ubuntu with zsh, ohmyzsh and powerlevel9k theme.&lt;/p&gt;
    
    </summary>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/categories/ubuntu/"/>
    
    
      <category term="zsh" scheme="http://jr0cket.co.uk/tags/zsh/"/>
    
      <category term="ohmyzsh" scheme="http://jr0cket.co.uk/tags/ohmyzsh/"/>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="powerline" scheme="http://jr0cket.co.uk/tags/powerline/"/>
    
  </entry>
  
  <entry>
    <title>camcorder.el - Creating Animated Gifs &amp; Videos for Spacemacs</title>
    <link href="http://jr0cket.co.uk/2017/01/spacemacs-creating-animated-gifs-videos.html"/>
    <id>http://jr0cket.co.uk/2017/01/spacemacs-creating-animated-gifs-videos.html</id>
    <published>2017-01-01T18:59:05.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/spacemacs-logo.png" class="img-topic"><p>Using animated gifs are a lightweight way to show Emacs in action, as can be seen at <a href="https://emacsgifs.github.io/" target="_blank" rel="noopener">Emacs Gifs</a>.</p><p>I am creating a workshop on <a href="https://practicalli.github.io/spacemacs" target="_blank" rel="noopener">developing Clojure with Spacemacs</a>, so here is a little guide as to how I create animated gifs and videos for this workshop directly from Emacs itself using <a href="https://github.com/Malabarba/camcorder.el" target="_blank" rel="noopener">camcorder.el</a>.</p><blockquote><p>There are several different ways to create animated gifs and so far I have found camcorder.el to be the easiest.  This approach has been tested on Ubuntu Linux 16.10.</p></blockquote><a id="more"></a><h1 id="Why-an-animated-gif-rather-than-video"><a href="#Why-an-animated-gif-rather-than-video" class="headerlink" title="Why an animated gif rather than video?"></a>Why an animated gif rather than video?</h1><p>Being an image format, animated gifs can be used like any other image.  So they are easy to include in websites.  They will also play continually without any additional code.</p><p>Animated gifs are typically smaller in size, so are quicker to download than video and use less resources too.</p><p>Some small amount of quality is lost when converting to an animated gif.  However, using the optimised and hence slower conversion gives a reasonable quality.  I am still experimenting with the setting though to see if I can make the conversion better.</p><h1 id="camcorder-el"><a href="#camcorder-el" class="headerlink" title="camcorder.el"></a><a href="https://github.com/Malabarba/camcorder.el" target="_blank" rel="noopener">camcorder.el</a></h1><p><a href="https://github.com/Malabarba/camcorder.el" target="_blank" rel="noopener">camcorder.el</a> enables you to create a screen capture specifically of Emacs.  When run, a new Emacs frame is created with the contents of the current buffer and your actions in that frame are recorded as a video.</p><p>Then <a href="https://github.com/Malabarba/camcorder.el" target="_blank" rel="noopener">camcorder.el</a> can convert the video to an animated gif. </p><h2 id="Requirements-for-camcorder-el"><a href="#Requirements-for-camcorder-el" class="headerlink" title="Requirements for camcorder.el"></a>Requirements for camcorder.el</h2><p>The <code>camcorder.el</code> package itself does not actually do the recording or even the converting, its simply a convienient way to manage other tools without having to leave Emacs.</p><ul><li><a href="http://recordmydesktop.sourceforge.net" target="_blank" rel="noopener">recordmydesktop</a> - a linux based video &amp; audio recorder</li><li><a href="http://www.mplayerhq.hu" target="_blank" rel="noopener">mplayer</a> - movie player and converter</li><li><a href="https://www.imagemagick.org" target="_blank" rel="noopener">imagemagick</a> - create, edit, compose, or convert bitmap images</li><li><a href="https://ffmpeg.org/" target="_blank" rel="noopener">ffmpeg</a> - video conversion tools</li></ul><p>For a quick and simple conversion from video to animated gif you can select ffmpeg.  If you want to optimise the size of the resulting animated gif then select the combination of mplayer and imagemagick.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install recordmydesktop mplayer imagemagick</span><br></pre></td></tr></table></figure><h2 id="Add-camcorder-to-Spacemacs"><a href="#Add-camcorder-to-Spacemacs" class="headerlink" title="Add camcorder to Spacemacs"></a>Add camcorder to Spacemacs</h2><p>As far as I am aware there is not yet a Spacemacs layer that includes <code>camcorder.el</code>.  So instead we add <code>camcorder.el</code> as an additional package.</p><p>Edit your <code>~/.spacemacs</code> configuration file and find <code>dotspacemacs-additional-packages</code>.  Then add <code>camcorder</code> to that list of packages:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotspacemacs-additional-packages &apos;(camcorder)</span><br></pre></td></tr></table></figure><p>You will need to either reload your Spacemacs configuration with <code>SPC f e R</code> or restart Emacs.</p><h2 id="Capturing-with-camcorder"><a href="#Capturing-with-camcorder" class="headerlink" title="Capturing with camcorder"></a>Capturing with camcorder</h2><p>Run either <code>camcorder-record</code> or <code>camcorder-mode</code> to record Emacs.  You are first prompted to give the file name of the video output (<code>ogv</code> video format).</p><p>Once you have specified the video name, a 3 second countdown will run before starting the recording.</p><table><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td><code>M-x camcorder-record</code></td><td>Open a new Emacs frame and record</td></tr><tr><td><code>M-x camcorder-mode</code></td><td>Record current Emacs frame</td></tr><tr><td><code>F11</code></td><td>Toggle pause pause</td></tr><tr><td><code>F12</code></td><td>Stop recording and save video</td></tr></tbody></table><p>Screencasts are generated in ogv format, although if you hack <code>camcorder.el</code> you could change the video format used and even the video capture tool (recordmydesktop).</p><blockquote><p>As capturing creates a video file, you can edit that file with tools such as <a href="http://www.openshot.org/" target="_blank" rel="noopener">OpenShot</a> or <a href="https://www.blender.org/" target="_blank" rel="noopener">Blender</a> video editors.  So if you make a small error or want to shorten (or lengthen) a part of the video, then edit it before you convert it to gif.</p></blockquote><h2 id="Converting-with-camcorder"><a href="#Converting-with-camcorder" class="headerlink" title="Converting with camcorder"></a>Converting with camcorder</h2><p>You can convert the videos you generated during capturing, or any other supported video type.  So you can also used <code>camcorder.el</code> if you recorded Emacs (or other tools) separately.</p><p>Run the <code>M-x camcorder-convert-to-gif</code> and you are prompted for the video file to convert to an animated gif.</p><p><img src="/images/spacemacs-camcorder-convert-to-gif.gif" alt="Spacemacs - camcorder - convert-to-gif"></p><h2 id="Tweaking-camcorder-el"><a href="#Tweaking-camcorder-el" class="headerlink" title="Tweaking camcorder.el"></a>Tweaking camcorder.el</h2><p>I initially made one tweak to <code>camcorder.el</code>, to change the size of the frame created for the capture.  I fount the frame too small to work with on a high resolution monitor.  The only challenge with this is it creates a larger file for the animated gif.</p><p>I changed the height from 20 to 32 and the width from 65 to 120.  These sizes provided more space to see the Spacemacs menu as I demonstrate features.  When creating screen captures I run my desktop at a resolution of 1360x768 and a Spacemacs font size of 16 (Ubuntu Mono).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(defcustom frame-parameters</span><br><span class="line">  &apos;((name . &quot;camcorder.el Recording - F12 to Stop - F11 to Pause/Resume&quot;)</span><br><span class="line">    (height . 32)</span><br><span class="line">    (width . 120)</span><br><span class="line">    (top .  80))</span><br><span class="line">  &quot;Parameters used on the recording frame.</span><br><span class="line">See `make-frame&apos;.&quot;</span><br><span class="line">  :type &apos;(alist :key-type symbol :value-type sexp))</span><br></pre></td></tr></table></figure><blockquote><p>After some testing I have now reverted back to the original height of 20 and width of 32.  I have also reduced the font settings in Spacemacs to us Ubuntu Mono with a font size of 12.</p></blockquote><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>The package camcorder.el provides a simple 2-step process to create animated gif images of Emacs demos.  You can tweak the script easily and can also use different tools to do the screen capture.</p><p>Animated gifs are very easy to distribute, especially on web pages and github pages sites.  With this process you also have a video version of the demo too.</p><p>Keeping your demos short, between 10 and 20 seconds, typically makes the animated gifs easy to follow.  So think about what the most important point you are trying to convey when you are creating a new animated gif.</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/spacemacs-logo.png&quot; class=&quot;img-topic&quot;&gt;
&lt;p&gt;Using animated gifs are a lightweight way to show Emacs in action, as can be seen at &lt;a href=&quot;https://emacsgifs.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Emacs Gifs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am creating a workshop on &lt;a href=&quot;https://practicalli.github.io/spacemacs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;developing Clojure with Spacemacs&lt;/a&gt;, so here is a little guide as to how I create animated gifs and videos for this workshop directly from Emacs itself using &lt;a href=&quot;https://github.com/Malabarba/camcorder.el&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;camcorder.el&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are several different ways to create animated gifs and so far I have found camcorder.el to be the easiest.  This approach has been tested on Ubuntu Linux 16.10.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="spacemacs" scheme="http://jr0cket.co.uk/tags/spacemacs/"/>
    
      <category term="gifs" scheme="http://jr0cket.co.uk/tags/gifs/"/>
    
      <category term="screencapture" scheme="http://jr0cket.co.uk/tags/screencapture/"/>
    
  </entry>
  
  <entry>
    <title>Kanban in Emacs Org-Mode to Get More Work Done</title>
    <link href="http://jr0cket.co.uk/2016/09/Kanban-board-Emacs-Org-mode-to-get-work-done.html"/>
    <id>http://jr0cket.co.uk/2016/09/Kanban-board-Emacs-Org-mode-to-get-work-done.html</id>
    <published>2016-09-04T14:42:41.000Z</published>
    <updated>2022-01-02T20:20:15.290Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail"><p>A Kanban board is a way to visualise your work and help you get more work done.  You organise your work into tasks that need completeing and use the board to show the state of each card.  Kanban encourages you to get work finished before starting new work.</p><p>The amazing Emacs Org-mode can be used to create a very fast and easy to use Kanban board that is with you where ever you are.</p><p><strong>Update</strong>: Using Org-mode doesnt give me everything I want from a Kanban board, but it was an interesting exersice.  For now, I am just sticking to <a href="http://jr0cket.co.uk/2013/08/configure-emacs-org-mode-to-manage-your-tasks.html.html">my list view of a Kanban board</a>.</p><blockquote><p>Org-mode is built into Emacs / Spacemacs so there is no need to install any packages or layers for any of the following.</p></blockquote><a id="more"></a><h1 id="Designing-a-kanban-board"><a href="#Designing-a-kanban-board" class="headerlink" title="Designing a kanban board"></a>Designing a kanban board</h1><p>The columns on your kanban board represent the state of work and represent your typical workflow.  You can represent the states as the most generic <strong>todo, doing, done</strong> workflow, or anything more specific that adds value to how you manage work.</p><p>I have been using kanban for a while, so I am using a five stage workflow: <strong>planning, in progress, blocked, review, done</strong></p><ul><li><strong>planning</strong> - work I’d like to do that needs organising so I can do it.</li><li><strong>in progress</strong> - what I am currently working on. I try and keep this to a minimum so I get things done</li><li><strong>blocked</strong> - things I’ve started working on but currently arent able to complete</li><li><strong>review</strong> - work I have completed. Check if there are any follow on tasks or lessons learnt</li><li><strong>done</strong> - things I have completed. Gives feeling of satisfaction</li></ul><h1 id="Creating-Org-mode-stages"><a href="#Creating-Org-mode-stages" class="headerlink" title="Creating Org-mode stages"></a>Creating Org-mode stages</h1><p>Its easy to create your own Org-mode stages, to represent the state of work in your Kanban board.  Please see my earlier article on <a href="http://jr0cket.co.uk/2013/08/configure-emacs-org-mode-to-manage-your-tasks.html.html">Configuring Emacs Org-Mode to Managing Your Tasks</a></p><h1 id="Create-an-Org-mode-file"><a href="#Create-an-Org-mode-file" class="headerlink" title="Create an Org-mode file"></a>Create an Org-mode file</h1><p>Create a new file by opening a new buffer <code>M-x find-files</code> and type in the new file name, ending in <code>.org</code>.  Any files with a <code>.org</code> filename extension will automatically set the Emacs major mode to Org-mode.</p><p>I use a file called <code>kanban.org</code> for my kanban board.</p><table><thead><tr><th>Spacemacs</th><th>Emacs</th></tr></thead><tbody><tr><td><code>SPC f f</code></td><td><code>C-x C-f</code></td></tr><tr><td><code>M-x spacemacs/helm-find-files</code></td><td><code>M-x find-files</code></td></tr></tbody></table><h1 id="Create-a-kanban-board"><a href="#Create-a-kanban-board" class="headerlink" title="Create a kanban board"></a>Create a kanban board</h1><p>Lets assume you created a file called <code>kanban.org</code>.  Edit this file and create a table for the kanban board.  You can start creating ths manually by typing <code>|</code> for the table layout or use <code>M-x org-table-create</code> and enter the number of columns and rows for the table.  For example, to create for a table with 5 columns and 3 rows, you would speciify <code>5x3</code></p><p>Add the names of the kanban board in the first row of the table.  If you did not use <code>M-x org-table-create</code> then add a header row with <code>M-x org-table-insert-hline</code>.</p><p>In my kanban board, this gives</p><p><a href="/images/emacs-kanban-org-mode-table.png"><img src="/images/emacs-kanban-org-mode-table.png" alt="Emacs Org-mode table as Kanban board"></a></p><h1 id="Adding-tasks-to-the-kanban-board"><a href="#Adding-tasks-to-the-kanban-board" class="headerlink" title="Adding tasks to the kanban board"></a>Adding tasks to the kanban board</h1><p>Each item on the board represents a task and we use the Org-mode interal link to jump from the board to the details of the task.  To create a link of the same name as the task, simply type the name inside double square brakets <code>[[]]</code>.</p><p><a href="/images/emacs-kanban-org-mode-table-item.png"><img src="/images/emacs-kanban-org-mode-table-item.png" alt="Emacs Org-mode table as Kanban board - task entry"></a></p><h1 id="Moving-the-tasks-across-the-board"><a href="#Moving-the-tasks-across-the-board" class="headerlink" title="Moving the tasks across the board"></a>Moving the tasks across the board</h1><p>Its easy enough to move the columns around with <code>Alt - &lt;arrow-keys&gt;</code> in org-mode, but there is not a single keybinding to move a cell.</p><p>To move the individual tasks between the columns use selective cut and paste:</p><ul><li>Move the cursor to the cell you want to move and use <code>C-c C-x C-w</code></li><li>Use <code>TAB</code> to move to the new cell</li><li>Paste/Yank the value into the new cell using <code>C-c C-x C-y</code></li></ul><p>However, simply moving the task does not update the Org-mode stage.  As each task is a link, I can click on that link and I am taken to the task and can easily update the task stage to match the board.</p><p>It would be great if moving the tasks on the board updated the associated task stage and vice versa.</p><h1 id="El-Kanban-updating-the-board-from-task-stage-changes"><a href="#El-Kanban-updating-the-board-from-task-stage-changes" class="headerlink" title="El Kanban - updating the board from task stage changes"></a>El Kanban - updating the board from task stage changes</h1><p>I found the <a href="http://www.draketo.de/light/english/free-software/el-kanban-org-table" target="_blank" rel="noopener">El Kanban</a> package that will updated the kanban board based on the task org-mode stages.  This uses the Org-mode table format directive that you run each time you want to update the board.</p><p>I installed this package and it did pull in my custom org-mode stages for the headers.  Unfortunately it did not pull in the tasks to the board, so I will either need to fix the package or find another solution.</p><p>Any suggestions are more than welcome.</p><p><strong>References</strong></p><ul><li><a href="http://jr0cket.co.uk/2013/08/configure-emacs-org-mode-to-manage-your-tasks.html.html">Configuring Emacs Org-mode to manage your tasks</a></li><li><a href="http://www.agilesoc.com/2011/08/08/emacs-org-mode-kanban-pomodoro-oh-my/" target="_blank" rel="noopener">Emacs Org-mode Kanban pomodoro… oh my…</a> -  Posted on August 8, 2011 by Bryan Morris</li><li><a href="http://www.draketo.de/light/english/free-software/el-kanban-org-table" target="_blank" rel="noopener">El Kanban</a> - an org-mode table that updates based on task stages</li></ul><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/emacs-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;A Kanban board is a way to visualise your work and help you get more work done.  You organise your work into tasks that need completeing and use the board to show the state of each card.  Kanban encourages you to get work finished before starting new work.&lt;/p&gt;
&lt;p&gt;The amazing Emacs Org-mode can be used to create a very fast and easy to use Kanban board that is with you where ever you are.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Using Org-mode doesnt give me everything I want from a Kanban board, but it was an interesting exersice.  For now, I am just sticking to &lt;a href=&quot;http://jr0cket.co.uk/2013/08/configure-emacs-org-mode-to-manage-your-tasks.html.html&quot;&gt;my list view of a Kanban board&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Org-mode is built into Emacs / Spacemacs so there is no need to install any packages or layers for any of the following.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="spacemacs" scheme="http://jr0cket.co.uk/tags/spacemacs/"/>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
  </entry>
  
  <entry>
    <title>Call for Speakers: London Clojurian Conference 2016</title>
    <link href="http://jr0cket.co.uk/2016/08/Call-for-Speakers-London-Clojurian-conference-2016.html"/>
    <id>http://jr0cket.co.uk/2016/08/Call-for-Speakers-London-Clojurian-conference-2016.html</id>
    <published>2016-08-05T10:50:20.000Z</published>
    <updated>2022-01-02T20:20:15.290Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/clojure-logo.png" class="img-thumbnail"><p>December 2016 we celebrate the sixth birthday of <a href="https://skillsmatter.com/conferences/7430-clojure-exchange-2016" target="_blank" rel="noopener">ClojureX</a>, a two-day conference organised by the <a href="http://www.meetup.com/London-Clojurians/" target="_blank" rel="noopener">London Clojurians</a> and <a href="https://skillsmatter.com/" target="_blank" rel="noopener">SkillsMatter</a>.  Submit your talk ideas by 30th August to take part in the fun. </p><p><a href="https://docs.google.com/forms/d/e/1FAIpQLScnCDLTwQkwLnC-HFDHzI1rs-oUovOhP9VR9Y5QW2rXNR7DVg/viewform?c=0&amp;w=1" target="_blank" rel="noopener"><img src="/images/clojurex-cfp-deadline-button.png" alt="ClojureX CFP deadline - 30th August"></a></p><p><a href="https://skillsmatter.com/conferences/7430-clojure-exchange-2016#other_conferences" target="_blank" rel="noopener">Previous conferences</a> have included a diverse range of topics and speakers in the areas of Clojure, Clojurescript and Functional Programming.  At last years conference we were quite surprised how many people are already using Clojure at work.  In 2014 we ran a poll of our audience and 18% were using Clojure on a daily basis.  For the same poll in 2015, 78% were using Clojure for their daily work.  What will the 2016 poll reveal?</p><p>The London Clojure community continues to grow and we want to hear all your stories and learn from your experiences, no matter how long you have been working with Clojure.  So please consider <a href="https://docs.google.com/forms/d/e/1FAIpQLScnCDLTwQkwLnC-HFDHzI1rs-oUovOhP9VR9Y5QW2rXNR7DVg/viewform?c=0&amp;w=1" target="_blank" rel="noopener">submitting a talk</a> (or several talks) to the <a href="https://skillsmatter.com/conferences/7430-clojure-exchange-2016" target="_blank" rel="noopener">ClojureX conference</a> in London on the 1st &amp; 2nd December.</p><p>If you have never spoken before or want some handy hints on presenting and getting your talk accepted for Clojure eXchange, then join our workshop on <a href="http://www.meetup.com/London-Clojurians/events/232445819/" target="_blank" rel="noopener">Giving your first Meetup or Clojure eXchange talk</a> on 2nd August, 2016 (video coming soon).</p><blockquote><p>Anyone accepted to speak at the Clojure eXchange conference gets a free ticket, or re-imbursed if you have already purchased a ticket.  You also get a free ticket for a friend.  A 25% discount on ticket purchase for anyone who submits to the CFP but does not get accepted.</p></blockquote><a id="more"></a><p><a href="http://www.meetup.com/London-Clojurians/" target="_blank" rel="noopener"><img src="/images/london-clojurians-banner.png" alt="Join in the fun of functional programming with the London Clojurians"></a></p><h1 id="Conference-day-s"><a href="#Conference-day-s" class="headerlink" title="Conference day(s)"></a>Conference day(s)</h1><p>The conference is a single track over two days.  Each day starts with a 45 minute keynote and then 30 minute talks for the rest of the day, with 10 minute lightning talks after lunch.  There is also the option of having a discussion panel at the end of each day.</p><p><img src="/images/clojurex-talk-henry-garner.png" alt="ClojureX 2016 talks on the big screen"></p><h1 id="Why-attend"><a href="#Why-attend" class="headerlink" title="Why attend"></a>Why attend</h1><p>Of course we try and get a wide range of excellent talks for you to absorb during the two days.  As well as new speakers, we also get many well known speakers and developers from the community and its a chance to ask them all your burning questions in person.</p><p><img src="/images/clojurex-audience-questions.png" alt="ClojureX 2016 audience interaction"></p><p>There is a chance to hack along with other developers and plenty of space at the venue to create your own adhoc hacking area.  Last year we also had an improptu lunchtime hack session where a challenge was set and we paired and grouped up to see how far we could get solving that challenge.</p><p><img src="/images/clojurex-2016-hacking-session.png" alt="ClojureX 2016 adhoc hacking session"></p><p>Actually being at the event also allows you to talk with other developers about their experiences with Clojure, swapping tips and tricks, discussing libraries and whether your web frameworks should implement the whole of the HTTP specification.</p><p>Many of the conference sponsors are hiring as are many of the developers attending, so its also a chance to look for new opportunities with companies and development teams using Clojure and functional programming</p><p>As organisers we alway look to make it as easy as possible to make new friends and meet others from the London Clojurian community.  We are a friendly group and welcome anyone at any level (if you have had experences otherwise, please let me know and we will fix it).</p><p><img src="/images/clojurex-2016-lunchtime-gathering.png" alt="ClojureX 2016 conference lunchtime gathering"></p><h1 id="Why-submit-a-talk"><a href="#Why-submit-a-talk" class="headerlink" title="Why submit a talk"></a>Why submit a talk</h1><img src="/images/clojurex-speaker-animated.png" class="img-topic"><p>Apart from getting a free ticket if you get accepted, its a great opportunity to discover what ideas and topics interest you the most.  What do you care about?  What challenges do you have at work?  What iches do you want to (programmatically) scratch?  These questions are ways to focus on things you would like to talk about.</p><p>If you want more talk ideas, then take a look at our past conferences to see the kinds of talks we have had before.  You may find something interesting to trigger your own ideas or find something that we havent talked about enough.</p><p>Public speaking is a great way to ground your understanding of a topic and give you more confidence.  Its also great for your career and getting you noticed with prospective employers.</p><p>If you want to do a talk but need some help or a confidence boost (its scary for everyone at first) then come along to the London Clojurian meetup on 2nd August where we are running a workshop on speaking at meetups and conferences.</p><h1 id="Experience-reports-wanted"><a href="#Experience-reports-wanted" class="headerlink" title="Experience reports wanted"></a>Experience reports wanted</h1><img src="/images/clojurex-audience-clapping.png" class="img-topic"><p>Anyone can give an interesting talk and some of the most valuable are based on your own experiences and that of your team.</p><p>Last year we had a great talk by William Hamilton, a lead developer at <a href="https://www.fundingcircle.com/uk/" target="_blank" rel="noopener">Funding Circle</a> who took the decision to re-architect all their software using Clojure and Clojurescript, coming from mainly a Ruby background. William talked about why such a change was valuable to the company, what the challenges were, how they trained people and helped them make the switch.  William also discussed the new Clojure &amp; Kafka based architect for their back-end services.  It was a facinating way to round of the conference.</p><h1 id="Previous-conferences"><a href="#Previous-conferences" class="headerlink" title="Previous conferences"></a>Previous conferences</h1><p>All the content from our <a href="https://skillsmatter.com/conferences/7430-clojure-exchange-2016#other_conferences" target="_blank" rel="noopener">previous conferences</a> are available via the <a href="https://skillsmatter.com/conferences/7430-clojure-exchange-2016#other_conferences" target="_blank" rel="noopener">ClojureX Conference page</a> on the SkillsMatter website.  This includes videos of the sessions and pictures from the event to help you get a sense of what it will be like.</p><p><img src="/images/clojurex-social-with-bruce.png" alt="Getting social with Bruce, the father and hugmaster of the London Clojure community"></p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Help make <a href="https://skillsmatter.com/conferences/7430-clojure-exchange-2016" target="_blank" rel="noopener">ClojureX 2016</a> our best conference so far by <a href="https://docs.google.com/forms/d/e/1FAIpQLScnCDLTwQkwLnC-HFDHzI1rs-oUovOhP9VR9Y5QW2rXNR7DVg/viewform?c=0&amp;w=1" target="_blank" rel="noopener">submitting a talk</a> (or as many talks as you want).</p><p>If you have never spoken before or want some handy hints on presenting and getting your talk accepted for Clojure eXchange, then join our workshop on <a href="http://www.meetup.com/London-Clojurians/events/232445819/" target="_blank" rel="noopener">Giving your first Meetup or Clojure eXchange talk</a> on 2nd August, 2016.</p><p>Anyone accepted to speak at the Clojure eXchange conference gets a free ticket, or re-imbursed if you have already purchased a ticket.  If accepted you also get a free ticket for someone else.  </p><p>There is a 25% discount on tickets for anyone who submits a session but does not get accepted.</p><p><a href="http://www.meetup.com/London-Clojurians/" target="_blank" rel="noopener"><img src="/images/london-clojurians-banner.png" alt="Join in the fun of functional programming with the London Clojurians"></a></p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/clojure-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;December 2016 we celebrate the sixth birthday of &lt;a href=&quot;https://skillsmatter.com/conferences/7430-clojure-exchange-2016&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ClojureX&lt;/a&gt;, a two-day conference organised by the &lt;a href=&quot;http://www.meetup.com/London-Clojurians/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;London Clojurians&lt;/a&gt; and &lt;a href=&quot;https://skillsmatter.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SkillsMatter&lt;/a&gt;.  Submit your talk ideas by 30th August to take part in the fun. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLScnCDLTwQkwLnC-HFDHzI1rs-oUovOhP9VR9Y5QW2rXNR7DVg/viewform?c=0&amp;amp;w=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;/images/clojurex-cfp-deadline-button.png&quot; alt=&quot;ClojureX CFP deadline - 30th August&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://skillsmatter.com/conferences/7430-clojure-exchange-2016#other_conferences&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Previous conferences&lt;/a&gt; have included a diverse range of topics and speakers in the areas of Clojure, Clojurescript and Functional Programming.  At last years conference we were quite surprised how many people are already using Clojure at work.  In 2014 we ran a poll of our audience and 18% were using Clojure on a daily basis.  For the same poll in 2015, 78% were using Clojure for their daily work.  What will the 2016 poll reveal?&lt;/p&gt;
&lt;p&gt;The London Clojure community continues to grow and we want to hear all your stories and learn from your experiences, no matter how long you have been working with Clojure.  So please consider &lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLScnCDLTwQkwLnC-HFDHzI1rs-oUovOhP9VR9Y5QW2rXNR7DVg/viewform?c=0&amp;amp;w=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;submitting a talk&lt;/a&gt; (or several talks) to the &lt;a href=&quot;https://skillsmatter.com/conferences/7430-clojure-exchange-2016&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ClojureX conference&lt;/a&gt; in London on the 1st &amp;amp; 2nd December.&lt;/p&gt;
&lt;p&gt;If you have never spoken before or want some handy hints on presenting and getting your talk accepted for Clojure eXchange, then join our workshop on &lt;a href=&quot;http://www.meetup.com/London-Clojurians/events/232445819/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Giving your first Meetup or Clojure eXchange talk&lt;/a&gt; on 2nd August, 2016 (video coming soon).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Anyone accepted to speak at the Clojure eXchange conference gets a free ticket, or re-imbursed if you have already purchased a ticket.  You also get a free ticket for a friend.  A 25% discount on ticket purchase for anyone who submits to the CFP but does not get accepted.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/categories/clojure/"/>
    
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="events" scheme="http://jr0cket.co.uk/tags/events/"/>
    
  </entry>
  
  <entry>
    <title>Spacemacs - Adding Custom Snippets to Yasnippet</title>
    <link href="http://jr0cket.co.uk/2016/07/spacemacs-adding-your-own-yasnippets.html"/>
    <id>http://jr0cket.co.uk/2016/07/spacemacs-adding-your-own-yasnippets.html</id>
    <published>2016-07-23T12:23:46.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/spacemacs-logo.png" class="img-thumbnail"><p>Using yasnippet saves time by avoiding the need to write boilerplate code and minimising other commonly typed content.  YASnippet contains mode-specific snippets that expand to anything from a simple text replacement to a code block structure that allows you to skip through parameters and other sections of the code block.  See YASnippet in action in this <a href="https://www.youtube.com/watch?v=-4O-ZYjQxks" target="_blank" rel="noopener">Emacs Yasnippet video</a>.</p><p>To use a specific snippet simply type the alias and press <code>M-/</code>.  For example, in html-mode typing <code>div</code> and pressing <code>M-/</code> expands to <code>&lt;div id=&quot;▮&quot; class=&quot;▯&quot;&gt;▯&lt;/div&gt;</code> and places the cursor so you can type in the <code>id</code> name, then <code>TAB</code> to the <code>class</code> name, finally <code>TAB</code> to the contents of the div.</p><p>You can also combine yasnippets with autocompletion select snippets from the autocompletion menu.</p><p>Spacemacs has lots of snippets for most of the languages and modes it supports.  However, YASnippets also uses a simple template system in plain text, so its pretty easy to learn.  Lets look at how to add your own snippets with Spacemacs.</p><blockquote><p>In regular Emacs, yasnippets expand funciton is usually bound to <code>TAB</code>, but that key is used already in Spacemacs so <code>M-/</code> is used instead.<br>If you just want text replacement you can also use <a href="http://ergoemacs.org/emacs/emacs_abbrev_mode.html" target="_blank" rel="noopener">Emacs Abbrev mode</a>.</p></blockquote><a id="more"></a><h1 id="Adding-your-private-snippets-to-Spacemacs"><a href="#Adding-your-private-snippets-to-Spacemacs" class="headerlink" title="Adding your private snippets to Spacemacs"></a>Adding your private snippets to Spacemacs</h1><p>The easiest place to add your own snippet definitions is in the <code>~/.emacs.d/private/snippets</code> directory.  Under this directory structure you should create a folder named after the relevant mode for your snippets, eg <code>markdown-mode</code>.  Inside this mode folder, create files whos names are based on the snippet alias you wish.</p><p>So for a work in progress snipped called <code>wip</code> in markdown mode I created <code>~/.emacs.d/private/snippets/markdown-mode/wip</code> file.</p><p>You need to load this new snippet into Spacemacs by either restarting or using the command <code>M-x yas-load-snippet-buffer</code> command in the buffer of the new snippet you have just written.  Ths snippet with then work within any markdown mode buffer.</p><h2 id="Managing-your-snippets"><a href="#Managing-your-snippets" class="headerlink" title="Managing your snippets"></a>Managing your snippets</h2><p>Although the private snippets directory is easy to use, it is not under version control.  So although its not over-riddend by Spacemacs it also means your private snippets are not backed up anywhere.</p><p>If you use the <code>~/.spacemacs.d/snippets/modename-mode/</code> directory structure for your snippets then you can version them with Git or similar versioning tools.</p><h1 id="How-to-write-a-snippet"><a href="#How-to-write-a-snippet" class="headerlink" title="How to write a snippet"></a>How to write a snippet</h1><p>Typically each snippet template is contained in its own file, named after the alias of the snippet.  So a snippet called <code>wip</code> will be in a filename wip, in a directory named after the relevant Emacs mode.</p><p>The basic structure of a snippet template is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#key : the name of the snippet you type</span><br><span class="line">#name : A description of the snippet (this shows in autocompletion menu too)</span><br><span class="line">#contributor: John Stevenson &lt;john@jr0cket.co.uk&gt;</span><br><span class="line"># --</span><br><span class="line">Add the content you want to replace the snippet name with when it expands</span><br></pre></td></tr></table></figure><p>The content can be anything, simple text or more usefully a code strucuture with placeholders for tab stops.  You can even include Emacs lisp (elisp) code in there too.</p><h2 id="Example-Simple-text-replacement"><a href="#Example-Simple-text-replacement" class="headerlink" title="Example: Simple text replacement"></a>Example: Simple text replacement</h2><p>I use markdown mode for writing a lot of content, especially for technical workshops.  As I am developing these workshops its useful to highlight which sections are still work in progress.  Rather than type the common message I use, I’ve created a simple snippet called <code>wip</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#key : wip</span><br><span class="line">#name : WorkInProgress</span><br><span class="line">#contributor: John Stevenson &lt;john@jr0cket.co.uk&gt;</span><br><span class="line"># --</span><br><span class="line">&gt; **Fixme** work in progress</span><br></pre></td></tr></table></figure><p>When you expand this snippet with <code>M-/</code> then the snippet name is replaced by the content.</p><h2 id="Example-Using-tab-stops"><a href="#Example-Using-tab-stops" class="headerlink" title="Example: Using tab stops"></a>Example: Using tab stops</h2><p>Lets look at an existing snippet called <code>form</code> in the <code>html-mode</code>.  This expands into a html form, but also helps you jump from method, id, action and content.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#contributor : Jimmy Wu &lt;frozenthrone88@gmail.com&gt;</span><br><span class="line">#name :&lt;form method=&quot;...&quot; id=&quot;...&quot; action=&quot;...&quot;&gt;&lt;/form&gt;</span><br><span class="line"># --</span><br><span class="line">&lt;form method=&quot;$1&quot; id=&quot;$2&quot; action=&quot;$3&quot;&gt;</span><br><span class="line">  $0</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>This snippet is the same as the simpler example, except we have added <strong>tab stops</strong> using the <code>$</code> sign and a number.  When you expand this snippet, the snippet name is replaced by the content as usual but the cursor is placed at the first tab stop <code>$1</code>.  Each time you press <code>TAB</code> you move to the next tab stop.</p><p><code>$0</code> is our exit point from the snippet, so pressing <code>TAB</code> reverts to the usual behaviour outside of YASnippet.</p><h1 id="Creating-a-snippet-from-existing-text"><a href="#Creating-a-snippet-from-existing-text" class="headerlink" title="Creating a snippet from existing text"></a>Creating a snippet from existing text</h1><p>A really fast way of creating a new snippet is to use a finished version of what you would like the snippet to expand to.  For a simple text replacement you just hightlight all the text and call <code>helm-yas-create-snippet-on-region</code>, save the snippet and you are done.</p><p>For a code structure with tab stops, simply hightlhght a completed code stucture, call <code>helm-yas-create-snippet-on-region</code> and edit the body of your snippet to replace the specific names and values with tab stop placeholders, <code>$1</code> <code>$2</code>, <code>$3</code>, etc.</p><h2 id="Example-Create-a-simple-text-replacement"><a href="#Example-Create-a-simple-text-replacement" class="headerlink" title="Example: Create a simple text replacement"></a>Example: Create a simple text replacement</h2><p>When I write blogs I include a image thumbnail that gives a visual clue as to the topic of the article.  Rather than type this in I created a snippet.</p><p>First I mark the text I want my new snippet to expand too, in this example: <strong>  {% img img-thumbnail /images/spacemacs.png %}  </strong>.</p><p>Then I call the function <code>helm-yas-create-snippet-on-region</code>.  This prompts me for the mode for the snippet, in this case markdown-mode, then prompts for the location for the snippet file, <code>~/.emacs/private/snippets/markdown-mode/imgtmb-spacemacs</code>.  A new buffer is created with my snippet already filled in.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># -*- mode: snippet -*-</span><br><span class="line">#name : imgtmb-spacemacs</span><br><span class="line">#key : imgtmb-spacemacs</span><br><span class="line">#contributor : jr0cket</span><br><span class="line"># --</span><br><span class="line">&#123;% img img-thumbnail /images/spacemacs.png %&#125;</span><br></pre></td></tr></table></figure><p>The new snippet buffer already has the name and key values populated from the filename I gave for the snippet, <code>imgtmb-spacemacs</code>.  The snippet body is also populated automatically from the text I had highlighted.  So all I need to do is save the new snippet and try it out.</p><h1 id="Testing-your-snippets"><a href="#Testing-your-snippets" class="headerlink" title="Testing your snippets"></a>Testing your snippets</h1><p>Once you have written your snippet, you can quickly test it using <code>M-x yas-tryout-snippet</code>.  This opens a new empty buffer in the appropriate major mode and inserts the snippet so you can then test it with <code>M-/</code>.</p><p>If you just want to try the snippet in an existing buffer, then use <code>M-x yas-load-snippet-buffer</code> to load this new snippet into the correct mode.  <code>M-x yas-load-snippet-buffer</code> does exactly the same except it kills the snippet buffer (prompting to save first if neccessary).</p><blockquote><p>There are no default keybindings for these commands in Spacemacs, so you could create a binding under <code>C-o</code>, for example <code>C-o C-s t</code> to try a snippet and <code>C-o C-s l</code> to load a snippet.</p></blockquote><h1 id="Adding-yas-snippets-to-autocompletion-in-Spacemacs"><a href="#Adding-yas-snippets-to-autocompletion-in-Spacemacs" class="headerlink" title="Adding yas-snippets to autocompletion in Spacemacs"></a>Adding yas-snippets to autocompletion in Spacemacs</h1><p>By adding the <code>autocompletion</code> layer in Spacemacs the YASnippets can be shown in the autocompletion menu as you type.</p><p>By default, snippets are not shown in the auto-completion popup, so set the variable <code>auto-completion-enable-snippets-in-popup</code> to <code>t</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(setq-default dotspacemacs-configuration-layers</span><br><span class="line">              &apos;((auto-completion :variables</span><br><span class="line">                                 auto-completion-enable-snippets-in-popup t)))</span><br></pre></td></tr></table></figure><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Find out more about YASnippets and autocompletion from the <a href="https://github.com/syl20bnr/spacemacs/tree/master/layers/auto-completion" target="_blank" rel="noopener">Github repository for Spacemacs autocompletion layer</a>.</p><p>For more details and examples on writing your own snipplets, take a look at:</p><ul><li><a href="https://www.youtube.com/watch?v=-4O-ZYjQxks" target="_blank" rel="noopener">Emacs YASnippet video tutorial</a></li><li><a href="https://joaotavora.github.io/yasnippet/snippet-development.html" target="_blank" rel="noopener">Snippet development</a>.</li><li><a href="http://jotham-city.com/blog/2015/03/21/adding-yasnippets-snippets/" target="_blank" rel="noopener">Adding YASnippets snippets</a></li><li><a href="http://cupfullofcode.com/blog/2013/02/26/snippet-expansion-with-yasnippet/index.html" target="_blank" rel="noopener">Snippet expansion with YASnippet</a></li></ul><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/spacemacs-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Using yasnippet saves time by avoiding the need to write boilerplate code and minimising other commonly typed content.  YASnippet contains mode-specific snippets that expand to anything from a simple text replacement to a code block structure that allows you to skip through parameters and other sections of the code block.  See YASnippet in action in this &lt;a href=&quot;https://www.youtube.com/watch?v=-4O-ZYjQxks&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Emacs Yasnippet video&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use a specific snippet simply type the alias and press &lt;code&gt;M-/&lt;/code&gt;.  For example, in html-mode typing &lt;code&gt;div&lt;/code&gt; and pressing &lt;code&gt;M-/&lt;/code&gt; expands to &lt;code&gt;&amp;lt;div id=&amp;quot;▮&amp;quot; class=&amp;quot;▯&amp;quot;&amp;gt;▯&amp;lt;/div&amp;gt;&lt;/code&gt; and places the cursor so you can type in the &lt;code&gt;id&lt;/code&gt; name, then &lt;code&gt;TAB&lt;/code&gt; to the &lt;code&gt;class&lt;/code&gt; name, finally &lt;code&gt;TAB&lt;/code&gt; to the contents of the div.&lt;/p&gt;
&lt;p&gt;You can also combine yasnippets with autocompletion select snippets from the autocompletion menu.&lt;/p&gt;
&lt;p&gt;Spacemacs has lots of snippets for most of the languages and modes it supports.  However, YASnippets also uses a simple template system in plain text, so its pretty easy to learn.  Lets look at how to add your own snippets with Spacemacs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In regular Emacs, yasnippets expand funciton is usually bound to &lt;code&gt;TAB&lt;/code&gt;, but that key is used already in Spacemacs so &lt;code&gt;M-/&lt;/code&gt; is used instead.&lt;br&gt;If you just want text replacement you can also use &lt;a href=&quot;http://ergoemacs.org/emacs/emacs_abbrev_mode.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Emacs Abbrev mode&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="spacemacs" scheme="http://jr0cket.co.uk/tags/spacemacs/"/>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="yasnippets" scheme="http://jr0cket.co.uk/tags/yasnippets/"/>
    
  </entry>
  
  <entry>
    <title>Clojure Dojo: Celebrity Name Smash - June 2016</title>
    <link href="http://jr0cket.co.uk/2016/06/clojure-dojo-celebrity-name-smash-June-2016.html"/>
    <id>http://jr0cket.co.uk/2016/06/clojure-dojo-celebrity-name-smash-June-2016.html</id>
    <published>2016-06-28T21:29:04.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/clojure-logo.png" class="img-thumbnail"><p>The June 2016 edition of the London Clojurians coding dojo set the challenge of building a celebrity name smash, taking two “celebrities” and smashing their names together to make a weird or ammusing gestalt name.</p><p>For bonus points the challenge would include this celebrity name smash as a service and even more bonus points if using the new <code>clojure.spec</code> library to put specifications around data structures and functions.</p><blockquote><p>Bonus points are non-redeemable, sorry!</p></blockquote><p>Although our group didnt get get any of the bonus levels, here is the blow by blow development of our code for the Celebrity Name Smash.</p><a id="more"></a><p><a href="http://www.meetup.com/London-Clojurians/" target="_blank" rel="noopener"><img src="/images/london-clojurians-banner.png" alt="Join in the fun of functional programming with the London Clojurians"></a></p><h1 id="A-simple-leiningen-project-to-start"><a href="#A-simple-leiningen-project-to-start" class="headerlink" title="A simple leiningen project to start"></a>A simple leiningen project to start</h1><p>We created a default Clojure project to start using the following leiningen command</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lein new celebrity-name-smash</span><br></pre></td></tr></table></figure><p>This created a simple project using Clojure 1.8.0.  If we had chosen to use <code>clojure.spec</code> as well then we would have updated the <code>project.clj</code> file to use Clojure 1.9.x as a dependency instead. </p><h1 id="Modeling-the-Celebrities"><a href="#Modeling-the-Celebrities" class="headerlink" title="Modeling the Celebrities"></a>Modeling the Celebrities</h1><p>The simplest way to represent a celebrity name is in a string.  So we bount a name called <code>celebrities</code> to a string containing the first celebrity we could think of</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> celbrties <span class="string">"Brad Pitt"</span>)</span><br></pre></td></tr></table></figure><p>As we want to have two celebrties then we changed the data structure into a Clojure vector.  A vector is the most flexible data structure in Clojure.  So we redefined the name <code>celebrities</code> to be bound to a vector of strings containing the first celebrity couple we could think of.</p><figure class="highlight clj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> celebrities [<span class="string">"Brad Pitt"</span> <span class="string">"Angelina Jolie"</span>])</span><br></pre></td></tr></table></figure><h1 id="Splitting-names"><a href="#Splitting-names" class="headerlink" title="Splitting names"></a>Splitting names</h1><p>Each celebrity has a first and last name, so we need to split them into individual strings first.</p><blockquote><p>We decided to exclude celebrities with just a single name.</p></blockquote><p>From a quick Google we found the <a href="https://clojuredocs.org/clojure.string/split" target="_blank" rel="noopener">clojure.string/split</a> function that will split a string on a given pattern, that pattern being a regular expression (regex).</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">clojure.string/split</span> <span class="string">"Clojure is awesome!"</span> #<span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; =&gt; ["Clojure" "is" "awesome!"]</span></span><br></pre></td></tr></table></figure><p>The regular expression pattern <code>&quot; &quot;</code> matches the space characters.  We could have also used <code>#&quot;+s&quot;</code> for the same results in this example, although it was felt that the space was clearer in intent.</p><p>So we wrote a function called <code>name-split</code> to take a first and last name as a string and return two seperate strings, one for the first name and one for the last name.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> name-split</span><br><span class="line">  <span class="string">"Splits a celebrity name into their first &amp; last names"</span></span><br><span class="line">  [name]</span><br><span class="line">  (<span class="name">str/split</span> name #<span class="string">" "</span>))</span><br></pre></td></tr></table></figure><p>We tested the <code>name-split</code> function in the repl</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">name-split</span> <span class="string">"Brad Pitt"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; =&gt;["Brad" "Pitt"]</span></span><br></pre></td></tr></table></figure><p>We could now succesfully split the full name of a celebrity into their first and last names.</p><blockquote><p>A more advanced example of splitting up words would be to use re-seq with a regex patter, as in the <a href="https://github.com/practicalli/clojure-through-code/blob/master/src/clojure_through_code/xx-hhgttg-book.clj" target="_blank" rel="noopener">HHGTTG book processing example in clojure-through-code</a>.</p></blockquote><h1 id="Creating-sub-strings-of-names-the-long-way"><a href="#Creating-sub-strings-of-names-the-long-way" class="headerlink" title="Creating sub-strings of names the long way"></a>Creating sub-strings of names the long way</h1><p>As the aim of our code is to create silly and weird names from celebrity names, we wont get the desired results with just the first and last names.  So we take those and split them.</p><p>At first we decided to split them in half, rounding down for odd lenght names.</p><p>As a Clojure String can be used like a collection of characters, we could simply <code>take</code> the first x number of characters.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">take</span></span> <span class="number">2</span> <span class="string">"Brad"</span>)</span><br><span class="line"><span class="comment">;; =&gt; (\B \r)</span></span><br></pre></td></tr></table></figure><p>The value returned is a list of characters, so we would have to combine them back into a string.  Just using the <code>str</code> function on the result of the <code>take</code> function returned a lazy sequence.  To get a string we needed to <code>apply</code> or <code>reduce</code> with the <code>str</code> function</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; (str (take 2 "Brad")) </span></span><br><span class="line"><span class="comment">;; =&gt; "clojure.lang.LazySeq@c31"</span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">apply</span></span> str (<span class="name"><span class="builtin-name">take</span></span> <span class="number">2</span> <span class="string">"Brad"</span>))   <span class="comment">;; =&gt; "Br"</span></span><br><span class="line">(<span class="name"><span class="builtin-name">reduce</span></span> str (<span class="name"><span class="builtin-name">take</span></span> <span class="number">2</span> <span class="string">"Brad"</span>))  <span class="comment">;; =&gt; "Br"</span></span><br></pre></td></tr></table></figure><p>To do this for a name of any length we would need to <code>count</code> the string characters and divide by 2.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">take</span></span> (/ (<span class="name"><span class="builtin-name">count</span></span> <span class="string">"Brad"</span>) <span class="number">2</span>) <span class="string">"Brad"</span>)</span><br><span class="line"><span class="comment">;; =&gt; (\B \r)</span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">apply</span></span> str (<span class="name"><span class="builtin-name">take</span></span> (/ (<span class="name"><span class="builtin-name">count</span></span> <span class="string">"Brad"</span>) <span class="number">2</span>) <span class="string">"Brad"</span>))</span><br><span class="line"><span class="comment">;; =&gt; "Br"</span></span><br></pre></td></tr></table></figure><p>This code also works for names that have an odd number of characters.  When the odd number of characters is divided by two, a Clojure ratio type is used to hold the result rather than return a decimal value.  The <code>take</code> function calculated the value of the ratio type and rounds it to the nearest whole number.</p><p>Here is a breakdown of how this code works with a name containing an odd number of characters.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">count</span></span> <span class="string">"Bradley"</span>)</span><br><span class="line"><span class="comment">;; =&gt; 7</span></span><br><span class="line"></span><br><span class="line">(/ (<span class="name"><span class="builtin-name">count</span></span> <span class="string">"Bradley"</span>) <span class="number">2</span>)</span><br><span class="line"><span class="comment">;; =&gt; 7/2</span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">take</span></span> (/ (<span class="name"><span class="builtin-name">count</span></span> <span class="string">"Bradley"</span>) <span class="number">2</span>) <span class="string">"Bradley"</span>)</span><br><span class="line"><span class="comment">;; =&gt; (\B \r \a \d)</span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">apply</span></span> str (<span class="name"><span class="builtin-name">take</span></span> (/ (<span class="name"><span class="builtin-name">count</span></span> <span class="string">"Bradley"</span>) <span class="number">2</span>) <span class="string">"Bradley"</span>))</span><br><span class="line"><span class="comment">;; =&gt; "Brad"</span></span><br></pre></td></tr></table></figure><h1 id="Creating-sub-strings-the-short-way"><a href="#Creating-sub-strings-the-short-way" class="headerlink" title="Creating sub-strings the short way"></a>Creating sub-strings the short way</h1><p>After reviewing this code it seemed a little complex for what we wanted, so a quick Google gave us the <code>subs</code> function.  The <code>subs</code> function takes a string and a starting point for the split, with an optional end point</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">subs</span> <span class="string">"Brad"</span> <span class="number">0</span> <span class="number">2</span>)</span><br><span class="line"><span class="comment">;; =&gt; "Br"</span></span><br><span class="line"></span><br><span class="line">(<span class="name">subs</span> <span class="string">"Brad"</span> <span class="number">2</span>)</span><br><span class="line"><span class="comment">;; =&gt; "ad"</span></span><br><span class="line"></span><br><span class="line">(<span class="name">subs</span> <span class="string">"Bradley"</span> <span class="number">0</span> (/ (<span class="name"><span class="builtin-name">count</span></span> <span class="string">"Bradley"</span>) <span class="number">2</span>))</span><br><span class="line"><span class="comment">;; =&gt; "Bra"</span></span><br></pre></td></tr></table></figure><p>So when we want the first part of the name we give the <code>subs</code> function a start point and an end point for the sub-division.  For the last part of a name we simply give the start point for the sub-division.</p><blockquote><p><strong>Hint</strong> If the <code>take</code> or <code>subs</code> function did not deal with odd numbers of characters, then instead of dividing by 2 we could have used the <code>quot</code> function.  The <code>quote</code> function divides the first argument by the second argument, returning the result as a whole number.</p></blockquote><h1 id="Creating-a-subname-function-for-the-first-name"><a href="#Creating-a-subname-function-for-the-first-name" class="headerlink" title="Creating a subname function for the first name"></a>Creating a subname function for the first name</h1><p>We created a function that takes the name as a argument and returns the substring for the first half of the name</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> first-celeb-subname [name]</span><br><span class="line">  (<span class="name"><span class="builtin-name">let</span></span> [end (/ (<span class="name"><span class="builtin-name">count</span></span> name) <span class="number">2</span>)]</span><br><span class="line">    (<span class="name">subs</span> name <span class="number">0</span> end)))</span><br><span class="line"></span><br><span class="line"><span class="comment">;; calling the function with an odd lenght name</span></span><br><span class="line">(<span class="name">first-celeb-subname</span> <span class="string">"Bradley"</span>)</span><br><span class="line"><span class="comment">;; =&gt; "Bra"</span></span><br></pre></td></tr></table></figure><p>We used the <code>let</code> function to create a local name (symbol) called <code>end</code> that points to the end position in the string, based on dividing the name by 2.  Then we call the <code>subs</code> fuction to get the substring from 0 to the value of <code>end</code>.</p><h1 id="Creating-a-more-random-sub-name-function"><a href="#Creating-a-more-random-sub-name-function" class="headerlink" title="Creating a more random sub-name function"></a>Creating a more random sub-name function</h1><p>Just talking the half way point for our substring only gives one result.  If we add a random element to creating our substring then we should get many more variations in results.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> first-celeb-subname [name]</span><br><span class="line">  (<span class="name"><span class="builtin-name">let</span></span> [end (<span class="name"><span class="builtin-name">+</span></span> <span class="number">1</span> (<span class="name"><span class="builtin-name">rand-int</span></span> (<span class="name"><span class="builtin-name">count</span></span> name)))]</span><br><span class="line">    (<span class="name">subs</span> name <span class="number">0</span> end)))</span><br></pre></td></tr></table></figure><p>A slight refinement can be made by replacing <code>+ 1</code> with the <code>inc</code> function </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> first-celeb-subname [name]</span><br><span class="line">  (<span class="name"><span class="builtin-name">let</span></span> [end (<span class="name"><span class="builtin-name">inc</span></span> (<span class="name"><span class="builtin-name">rand-int</span></span> (<span class="name"><span class="builtin-name">count</span></span> name)))]</span><br><span class="line">    (<span class="name">subs</span> name <span class="number">0</span> end)))</span><br></pre></td></tr></table></figure><h1 id="A-subname-function-for-the-second-celebrity"><a href="#A-subname-function-for-the-second-celebrity" class="headerlink" title="A subname function for the second celebrity"></a>A subname function for the second celebrity</h1><p>We wanted to combine two first names and two last names to make a new first &amp; last name.  So we need a similar function to create the lastname subname</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> last-celeb-subname [name]</span><br><span class="line">  (<span class="name"><span class="builtin-name">let</span></span> [start (<span class="name"><span class="builtin-name">inc</span></span> (<span class="name"><span class="builtin-name">rand-int</span></span> (<span class="name"><span class="builtin-name">count</span></span> name)))]</span><br><span class="line">    (<span class="name">subs</span> name start)))</span><br></pre></td></tr></table></figure><p>This function is almost identical to the first function, however only a start position is provided to <code>subs</code> function, creating a substring from the <code>start</code> position to the end of the name.</p><h1 id="Putting-it-all-together"><a href="#Putting-it-all-together" class="headerlink" title="Putting it all together"></a>Putting it all together</h1><p>Finally we call these functions from a main function named <code>celeb-name-smash</code>, which takes two celebrity names as string arguments and returns a string containing the smashed name.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> celeb-name-smash</span><br><span class="line">  <span class="string">"Smashes to celebrity names together"</span></span><br><span class="line">  [celeb-one celeb-two]</span><br><span class="line">  (<span class="name"><span class="builtin-name">str</span></span> (<span class="name">first-celeb-subname</span> (<span class="name"><span class="builtin-name">first</span></span> (<span class="name">name-split</span> celeb-one)))</span><br><span class="line">       (<span class="name">second-celeb-subname</span> (<span class="name"><span class="builtin-name">first</span></span> (<span class="name">name-split</span> celeb-two)))</span><br><span class="line">       <span class="string">" "</span></span><br><span class="line">       (<span class="name">first-celeb-subname</span> (<span class="name"><span class="builtin-name">last</span></span> (<span class="name">name-split</span> celeb-one)))</span><br><span class="line">       (<span class="name">second-celeb-subname</span> (<span class="name"><span class="builtin-name">last</span></span> (<span class="name">name-split</span> celeb-two)))))</span><br><span class="line"></span><br><span class="line"><span class="comment">;; call the celeb-name-smash function with example data</span></span><br><span class="line">(<span class="name">name-smash-strings</span> <span class="string">"Brad Pitt"</span> <span class="string">"Angelina Jolie"</span>)</span><br><span class="line"><span class="comment">;; =&gt; "Brana Pitie"</span></span><br><span class="line"><span class="comment">;; =&gt; "Brelina Pie"</span></span><br><span class="line"><span class="comment">;; =&gt; "Brelina Piolie"</span></span><br><span class="line"><span class="comment">;; =&gt; "Brlina Pi"</span></span><br></pre></td></tr></table></figure><p>The <code>celeb-name-smash</code> function has a lot of duplication, so should probably be refactored to make it more elegant.  However, we ran out of time at the dojo, so I will have a look at refactoring this function as homework.</p><p>Thanks to everyone that took part in the <a href="http://www.meetup.com/London-Clojurians/events/231239358/" target="_blank" rel="noopener">London Clojurians dojo at Thoughworks in June 2016</a>, especially to the organisers for getting us together and feeding us lots of pizza.</p><p><a href="http://www.meetup.com/London-Clojurians/" target="_blank" rel="noopener"><img src="/images/london-clojurians-banner.png" alt="Join in the fun of functional programming with the London Clojurians"></a></p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/clojure-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;The June 2016 edition of the London Clojurians coding dojo set the challenge of building a celebrity name smash, taking two “celebrities” and smashing their names together to make a weird or ammusing gestalt name.&lt;/p&gt;
&lt;p&gt;For bonus points the challenge would include this celebrity name smash as a service and even more bonus points if using the new &lt;code&gt;clojure.spec&lt;/code&gt; library to put specifications around data structures and functions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bonus points are non-redeemable, sorry!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Although our group didnt get get any of the bonus levels, here is the blow by blow development of our code for the Celebrity Name Smash.&lt;/p&gt;
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/categories/clojure/"/>
    
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="dojo" scheme="http://jr0cket.co.uk/tags/dojo/"/>
    
  </entry>
  
  <entry>
    <title>Git 2.9 on Ubuntu 16.04</title>
    <link href="http://jr0cket.co.uk/2016/06/git-2-9-on-ubuntu-16-04.html"/>
    <id>http://jr0cket.co.uk/2016/06/git-2-9-on-ubuntu-16-04.html</id>
    <published>2016-06-18T14:52:09.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/git-logo.png" class="img-thumbnail"><p><a href="https://github.com/git/git/blob/master/Documentation/RelNotes/2.9.0.txt" target="_blank" rel="noopener">Git version 2.9 has been released</a> and it brings some <a href="https://github.com/blog/2188-git-2-9-has-been-released" target="_blank" rel="noopener">new features and performance benefits</a> when using git submodules.</p><p>Here is how to install Git version 2.9 on the latest release of Ubuntu (16.04)</p><a id="more"></a><h2 id="Installing-on-Ubuntu"><a href="#Installing-on-Ubuntu" class="headerlink" title="Installing on Ubuntu"></a>Installing on Ubuntu</h2><p>Ubuntu 16.04 comes with Git 2.7.x, which is a little old now.  As versions 2.8 &amp; 2.9 are not part of the Ubuntu repositories, you need to add the git-core personal package archive.</p><p>Open up a terminal and run the following commands, supplying your password when prompted.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:git-core/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>To check the new version of Git is working, use the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h2 id="Whats-new"><a href="#Whats-new" class="headerlink" title="Whats new?"></a>Whats new?</h2><p>Rather than copy everything here, there is a very good <a href="https://github.com/blog/2188-git-2-9-has-been-released" target="_blank" rel="noopener">overview of the Git 2.9 release</a> on the <a href="https://github.com/blog/" target="_blank" rel="noopener">Github blog</a>.  Or take a look at the in-depth <a href="https://github.com/git/git/blob/master/Documentation/RelNotes/2.9.0.txt" target="_blank" rel="noopener">release notes</a>.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/git-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/git/git/blob/master/Documentation/RelNotes/2.9.0.txt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git version 2.9 has been released&lt;/a&gt; and it brings some &lt;a href=&quot;https://github.com/blog/2188-git-2-9-has-been-released&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;new features and performance benefits&lt;/a&gt; when using git submodules.&lt;/p&gt;
&lt;p&gt;Here is how to install Git version 2.9 on the latest release of Ubuntu (16.04)&lt;/p&gt;
    
    </summary>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/categories/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Transducers in Clojure: Getting Started</title>
    <link href="http://jr0cket.co.uk/2016/06/transducers-in-clojure-getting-started.html"/>
    <id>http://jr0cket.co.uk/2016/06/transducers-in-clojure-getting-started.html</id>
    <published>2016-06-15T11:34:06.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/clojure-logo-thumbnail.png" class="img-thumbnail"><p>Transducers are built upon the design princlple in Clojure of composing functions together, allowing you to elegantly abstract functional composition and create a workflow that will transform data without being tied to a specific context.  So what does that actually mean and what does the code look like?  Is there a transducer function or is it just extensions to existing functions.  These are the questions we will explore and answer.</p><blockquote><p>If you are in the early stages of learning Clojure, then I suggest getting your head around functions such as map &amp; reduce and composing functions with the threading macros before diving into Transducers.</p></blockquote><p>This is my interpretation of the really great introduction to Transducers from <a href="https://funcool.github.io/clojurescript-unraveled/" target="_blank" rel="noopener">Clojurescript Unraveled</a>, expanded with additional code and my own comments.</p><a id="more"></a><h2 id="Defining-a-data-structure"><a href="#Defining-a-data-structure" class="headerlink" title="Defining a data structure"></a>Defining a data structure</h2><p>Defining a data structure that will represent our fruit, including whether that fruit is rotten or clean.  We have two collections of grapes, one green, one black.  Each cluster has 2 grapes on it (not a very big cluster in this example)</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> grape-clusters</span><br><span class="line">  [&#123;<span class="symbol">:grapes</span> [&#123;<span class="symbol">:rotten?</span> <span class="literal">false</span> <span class="symbol">:clean?</span> <span class="literal">false</span>&#125;</span><br><span class="line">             &#123;<span class="symbol">:rotten?</span> <span class="literal">true</span>  <span class="symbol">:clean?</span> <span class="literal">false</span>&#125;]</span><br><span class="line">    <span class="symbol">:colour</span> <span class="symbol">:green</span>&#125;</span><br><span class="line">   &#123;<span class="symbol">:grapes</span> [&#123;<span class="symbol">:rotten?</span> <span class="literal">true</span>  <span class="symbol">:clean?</span> <span class="literal">false</span>&#125;</span><br><span class="line">             &#123;<span class="symbol">:rotten?</span> <span class="literal">false</span> <span class="symbol">:clean?</span> <span class="literal">false</span>&#125;]&#125;</span><br><span class="line">   <span class="symbol">:colour</span> <span class="symbol">:black</span>])</span><br></pre></td></tr></table></figure><p>Each grape cluster has the following structure</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="symbol">:grapes</span> [&#123;<span class="symbol">:rotten?</span> <span class="literal">false</span> <span class="symbol">:clean?</span> <span class="literal">false</span>&#125;</span><br><span class="line">          &#123;<span class="symbol">:rotten?</span> <span class="literal">true</span>  <span class="symbol">:clean?</span> <span class="literal">false</span>&#125;]</span><br><span class="line"> <span class="symbol">:colour</span> <span class="symbol">:green</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Splitting-into-grape-clusters"><a href="#Splitting-into-grape-clusters" class="headerlink" title="Splitting into grape clusters"></a>Splitting into grape clusters</h2><p>We want to split the grape clusters into individual grapes, discarding the rotten grapes.  The remaing grapes will be checked to see if they are clean.  We should be left with one green and one black grape.</p><p>First lets define a function that returns a collection of grapes, given a specific grape cluster.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> split-cluster</span><br><span class="line"><span class="string">"Takes a grape cluster and returns the vector of all the grapes in that cluster"</span></span><br><span class="line">  [cluster]</span><br><span class="line">  (<span class="symbol">:grapes</span> cluster))</span><br></pre></td></tr></table></figure><p>The body of this function returns the value pointed to by the <code>:grapes</code> keyword, which will be a collection of grapes.  We do not ask for the value of :colours as in this case the colour of the grape is irelevant.</p><h2 id="Testing-our-code-in-the-REPL"><a href="#Testing-our-code-in-the-REPL" class="headerlink" title="Testing our code in the REPL"></a>Testing our code in the REPL</h2><p>The grape-clusters data structure is a vector of two grape clusters.  To see what a grape cluster is, get the first element of that data structure</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">first</span></span> grape-clusters)</span><br><span class="line"><span class="comment">;; =&gt; &#123;:grapes [&#123;:rotten? false, :clean? false&#125; &#123;:rotten? true, :clean? false&#125;], :colour :green&#125;</span></span><br></pre></td></tr></table></figure><p>For each cluster in grape-clusters, return just the :grapes data, ignoring the colour information</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">split-cluster</span> &#123;<span class="symbol">:grapes</span> [&#123;<span class="symbol">:rotten?</span> <span class="literal">false</span> <span class="symbol">:clean?</span> <span class="literal">false</span>&#125;</span><br><span class="line">                         &#123;<span class="symbol">:rotten?</span> <span class="literal">true</span>  <span class="symbol">:clean?</span> <span class="literal">false</span>&#125;]</span><br><span class="line">                <span class="symbol">:colour</span> <span class="symbol">:green</span>&#125;)</span><br><span class="line"><span class="comment">;; =&gt;[&#123;:rotten? false, :clean? false&#125; &#123;:rotten? true, :clean? false&#125;]</span></span><br></pre></td></tr></table></figure><h2 id="A-filter-for-rotten-grapes"><a href="#A-filter-for-rotten-grapes" class="headerlink" title="A filter for rotten grapes"></a>A filter for rotten grapes</h2><p>We dont want to include any rotten grapes after we have processed all our clusters, so here we define a simple filter to only return grapes where <code>:rotten?</code> is false.</p><p>This filter will be used on each individual grape extracted from the cluster.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> not-rotten</span><br><span class="line">  <span class="string">"Given a grape, only return it if it is not rotten.  A grape is defined as &#123;:rotten? true|false :clean? true|false&#125;"</span></span><br><span class="line">  [grape]</span><br><span class="line">  (<span class="name"><span class="builtin-name">not</span></span> (<span class="symbol">:rotten?</span> grape)))</span><br></pre></td></tr></table></figure><h2 id="Cleaning-all-the-grapes"><a href="#Cleaning-all-the-grapes" class="headerlink" title="Cleaning all the grapes"></a>Cleaning all the grapes</h2><p>Any grapes we have left should be cleaned.  Rather than model the cleaning process, we have simply written a function that updates all the grapes with a value of <code>true</code> for the key <code>:clean?</code> </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> clean-grape</span><br><span class="line">  <span class="string">"Given a grape, updating the grapes :clean? value to true regardless of its current value.  A grape is defined as &#123;:rotten? true|false :clean? true|false&#125;"</span></span><br><span class="line">  [grape]</span><br><span class="line">  (<span class="name"><span class="builtin-name">assoc</span></span> grape <span class="symbol">:clean?</span> <span class="literal">true</span>))</span><br></pre></td></tr></table></figure><p>Lets give our clean grape function a quick test in the REPL.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">clean-grape</span> &#123;<span class="symbol">:rotten?</span> <span class="literal">false</span> <span class="symbol">:clean?</span> <span class="literal">false</span>&#125;)</span><br><span class="line"><span class="comment">;; =&gt; &#123;:rotten? false, :clean? true&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Functional-composition-using-the-thread-last-macro"><a href="#Functional-composition-using-the-thread-last-macro" class="headerlink" title="Functional composition using the thread last macro."></a>Functional composition using the thread last macro.</h1><p>Each line passes its evaluate value to the next line as its last argument.  Here is the algorithm we want to create with our code:</p><ul><li>evaluate the name grape-clusters and return the data structure it points to.</li><li>use mapcat to map the split-clusters function over each element in grape-clusters, returning 4 grapes concatinated into one collection</li><li>filter the 4 grapes, dropping the grapes where :rotten? equals true, returning 2 grapes</li><li>update each grape to have a :clean? value of true</li></ul><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">-&gt;&gt;</span></span> grape-clusters</span><br><span class="line">     (<span class="name"><span class="builtin-name">mapcat</span></span> split-cluster)</span><br><span class="line">     (<span class="name"><span class="builtin-name">filter</span></span> not-rotten)</span><br><span class="line">     (<span class="name"><span class="builtin-name">map</span></span> clean-grape))</span><br><span class="line"></span><br><span class="line"><span class="comment">;; =&gt; (&#123;:rotten? false, :clean? true&#125; &#123;:rotten? false, :clean? true&#125;)</span></span><br></pre></td></tr></table></figure><h1 id="Using-partial-to-compose-functions-together"><a href="#Using-partial-to-compose-functions-together" class="headerlink" title="Using partial to compose functions together"></a>Using partial to compose functions together</h1><p>  Composing functions are read in the lisp way, so we pass the grape-clusters collection to the last composed function first</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> process-clusters</span><br><span class="line">  <span class="string">"Takes clusters of grapes and returns only the nice ones, that have been cleaned.  Using comp, read the function from the bottom up to understand the argument."</span></span><br><span class="line">  (<span class="name"><span class="builtin-name">comp</span></span></span><br><span class="line">   (<span class="name"><span class="builtin-name">partial</span></span> map clean-grape)</span><br><span class="line">   (<span class="name"><span class="builtin-name">partial</span></span> filter not-rotten)</span><br><span class="line">   (<span class="name"><span class="builtin-name">partial</span></span> mapcat split-cluster)))</span><br></pre></td></tr></table></figure><p>Now lets call this composite function again…</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">process-clusters</span> grape-clusters)</span><br><span class="line"><span class="comment">;; =&gt; (&#123;:rotten? false, :clean? true&#125; &#123;:rotten? false, :clean? true&#125;)</span></span><br></pre></td></tr></table></figure><p>The <code>process-clusters</code> definition above uses the lisp way of evaluation - inside-out.</p><p>Here is a simple example of evaluating a maths expression from inside-out.  Each line is the same expression, but with the innermost expression replaced by its value.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">+</span></span> <span class="number">2</span> <span class="number">3</span> (<span class="name"><span class="builtin-name">+</span></span> <span class="number">4</span> <span class="number">5</span> (/ <span class="number">24</span> <span class="number">6</span>)))   <span class="comment">;; (/ 24 6)   =&gt; 4</span></span><br><span class="line">(<span class="name"><span class="builtin-name">+</span></span> <span class="number">2</span> <span class="number">3</span> (<span class="name"><span class="builtin-name">+</span></span> <span class="number">4</span> <span class="number">5</span> <span class="number">4</span>))          <span class="comment">;; (+ 4 5 4)  =&gt; 13</span></span><br><span class="line">(<span class="name"><span class="builtin-name">+</span></span> <span class="number">2</span> <span class="number">3</span> <span class="number">13</span>)                 <span class="comment">;; (+ 2 3 13) =&gt; 18</span></span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure><h1 id="Transducers-in-Clojure"><a href="#Transducers-in-Clojure" class="headerlink" title="Transducers in Clojure"></a>Transducers in Clojure</h1><p>There are several functions that work on sequences (collections) which will return what is refered to as a transducer if they are not passed a sequence as an argument.  For example, if you only pass map a function and not a collector, it returns a transducer that can be used with a collection that is passed to it later.</p><p>Using the transduce feature of each of the functions in process-clusters, we can actually remove the partial function from our code and redefine a simpler version of process-clusters</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> process-clusters</span><br><span class="line">  (<span class="name"><span class="builtin-name">comp</span></span></span><br><span class="line">   (<span class="name"><span class="builtin-name">mapcat</span></span> split-cluster)</span><br><span class="line">   (<span class="name"><span class="builtin-name">filter</span></span> not-rotten)</span><br><span class="line">   (<span class="name"><span class="builtin-name">map</span></span> clean-grape)))</span><br></pre></td></tr></table></figure><p>A few things changed since our previous definition process-clusters. First of all, we are using the transducer-returning versions of mapcat, filter and map instead of partially applying them for working on sequences.</p><p>Also you may have noticed that the order in which they are composed is reversed, they appear in the order they are executed. Note that all map, filter and mapcat return a transducer. filter transforms the reducing function returned by map, applying the filtering before proceeding; mapcat transforms the reducing function returned by filter, applying the mapping and catenation before proceeding.</p><p>One of the powerful properties of transducers is that they are combined using regular function composition. What’s even more elegant is that the composition of various transducers is itself a transducer! This means that our process-cluster is a transducer too, so we have defined a composable and context-independent algorithmic transformation.</p><p>Many of the core ClojureScript functions accept a transducer, let’s look at some examples with our newly defined version of <code>process-cluster</code>:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">into</span></span> [] process-clusters grape-clusters)</span><br><span class="line"><span class="comment">;; =&gt; [&#123;:rotten? false, :clean? true&#125; &#123;:rotten? false, :clean? true&#125;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">sequence</span></span> process-clusters grape-clusters)</span><br><span class="line"><span class="comment">;; =&gt; (&#123;:rotten? false, :clean? true&#125; &#123;:rotten? false, :clean? true&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">reduce</span></span> (<span class="name">process-clusters</span> conj) [] grape-clusters)</span><br><span class="line"><span class="comment">;; =&gt; [&#123;:rotten? false, :clean? true&#125; &#123;:rotten? false, :clean? true&#125;]</span></span><br></pre></td></tr></table></figure><p>Since using reduce with the reducing function returned from a transducer is so common, there is a function for reducing with a transformation called transduce. We can now rewrite the previous call to reduce using transduce:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">transduce</span> process-clusters conj [] grape-clusters)</span><br><span class="line"><span class="comment">;; =&gt; [&#123;:rotten? false, :clean? true&#125; &#123;:rotten? false, :clean? true&#125;]</span></span><br></pre></td></tr></table></figure><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>This was just a brief taste of Transducers in Clojure and I hope to create more examples of their use over time.  I dont see Transducers being used too much for my own code initially, but its a useful way to abstract functional composition and make your code more reusable within your project.</p><p>If you need more time for this concept to sink in, its quite alright to stay with threading macros and the partial function, or even just applying map.  I find Clojure more rewarding when you first get more comfortable with the core concepts and build on them when you are ready.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/clojure-logo-thumbnail.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Transducers are built upon the design princlple in Clojure of composing functions together, allowing you to elegantly abstract functional composition and create a workflow that will transform data without being tied to a specific context.  So what does that actually mean and what does the code look like?  Is there a transducer function or is it just extensions to existing functions.  These are the questions we will explore and answer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are in the early stages of learning Clojure, then I suggest getting your head around functions such as map &amp;amp; reduce and composing functions with the threading macros before diving into Transducers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is my interpretation of the really great introduction to Transducers from &lt;a href=&quot;https://funcool.github.io/clojurescript-unraveled/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Clojurescript Unraveled&lt;/a&gt;, expanded with additional code and my own comments.&lt;/p&gt;
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/categories/clojure/"/>
    
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="transducers" scheme="http://jr0cket.co.uk/tags/transducers/"/>
    
      <category term="functional-composition" scheme="http://jr0cket.co.uk/tags/functional-composition/"/>
    
  </entry>
  
  <entry>
    <title>Thinking Functional With Clojure at DevoxxUK 2016</title>
    <link href="http://jr0cket.co.uk/2016/06/thinking-functional-with-clojure-at-devoxxuk-2016.html"/>
    <id>http://jr0cket.co.uk/2016/06/thinking-functional-with-clojure-at-devoxxuk-2016.html</id>
    <published>2016-06-08T22:01:30.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/clojure-logo.png" class="img-thumbnail"><p>Many languages new and old provide a way to write code using functional programming concepts, however learning those concepts can take a little time especially when they are joined with OO concepts in the same language.</p><p>As Clojure has a simple syntax, many find it easier to focus on learning the concepts and design of functional programming.  Then either taking those concepts back to other languages or continuing with Clojure.</p><p>At DevoxxUK 2016 I have the pleasure of running a workshop where I can help developers understand the core functional concepts, using Clojure (and Spacemacs) as simple tools.</p><a id="more"></a><h1 id="Who-is-the-workshop-for"><a href="#Who-is-the-workshop-for" class="headerlink" title="Who is the workshop for?"></a>Who is the workshop for?</h1><img src="https://danielpecos.com/assets/2015/04/02/xkcd-functional-252x300.png" class="img-topic"><p>Any developer starting to learning functional programing or interested to understand the concepts should join in.  No prior experience of Clojure is required, although you should get even more out of the workshop if you have a little experience with the language.</p><p>As its DevoxxUK I’m assuming most people will have a Java background, but this is not a requirement either.</p><h1 id="Workshop-Requirements"><a href="#Workshop-Requirements" class="headerlink" title="Workshop Requirements"></a>Workshop Requirements</h1><p>The requirements for the “Thinking functional” workshop are quite small and setup is relatively simple.  You will need:</p><ul><li><a href="https://www.java.com/en/" target="_blank" rel="noopener">Java Runtime Environment (JRE)</a> or the <a href="https://www.oracle.com/uk/java/" target="_blank" rel="noopener">Java Software Development Kit (JDK)</a> - version 8 is preferable (7 or 6 should still work)</li><li><a href="http://leiningen.org/" target="_blank" rel="noopener">Leiningen.org</a> build automation tool - like Maven but without the XML (project configuration is in Clojure too)</li><li>A Clojure aware editor (not essentai, but recommended)<ul><li><a href="http://lighttable.com/" target="_blank" rel="noopener">LightTable.com</a> is lightweight &amp; simple to use (written in Clojure / Clojurescript)</li><li><a href="http://spacemacs.org/" target="_blank" rel="noopener">Spacemacs</a> / <a href="https://www.gnu.org/software/emacs/" target="_blank" rel="noopener">Emacs</a> - a modern classic all powerful editor come operating system</li><li><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">InteliJ idea</a> &amp; <a href="https://cursive-ide.com/" target="_blank" rel="noopener">Cursive</a> - a Java IDE that fully supports Clojure development</li></ul></li></ul><p>See my simple <a href="https://practicalli.github.io/clojure/development-environments/" target="_blank" rel="noopener">Clojure development environment guide</a> for details on setting up Java 8, Leiningen &amp; LightTable.</p><h1 id="The-workshop-topics"><a href="#The-workshop-topics" class="headerlink" title="The workshop topics"></a>The workshop topics</h1><p><img src="https://d3nulzlctd9uky.cloudfront.net/blog/wp-content/uploads/2012/05/fp1.png" alt="Puur rogramming Functionally by okeef creations"></p><p>With plenty of opportunity to try code out for yourself, this workshop will discuss and provide examples of the following functional programming concepts.</p><ul><li>Pure &amp; impure Functions</li><li>Immutability &amp; persistent data structures </li><li>Higher Order / First Class functions</li><li>Functional composition / chaining functions</li><li>Functors / map / reduce</li><li>Recursion / iteration</li><li>Sequence / List comprehension</li><li>Lazy Evaluation (Ratios)</li><li>Destructuring / pattern matching</li><li>Polymorphism</li><li>Tail recursion</li><li>Managine state change safely</li></ul><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>By the end of <a href="https://practicalli.github.io/clojure/" target="_blank" rel="noopener">this workshop</a> you should know much more about Functional Programming, wether you decide to continue with Clojure or take these concepts to another language.</p><p><em>Update: The workshop is now available online, so please take a look at the <a href="https://practicalli.github.io/clojure/thinking-functionally/" target="_blank" rel="noopener">thinking functionally</a> section</em>.</p><p>There are plenty of follow-on resources for Clojure &amp; functional programming included in the workshop and all code will be available in the <a href="https://github.com/practicalli" target="_blank" rel="noopener">Practicalli Github organization</a>.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/clojure-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Many languages new and old provide a way to write code using functional programming concepts, however learning those concepts can take a little time especially when they are joined with OO concepts in the same language.&lt;/p&gt;
&lt;p&gt;As Clojure has a simple syntax, many find it easier to focus on learning the concepts and design of functional programming.  Then either taking those concepts back to other languages or continuing with Clojure.&lt;/p&gt;
&lt;p&gt;At DevoxxUK 2016 I have the pleasure of running a workshop where I can help developers understand the core functional concepts, using Clojure (and Spacemacs) as simple tools.&lt;/p&gt;
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/categories/clojure/"/>
    
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="events" scheme="http://jr0cket.co.uk/tags/events/"/>
    
  </entry>
  
  <entry>
    <title>Publishing for Developers With Gitbook.io</title>
    <link href="http://jr0cket.co.uk/2016/06/publishing-for-developers-with-Gitbook-io.html"/>
    <id>http://jr0cket.co.uk/2016/06/publishing-for-developers-with-Gitbook-io.html</id>
    <published>2016-06-07T21:29:29.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/gitbook-logo.png" class="img-thumbnail"><p>The tools for writing books and workshops have become so much easier and open.  Even some enlightened publishing companies are moving with the times and not forcing you to write books in seperate word files.  However, having to manage the expectations of a publisher can make book writing very unattractive.</p><p>Self publishing is much more fun and can be done at your own pace, using tools a developer can understand.  Its also much easier to talk to a publisher when the book is mostly done.</p><p>I use <a href="https://github.com/GitbookIO/gitbook" target="_blank" rel="noopener">GithubIO/gitbook</a>, a node.js project to create my books and workshops.  Gitbook generated a responsive design website as well as ebook formats in pdf, epub, etc.</p><p>All the content is written in <a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener">markdown</a> and can be managed with <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>.  There are also a range of <a href="https://plugins.gitbook.io" target="_blank" rel="noopener">Gitbook.io plugins</a> that enhance the readers experience in terms of content style and user interaction.</p><blockquote><p>You can also distribute your books via the self-publishing platform of <a href="https://gitbook.io" target="_blank" rel="noopener">Gitbook.io</a> where you can sell your books on its marketplace.</p></blockquote><h2 id="Advantages-of-Gitbook-io"><a href="#Advantages-of-Gitbook-io" class="headerlink" title="Advantages of Gitbook.io"></a>Advantages of Gitbook.io</h2><ul><li>Simple to use tools, requiring only node.js to be installed</li><li>Writing content in markdown keeps it human readable as you write it</li><li>100+ plugsins help you style the book, applying different styles to the range of formats</li><li>Content can be managed in Git and collaboration can be done in services such as Github or Bitbucket</li><li>Website versions can be published on any webserver, Github Pages works well for these.</li></ul><p>Lets set up Gitbook.io and go through the content workflow.</p><a id="more"></a><h2 id="Setup-Gitbook"><a href="#Setup-Gitbook" class="headerlink" title="Setup Gitbook"></a>Setup Gitbook</h2><p>Gitbook is a node package so <a href="https://nodejs.org/" target="_blank" rel="noopener">install the latest version of node.js</a>, version 4.x and 6.x work with Gitbook.</p><p>install GitBook via the nodejs package manager (npm) using the command line:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install gitbook-cli -g</span><br></pre></td></tr></table></figure><p><code>gitbook-cli</code> is an utility to install and use multiple versions of GitBook on the same system. It will automatically install the required version of GitBook to build a book.</p><blockquote><p>You should use <code>sudo</code> or install gitbook-cli as an administrator, unless you have installed node.js in your personal file space.  The <code>-g</code> option makes the gitbook commands global, so you can use them anywhere on the command line.</p></blockquote><h2 id="Create-a-new-book"><a href="#Create-a-new-book" class="headerlink" title="Create a new book"></a>Create a new book</h2><p>To create a new book, simply create two files:</p><ul><li><code>README.md</code> - introdution page to the book</li><li><code>SUMMARY.md</code> - the structure of the book</li></ul><p>Then run the Gitbook initialisation command in the directory containing these two files</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook init</span><br></pre></td></tr></table></figure><p>If you wish to create the book into a new directory, you can do so by running <code>gitbook init ./directory</code></p><h2 id="The-book-structure"><a href="#The-book-structure" class="headerlink" title="The book structure"></a>The book structure</h2><p>The <code>README.md</code> file should have a description or introduction to the book, written in markdown.  If its a workshop you are writing, its good to state what people will learn and what the prerequisites are.</p><p>The <code>SUMMARY.md</code> file defines the structure of the book, it too is written in markdown.  Here is a sort example of a <code>SUMMARY.md</code> file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Summary</span><br><span class="line"></span><br><span class="line">* [Introduction](README.md)</span><br><span class="line">* [How to use the workshop](using-the-workshop/index.md)</span><br><span class="line">    * [Technical Requirements](using-the-workshop/requirements.md)</span><br><span class="line">    * [Code Examples](using-the-workshop/code-examples.md)</span><br><span class="line">* [Overview of Clojure](overview/index.md)</span><br><span class="line">    * [When to use Clojure](overview/purpose.md)</span><br><span class="line">    * [Who uses Clojure](overview/who-uses-clojure.md)</span><br><span class="line">    * [The syntax](overview/syntax.md)</span><br><span class="line">    * [Design](overview/design.md)</span><br><span class="line">    * [Read, Evaluate, Print Loop (REPL)](overview/repl.md)</span><br></pre></td></tr></table></figure><p>If you add new sections to the <code>SUMMARY.md</code> file, then running <code>gitbook init</code> again will create the relevant directories and create files including the section tiles.</p><blockquote><p>Using Spacemacs / Emacs allows you to easily re-order the sections of the book in the summary.md file by usig the <code>Alt + Up Arrow</code> or <code>Alt + Down Arrow</code></p></blockquote><h1 id="Generating-the-book"><a href="#Generating-the-book" class="headerlink" title="Generating the book"></a>Generating the book</h1><p>You can see what the website version of your book looks like by running the Gitbook server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook serve</span><br></pre></td></tr></table></figure><p>Or build the static website using the Gitbook build command and serve it up from whatever webserver you prefer.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitbook build</span><br></pre></td></tr></table></figure><h1 id="Deploying-your-book-to-Github-Pages"><a href="#Deploying-your-book-to-Github-Pages" class="headerlink" title="Deploying your book to Github Pages"></a>Deploying your book to Github Pages</h1><p>I typically use Github Pages to serve my content.  Its easy for developers to use, supports custom domains and is where I typically version the content I am writing so its convieninet to have it all in one service.  Github also makes use of a content delivery network (CDN) so serving your book website is incredibly fast.</p><p>I havent seen a built-in way or plugin to deploy to Github Pages, so I use a very basic script(this could probably be done better).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line"># Replace the remote Github URL to use this on a different project</span><br><span class="line"></span><br><span class="line"># This should be run from the root of the gitbook project</span><br><span class="line"># Delete the previous book build</span><br><span class="line">rm -rf _book</span><br><span class="line"></span><br><span class="line"># Trigger a clean and new build</span><br><span class="line">gitbook build .</span><br><span class="line"></span><br><span class="line"># Deploy new build</span><br><span class="line">cd _book &amp;&amp; git init &amp;&amp; git add . &amp;&amp; git commit -m &quot;automated commit from gitbook.io&quot; &amp;&amp; git branch -m master gh-pages &amp;&amp; git remote add practicalli git@github.com:practicalli/clojure.git &amp;&amp; git push -f practicalli gh-pages</span><br></pre></td></tr></table></figure><h1 id="Wriing-your-book-Essential-Markdown"><a href="#Wriing-your-book-Essential-Markdown" class="headerlink" title="Wriing your book - Essential Markdown"></a>Wriing your book - Essential Markdown</h1><p>All the content can be written in <a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener">markdown</a>, even the book structure. As its markdown, each section and sub-section of the book is human readable and have really minimal notation for style</p><h2 id="Headings"><a href="#Headings" class="headerlink" title="Headings"></a>Headings</h2><p>To create headings, use the hash, <code>#</code>, character.  A single hash represents the biggest heading, equivalent to a H1 in html.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># This is a main H1 style heading</span><br><span class="line">This is the text that goes underneath the headding</span><br><span class="line"></span><br><span class="line">## This is a sub heading, equivalent to H2</span><br></pre></td></tr></table></figure><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><p>The markdow to create hypertext link, a clickable link to another page in the book or external website.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Clickable Text for link](/path/to/linked-page.html)</span><br><span class="line">[Clickable Text for link](http://linked.com/page.html)</span><br></pre></td></tr></table></figure><h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><p>The markdown to include an image in your content is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![Image description](/path/to/image.png)</span><br><span class="line">![Image description](http://website.com/image.png)</span><br></pre></td></tr></table></figure><p>This markdown will include a centred image in your content.  Positioning of the image is managed by the theme and can also be changed in the <code>styles/website.css</code> for the website or <code>styles/pdf</code> for the pdf version of the book.</p><blockquote><p>Images can be put in the book filespace and saved in Git along with the other content.  If you have very large images or thousands of images, it may be better to use an onlie image service , eg Amazon Web Services Bucket, especially if that service has a content delivery network (CDN) to provide a consistent download speed for images where ever someone is viewing your book website.</p></blockquote><h2 id="Source-code"><a href="#Source-code" class="headerlink" title="Source code"></a>Source code</h2><p>You can highlight short snippet of code inline with the content just by placing a single quote at the start and end of the code.</p><p>Or you can highlight a block of code with three consecutive single quotes at the start and end of the code.</p><h1 id="Gitbook-Plugins"><a href="#Gitbook-Plugins" class="headerlink" title="Gitbook Plugins"></a>Gitbook Plugins</h1><p>There are <a href="https://plugins.gitbook.com/" target="_blank" rel="noopener">over 300 plugins available</a> which help give a better experience in reading the book.</p><ul><li><p><code>toggle-chapters</code> - collapses all the sub-headings of the book in the website, except for the section you are currently viewing.  Really good for books longer than 10 sections.</p></li><li><p><code>disqus</code> - an discussion platform for enabling comments from your audience in your book, in a way thats easy to control.</p></li><li><p><code>ga</code> - a simple way to add Google Analytics to your book website.</p></li></ul><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>The hardest thing about writing a book should be writing something valuable and engaging, that is hard enough already.  Everthing elese should be trivial to do or you will have more reason to become demotivated.</p><p>Using tools like Gitbook.io or <a href="https://readthedocs.org/" target="_blank" rel="noopener">ReadTheDocs</a> can make writing books and technical content much more fun.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/gitbook-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;The tools for writing books and workshops have become so much easier and open.  Even some enlightened publishing companies are moving with the times and not forcing you to write books in seperate word files.  However, having to manage the expectations of a publisher can make book writing very unattractive.&lt;/p&gt;
&lt;p&gt;Self publishing is much more fun and can be done at your own pace, using tools a developer can understand.  Its also much easier to talk to a publisher when the book is mostly done.&lt;/p&gt;
&lt;p&gt;I use &lt;a href=&quot;https://github.com/GitbookIO/gitbook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GithubIO/gitbook&lt;/a&gt;, a node.js project to create my books and workshops.  Gitbook generated a responsive design website as well as ebook formats in pdf, epub, etc.&lt;/p&gt;
&lt;p&gt;All the content is written in &lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;markdown&lt;/a&gt; and can be managed with &lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git&lt;/a&gt;.  There are also a range of &lt;a href=&quot;https://plugins.gitbook.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gitbook.io plugins&lt;/a&gt; that enhance the readers experience in terms of content style and user interaction.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can also distribute your books via the self-publishing platform of &lt;a href=&quot;https://gitbook.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gitbook.io&lt;/a&gt; where you can sell your books on its marketplace.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Advantages-of-Gitbook-io&quot;&gt;&lt;a href=&quot;#Advantages-of-Gitbook-io&quot; class=&quot;headerlink&quot; title=&quot;Advantages of Gitbook.io&quot;&gt;&lt;/a&gt;Advantages of Gitbook.io&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Simple to use tools, requiring only node.js to be installed&lt;/li&gt;
&lt;li&gt;Writing content in markdown keeps it human readable as you write it&lt;/li&gt;
&lt;li&gt;100+ plugsins help you style the book, applying different styles to the range of formats&lt;/li&gt;
&lt;li&gt;Content can be managed in Git and collaboration can be done in services such as Github or Bitbucket&lt;/li&gt;
&lt;li&gt;Website versions can be published on any webserver, Github Pages works well for these.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lets set up Gitbook.io and go through the content workflow.&lt;/p&gt;
    
    </summary>
    
      <category term="gitbook" scheme="http://jr0cket.co.uk/categories/gitbook/"/>
    
    
      <category term="gitbook" scheme="http://jr0cket.co.uk/tags/gitbook/"/>
    
      <category term="github-pages" scheme="http://jr0cket.co.uk/tags/github-pages/"/>
    
  </entry>
  
  <entry>
    <title>Blogging for Developers With Hexo</title>
    <link href="http://jr0cket.co.uk/2016/06/blogging-for-developers-with-hexo.html"/>
    <id>http://jr0cket.co.uk/2016/06/blogging-for-developers-with-hexo.html</id>
    <published>2016-06-04T12:23:08.000Z</published>
    <updated>2022-01-02T20:20:15.290Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p>Using a <strong>Static Site Generators</strong> like <a href="http://hexo.io" target="_blank" rel="noopener">Hexo</a> gives a developer a very fast blogging workflow, using familiar tools and giving the ability to write offline.  Content is written in markdown, keeping it portable between any blog generators and making it easy to version in Git. You can also use Git to deploy your site quickly, even over slow networks.</p><p>Static sites can be hosted anywhere and are fast to serve and easy to cache.  For example, <a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a> offers a very fast way to host your site.</p><p>Lets take a look at Hexo, my favourite static site generator.</p><a id="more"></a><h1 id="Blogging-with-Hexo"><a href="#Blogging-with-Hexo" class="headerlink" title="Blogging with Hexo"></a>Blogging with Hexo</h1><img src="/images/hexo-workflow-commands.png" class="img-topic"><p>Hexo has a very simple workflow.  First you create a blog website: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>This gives you a new Hexo website with a responsive design theme, a working blog and a sample article.</p><p>Then simply create new posts with the command</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;blog post title&quot;</span><br></pre></td></tr></table></figure><p>This creates a new file under <code>sources/_posts/blog-post-title.md</code>.  Edit this file and write your blog in markdown.</p><p>You can view your blog at any time via a local hexo server.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure><p>As you save the blog posts you are writing you can see the changes via this local server, so you know what the site looks like before you deploy your posts.</p><h1 id="Deploying-your-blog-amp-posts"><a href="#Deploying-your-blog-amp-posts" class="headerlink" title="Deploying your blog &amp; posts"></a>Deploying your blog &amp; posts</h1><p>As Hexo creates a set of HTML, JavaScript &amp; CSS files for your blog can deploy it on any web server.</p><p>I use <a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a> to host my blog as its incredibly fast and easy to use.  Using a repository called <code>jr0cket.github.io</code> on my jr0cket account, Github Pages serves up the content at [<a href="http://jr0cket.github.io]" target="_blank" rel="noopener">http://jr0cket.github.io]</a> from the <code>master</code> branch.  Hexo is configured to deploy to this repository.</p><p>Read my <a href="http://jr0cket.co.uk/2014/04/getting-started-with-hexo---a-modern-static-site-generator.html">getting started with Hexo</a> article to create your first Hexo website and start writing blogs</p><h1 id="Customising-your-posts"><a href="#Customising-your-posts" class="headerlink" title="Customising your posts"></a>Customising your posts</h1><p>Each post is created from a template, which you can also customise in <code>scaffolds/post.md</code> or create new templates in <code>scafolds</code>.</p><p>Here is an example template I created when writing blog posts about hexo.  It sets the category and tags as well as the topic image.  I create a new blog post with <code>hexo new hexo &quot;blog post title&quot;</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories: blogging</span><br><span class="line">tags: </span><br><span class="line">- hexo</span><br><span class="line">---</span><br><span class="line">&#123; img img-thumbnail /images/hexo-logo.png &#125;</span><br><span class="line"></span><br><span class="line">Thank you.</span><br><span class="line">[@jr0cket](https://twitter.com/jr0cket)</span><br></pre></td></tr></table></figure><h1 id="Customising-themes"><a href="#Customising-themes" class="headerlink" title="Customising themes"></a>Customising themes</h1><p>Landscape is the default Hexo theme and was created with responsive design principles, so it works well on all devices.  You can also use one of the many <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo themes</a> or create your own theme.</p><p>See <a href="http://jr0cket.co.uk/hexo/">how I created my own version of the Hexo Landscape theme</a>.</p><h1 id="Using-Git-for-content-amp-git-submodules-for-themes"><a href="#Using-Git-for-content-amp-git-submodules-for-themes" class="headerlink" title="Using Git for content &amp; git submodules for themes"></a>Using Git for content &amp; git submodules for themes</h1><img src="/images/hexo-logo.png" class="img-topic"><p>As the markdown you write is text-based then its easy to use Git to manage versions of your content effectively.  Git can also be used to manage any theme you create. </p><p>I created my own theme and rather than keep it in the same repository, I used Git submodules to manage theme and content changes seperately.</p><img src="https://lh3.googleusercontent.com/-VuoPUgPuNV8/U4uIHw5YjoI/AAAAAAAAOTs/7PF8HvWrwIQ/w320-h240-no/git-submodules-concept.png" class="img-code"><p>Read in more detail how I used <a href="/hexo/using-git-submodules-for-custom-hexo-theme.html">Git Submodules for managing content seperately from a custom theme</a>.</p><h1 id="Why-not-just-use-blogging-platforms"><a href="#Why-not-just-use-blogging-platforms" class="headerlink" title="Why not just use blogging platforms"></a>Why not just use blogging platforms</h1><p>There are a large number of blogging platforms (wordpress, blogger, etc) that initially seem quick and simple to use.  However, you soon discover their limitations and how slow they can be.  If you want to customise themes then it becomes challenging or event impossible due to restrictions.</p><p>These services require you to create your content online which depends on you having a fast internet connection as you write.  Most platforms were built several years ago, so are not always the most efficient and as they are typically database driven you end up with lots of round trip requests.  So these platforms are not great if you are traveling into work, on your way to an event or at a conference where the WiFi is not great.</p><p>There are also proprietary plugins with some of these services that tie you into them and it is not always easy to migrate to another service.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Using a &lt;strong&gt;Static Site Generators&lt;/strong&gt; like &lt;a href=&quot;http://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; gives a developer a very fast blogging workflow, using familiar tools and giving the ability to write offline.  Content is written in markdown, keeping it portable between any blog generators and making it easy to version in Git. You can also use Git to deploy your site quickly, even over slow networks.&lt;/p&gt;
&lt;p&gt;Static sites can be hosted anywhere and are fast to serve and easy to cache.  For example, &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Pages&lt;/a&gt; offers a very fast way to host your site.&lt;/p&gt;
&lt;p&gt;Lets take a look at Hexo, my favourite static site generator.&lt;/p&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Ssh or Https - That Is the Github Question</title>
    <link href="http://jr0cket.co.uk/2016/05/ssh-or-https-that-is-the-github-question.html"/>
    <id>http://jr0cket.co.uk/2016/05/ssh-or-https-that-is-the-github-question.html</id>
    <published>2016-05-08T08:58:29.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/github-logo.png" class="img-thumbnail"><p>When you clone, push and pull changes between <a href="https://github.com" target="_blank" rel="noopener">Github</a> repositories and your computer there are two network protocols to choose from, HTTPS &amp; SSH.  But which one should you use and why does it matter?</p><p>Here is a quick guide to both HTTPS &amp; SSH and the reasons why you may want to choose one over the other.</p><a id="more"></a><h1 id="Common-requirements"><a href="#Common-requirements" class="headerlink" title="Common requirements"></a>Common requirements</h1><p>Regardless of which network protocol you use with Github, you need to identify yourself to git first.  You can identify yourself by using the two following git commands:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;YOUR NAME&quot;</span><br><span class="line">git config --global user.email &quot;YOUR EMAIL ADDRESS&quot;</span><br></pre></td></tr></table></figure><p>The email address should be the same used to create your Github account</p><blockquote><p>For more details on this, see the Github help article on <a href="https://help.github.com/articles/set-up-git/" target="_blank" rel="noopener">seting up git</a>.</p></blockquote><h1 id="Github-recommends-HTTPS"><a href="#Github-recommends-HTTPS" class="headerlink" title="Github recommends HTTPS"></a>Github recommends HTTPS</h1><p>HTTPS is recommended by Github because its a port that is open in all network firewalls, therefore Github is universally accessible when using HTTPS.  There is also very little setup involved, so using HTTPS is very easy.  All you need is a Github account and to configure Git with your name and email address (as detailed above in the common requirements section).</p><p>However, each time you <strong>clone</strong>, <strong>fetch</strong>, <strong>pull</strong> or <strong>push</strong> to a remote Github repository using HTTPS you need to supply your GitHub username and password.  This means either typing them on the command line each time or adding them to your favorite Github tool (which hopefully caches them in an encrypted form on the filespace).</p><h2 id="Caching-your-credentials"><a href="#Caching-your-credentials" class="headerlink" title="Caching your credentials"></a>Caching your credentials</h2><p>It is possible to cache your username and password for a period of time, so you only have to enter them once in a while.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Set git to use the credential memory cache</span><br><span class="line">git config --global credential.helper cache</span><br><span class="line"></span><br><span class="line"># Set the cache to timeout after 1 hour (setting is in seconds)</span><br><span class="line">git config --global credential.helper &apos;cache --timeout=3600&apos;</span><br></pre></td></tr></table></figure><p>You can of course use a much higher timeout value if needed.</p><blockquote><p>See the <a href="https://help.github.com/articles/caching-your-github-password-in-git/" target="_blank" rel="noopener">Github help article on caching your Github password in Git</a></p></blockquote><p>It is also possible to permenatly store your credentials on disk using <code>git config credential.helper store</code>, however this is a bad option as it will save your password in plain text so anyone that gets access to your computer account can read it.  If you use <a href="https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/" target="_blank" rel="noopener">2Factor authentication for your Github account</a> (I hope you do) then you will also need to <a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use/" target="_blank" rel="noopener">create a personal access token</a> and use that instead of your password.</p><h2 id="Exposing-your-account"><a href="#Exposing-your-account" class="headerlink" title="Exposing your account"></a>Exposing your account</h2><p>With HTTPS you are using the same username and password for your account, so if those details are seen or copied by someone, then that person has access to your entire account.  They can change your account password and lock you out of not just your repositories but everything you have done on Github.  They can also be malicious and submit pull requests or issues as your identity, tainting your online presence.</p><h1 id="I-recommend-SSH"><a href="#I-recommend-SSH" class="headerlink" title="I recommend SSH"></a>I recommend SSH</h1><img src="/images/github-clone-or-download-ssh.png" class="img-topic"><p>As long as you look after your SSH keys, specifically your private key, then I find SSH more secure and convienient that HTTPS.  Although SSH can be blocked, nearly all of the networks I’ve used in the last 5 years have had the SSH port open.</p><p>With SSH you create a public/private key pair for each computer you are going to use to connect to Github.  You copy the public key to your Github account and when you push a change to github it is signed with your private key so Github knows that its you that is pushing it.  This does add a little setup, but then you never have to provide your username and password when accessing Github repositories.</p><h2 id="Keys-are-more-secure"><a href="#Keys-are-more-secure" class="headerlink" title="Keys are more secure"></a>Keys are more secure</h2><p>SSH Keys are more secure in that they do not provide access to your Github account.  If someone does get hold of your private key (ie. they stole your computer &amp; hacked into your account) then they could so some nasty things to your repositories (eg.  a force push of an empty repository that wipes your change history).</p><p>If your key is stolen you can still access your Github account and update your Github profile to delete any lost or stolen keys.</p><h2 id="Generating-keys"><a href="#Generating-keys" class="headerlink" title="Generating keys"></a>Generating keys</h2><img src="/images/public-private-keys.jpg" class="img-topic"><p>Its easy to generate a new public/private key pair for SSH using the command <code>ssh-keygen</code> that is available on all good operating systems.  When creating a key pair for SSH I recommend adding a comment that is the email address from your Github account</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C my-github@email.com</span><br></pre></td></tr></table></figure><blockquote><p>See my article on <a href="http://jr0cket.co.uk/2012/12/password-protected-ssh-key-for-github.html.html">creating password protected SHH keys</a> for more details</p></blockquote><h2 id="Using-SSH-when-its-blocked-by-the-network"><a href="#Using-SSH-when-its-blocked-by-the-network" class="headerlink" title="Using SSH when its blocked by the network"></a>Using SSH when its blocked by the network</h2><p>SSH can be tunneled over HTTPS if the network you are on blocks the SSH port.  Simply edit your <code>~/.ssh/config</code> file and add this section:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure><p>Now every time you use SSH to connect to Github it will use the HTTPS port (443).</p><blockquote><p>For more details, se the Github help arcticle on <a href="https://help.github.com/articles/using-ssh-over-the-https-port/" target="_blank" rel="noopener">using SSH over HTTP</a></p></blockquote><h1 id="In-summary"><a href="#In-summary" class="headerlink" title="In summary"></a>In summary</h1><p>My preference is to use SSH with a passphrase protected key.  It only takes a couple of minutes to set up and you have a secure way to use Github that does not expose your account credentials.  Adding 2Factor authentication is simpler with SSH too.  Even if SSH is blocked on your network its easy to configure SSH to work over HTTPS, giving you the best of both types of connections.</p><p>If you use HTTPS its essential to use <a href="https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/" target="_blank" rel="noopener">2Factor authentication</a> to protect your Github account.  If you want to store your credentials for HTTPS permenatly, ensure your password is stored in an encrypted form. </p><blockquote><p>You should use <a href="https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/" target="_blank" rel="noopener">2Factor authentication</a> for your Github account to give an added layer of protection regardless of if you use SSH or HTTPS</p></blockquote><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/github-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;When you clone, push and pull changes between &lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github&lt;/a&gt; repositories and your computer there are two network protocols to choose from, HTTPS &amp;amp; SSH.  But which one should you use and why does it matter?&lt;/p&gt;
&lt;p&gt;Here is a quick guide to both HTTPS &amp;amp; SSH and the reasons why you may want to choose one over the other.&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/categories/git/"/>
    
    
      <category term="github" scheme="http://jr0cket.co.uk/tags/github/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Using Github Gists From Spacemacs</title>
    <link href="http://jr0cket.co.uk/2016/03/Using-Github-Gists-from-Spacemacs.html"/>
    <id>http://jr0cket.co.uk/2016/03/Using-Github-Gists-from-Spacemacs.html</id>
    <published>2016-03-13T17:48:59.000Z</published>
    <updated>2022-01-02T20:20:15.290Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/spacemacs-logo.png" class="img-thumbnail"><p><a href="https://gist.github.com/" target="_blank" rel="noopener">Github Gists</a> are really useful when you want to share a piece of code or configuration without setting up a version control project.  Rather than copy &amp; paste into a <a href="https://gist.github.com/" target="_blank" rel="noopener">Github Gists</a> website, you can create a Gist from any <a href="https://github.com/syl20bnr/spacemacs" target="_blank" rel="noopener">Spacemacs</a> buffer with a single command.</p><p>All you need is to add the <code>github</code> layer to your <code>~/.spacemacs</code> configuration file and reload your configuration <code>M-m f e R</code> or restart Spacemacs.  Lets see just how easy it is to use Gists with Spacemacs. </p><blockquote><p>You can also use <a href="https://github.com/defunkt/gist.el" target="_blank" rel="noopener">gist.el</a> with your own Emacs configuration</p></blockquote><a id="more"></a><h1 id="Connecting-to-your-Github-account"><a href="#Connecting-to-your-Github-account" class="headerlink" title="Connecting to your Github account"></a>Connecting to your Github account</h1><p>When you first run any of the Gist or Github commands you will be prompted for your username, password and 2Factor code.  The Gist.el code will <a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use/" target="_blank" rel="noopener">create a personal access token</a> on your Github account, avoiding the need to prompt for your Github login details each time.</p><p>If you are prompted to enter your personal access token in Emacs, then visit your Github profile page and view the <strong>personal acccess tokens</strong> section.  Edit the token named <code>git.el</code> and regenerated the token.  This will take you back to the personal access tokens page and display the new token for git.el.  Copy this token into the <code>[github]</code> section of your <code>~/.gitconfig</code> as follows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[github]</span><br><span class="line">user = jr0cket</span><br><span class="line">oauth-token = thisishweretherealtokenshouldbepasted</span><br></pre></td></tr></table></figure><blockquote><p>If <code>git.el</code> adds a password line to the <code>[github]</code> section of your <code>~/.gitconfig</code> you should remove that password line.  These Github actions only require your username and token.</p></blockquote><h1 id="Creating-a-Gist-from-Spacemacs"><a href="#Creating-a-Gist-from-Spacemacs" class="headerlink" title="Creating a Gist from Spacemacs"></a>Creating a Gist from Spacemacs</h1><p>The current buffer can be copied into a Github Gist using the command <code>M-x gist-buffer</code>.</p><p><img src="/images/spacemacs-gist-create-from-buffer.png" alt="Gist - create a Gist from the current buffer"></p><p>You can also create a gist just from a selected region of the buffer.  First select the region using <code>C-SPC</code> and run the command <code>M-x gist-region</code>.</p><blockquote><p>If this is the first time using Github from Spacemacs, you will be prompted for your Github username &amp; password.  If you have already used Github from Spacemacs, then your account details will have been saved so you do not need to enter them each time.</p></blockquote><p><strong>Keyboard shortcuts</strong></p><ul><li><code>M-m g g b</code> : create a public gist from the current Spacemacs buffer</li><li><code>M-m g g B</code> : create a private gist from the current Spacemacs buffer</li><li><code>M-m g g r</code> : create a public gist from the highlighted region</li><li><code>M-m g g R</code> : create a private gist from the highlighted region</li><li><code>M-m g g l</code> : list all gists on your github account</li></ul><blockquote><p>Replace <code>M-m</code> with <code>SPC</code> if you are using Spacemacs evil mode </p></blockquote><h1 id="Updating-a-Gist"><a href="#Updating-a-Gist" class="headerlink" title="Updating a Gist"></a>Updating a Gist</h1><p>When you create a Gist from a buffer there is no direct link between your buffer and the Gist.  So if you make changes to your buffer you want to share, you can generate a new gist using <code>M-x gist-buffer</code> &amp; delete the original one (see listing &amp; managing gists below).</p><p>Alternatively, once you have created a Gist, you can open that Gist in a buffer and make changes.  When you save your changes in the Gist buffer, <code>C-x C-s</code>, the gist on gist.github.com is updated.</p><h1 id="Listing-amp-managing-Gists"><a href="#Listing-amp-managing-Gists" class="headerlink" title="Listing &amp; managing Gists"></a>Listing &amp; managing Gists</h1><p>Use the command <code>M-x gist-list</code> or keybinding <code>M-m g g l</code> to show a list of your current Gists.</p><p><img src="/images/spacemacs-gist-list.png" alt="Spacemacs - Gist list"></p><p>In the buffer containing the list of your gists, you can use the following commands</p><ul><li><code>RETURN</code> : opens the gist in a new buffer</li><li><code>g</code> : reload the gist list from server</li><li><code>e</code> : edit the gist description, so you know what this gist is about</li><li><code>k</code> : delete current gist</li><li><code>b</code> : opens the gist in the current web browser </li><li><code>y</code> : show current gist url &amp; copies it into the clipboard</li><li><code>*</code> : star gist (stars do not show in gist list, only when browsing them on github)</li><li><code>^</code> : unstar gist</li><li><code>f</code> : fork gist - create a copy of your gist on gist.github.com</li><li><code>+</code> : add a file to the current gist, creating an additional snippet on the gist</li><li><code>-</code> : remove a file from the current gist </li></ul><h1 id="Creating-Gists-from-files"><a href="#Creating-Gists-from-files" class="headerlink" title="Creating Gists from files"></a>Creating Gists from files</h1><p>If you open a dired buffer you can make gists from marked files, <code>m</code>, by pressing <code>@</code>.  This will make a public gist out of marked files (or if you use with a prefix, it will make private gists)</p><p><img src="/images/spacemacs-gist-dired-gist-from-file.png" alt="Gist - create a gist from the marked files in dired"></p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Its really easy to share code and configuration with <a href="https://gist.github.com/" target="_blank" rel="noopener">Github Gists</a>.  Its even easier when you use <a href="[Spacemacs](https://github.com/syl20bnr/spacemacs">Spacemacs</a>) to create and manages gists for you.  Have fun sharing your code &amp; configurations with others via gists.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/spacemacs-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Gists&lt;/a&gt; are really useful when you want to share a piece of code or configuration without setting up a version control project.  Rather than copy &amp;amp; paste into a &lt;a href=&quot;https://gist.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Gists&lt;/a&gt; website, you can create a Gist from any &lt;a href=&quot;https://github.com/syl20bnr/spacemacs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spacemacs&lt;/a&gt; buffer with a single command.&lt;/p&gt;
&lt;p&gt;All you need is to add the &lt;code&gt;github&lt;/code&gt; layer to your &lt;code&gt;~/.spacemacs&lt;/code&gt; configuration file and reload your configuration &lt;code&gt;M-m f e R&lt;/code&gt; or restart Spacemacs.  Lets see just how easy it is to use Gists with Spacemacs. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can also use &lt;a href=&quot;https://github.com/defunkt/gist.el&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gist.el&lt;/a&gt; with your own Emacs configuration&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="spacemacs" scheme="http://jr0cket.co.uk/tags/spacemacs/"/>
    
      <category term="gits" scheme="http://jr0cket.co.uk/tags/gits/"/>
    
      <category term="github" scheme="http://jr0cket.co.uk/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Clacks Interpreter - Going Postal at London Clojure Dojo</title>
    <link href="http://jr0cket.co.uk/2016/03/clacks-interpreter-going-postal-at-london-clojure-dojo.html"/>
    <id>http://jr0cket.co.uk/2016/03/clacks-interpreter-going-postal-at-london-clojure-dojo.html</id>
    <published>2016-03-08T23:06:50.000Z</published>
    <updated>2022-01-02T20:20:15.290Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/clojure-logo.png" class="img-thumbnail"><p>At the March 2016 London Clojurians code dojo at uSwitch our group created a Clacks Interpreter in honor of <a href="https://en.wikipedia.org/wiki/Terry_Pratchett" target="_blank" rel="noopener">Terry Pratchett</a>, the author of the amazing <a href="https://en.wikipedia.org/wiki/Discworld" target="_blank" rel="noopener">Discworld</a> series of books (and a few TV shows of those books too).</p><p>In the 33rd Discworld novel called <a href="https://en.wikipedia.org/wiki/Going_Postal" target="_blank" rel="noopener">Going Postal</a>, messages are sent faster than a speeding horse via the <a href="https://en.wikipedia.org/wiki/Technology_of_the_Discworld#The_clacks" target="_blank" rel="noopener">Clacks</a> system.  This composes of a series of towers that cross a continent and pass messages on via combinations of lights.  Each tower sees a grid of lights from a distant tower and sends the message on to the next tower.</p><blockquote><p>The Clacks system was actually introduced in the 24th Discworld novel called “The Fith Elephant”, however its the “Going Postal” book where we learn the full history of the Clacks system.</p></blockquote><p>We created a Clacks Interpreter that converts any English message into its corresponding clacks signal, based on the <a href="https://boardgamegeek.com/image/1670734/clacks-discworld-board-game" target="_blank" rel="noopener">Clacks alphabet</a> as defined by the board game of the same name.  The board game defines the alphabet as a 2 by 3 grid (although in the Discworld its actually 8 large squares).  Naturally, the interpreter also converts the Clacks signal back into an English message too.</p><p><img src="/images/discworld-clacks-alphabet.jpg" alt="Clacks: The board game - Clacks Alphabet"></p><p>The code is available on Github at: <a href="https://github.com/liamjtaylor/clacks-messenger" target="_blank" rel="noopener">https://github.com/liamjtaylor/clacks-messenger</a> and read on for a walk through of how we came up with the solution.</p><a id="more"></a><h1 id="The-Challenge"><a href="#The-Challenge" class="headerlink" title="The Challenge"></a>The Challenge</h1><p>We wanted to be able to take any English language messages and transmit it across the clacks network, then </p><h1 id="Representing-a-Clack"><a href="#Representing-a-Clack" class="headerlink" title="Representing a Clack"></a>Representing a Clack</h1><p>For each clack, we read the pattern from the top of the first column to the botton, then from the top of the second column to the bottom.  A light in a position represents a 1 value and no light represents a 0 value.  This gives us our 6 number pattern for each clack in the alphabet.</p><h2 id="Deciding-the-data-structure"><a href="#Deciding-the-data-structure" class="headerlink" title="Deciding the data structure"></a>Deciding the data structure</h2><p>The initial data structure chosen was essentially just modelling each individual clack.  Since a clack is a 2x3 structure, the simplest way to represent a clacks is to have a vector that contains 2 vectors, each with three elements.</p><p>So a simple expression of the letter a in the clacks alphabet would be:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">0</span>][<span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]]</span><br></pre></td></tr></table></figure><p>Therefore we could define a single letter of our alphabet as follows: </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> a [[<span class="number">0</span> <span class="number">1</span> <span class="number">0</span>][<span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><p>Before we define the complete alphabet using this data structure, lets test if we have the right data structure for our conversion process.</p><h2 id="Testing-a-simple-conversion-with-our-data-structure"><a href="#Testing-a-simple-conversion-with-our-data-structure" class="headerlink" title="Testing a simple conversion with our data structure"></a>Testing a simple conversion with our data structure</h2><p>Lets try the simplest way to convert a character into a clack:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> character-&gt;clack [character]</span><br><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">=</span></span> character <span class="string">"a"</span>)</span><br><span class="line">    a</span><br><span class="line">    (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"Sorry, character is not yet in the alphabet, please create a pull request"</span>)))</span><br></pre></td></tr></table></figure><p>Calling the function converts a string into the corresponding clack</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">character-&gt;clack</span> <span class="string">"a"</span>)</span><br></pre></td></tr></table></figure><p>Although the code is simple for 1 character, it does hightlight the problem of converting the whole alphabet.  We would need either a deeply nested set of if statements or a very long case statement, neither of which seems to be a particularly functional approach or idiomatic Clojure.</p><p>Even if we did use a case statement, how would we convert a clack back into a character?</p><p>So perhaps we need to change the data structure, one that provides an easy way to map to values together.</p><p>Also, there seems no value in mapping values to a 2x3 grid as long as we consistently express a clack.</p><h2 id="Defining-the-alphabet-with-a-map"><a href="#Defining-the-alphabet-with-a-map" class="headerlink" title="Defining the alphabet with a map"></a>Defining the alphabet with a map</h2><p>A map data structure in Clojure is a hash map (a key &amp; value paring) for example I could define myself as a map </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="symbol">:name</span> <span class="string">"john"</span> <span class="symbol">:age</span> <span class="string">"21"</span> <span class="symbol">:twitter</span> <span class="string">"jr0cket"</span>&#125;</span><br></pre></td></tr></table></figure><p>Its very common to use Clojure keywords for the keys, to make it easy to look up a particular value by refering to the keyword.</p><p>So the new design for our clacks data structure is as follows </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="symbol">:a</span> [<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]&#125;</span><br></pre></td></tr></table></figure><p>To help with testing this new data structure desing, we crated enough letters of the clacks alphabet to make some simple words, i.e bat</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> alphabet &#123;<span class="symbol">:a</span> [<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]</span><br><span class="line">               <span class="symbol">:b</span> [<span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line">               <span class="symbol">:t</span> [<span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]&#125;)</span><br></pre></td></tr></table></figure><h2 id="Testing-the-map-design"><a href="#Testing-the-map-design" class="headerlink" title="Testing the map design"></a>Testing the map design</h2><p>We can use the keyword to lookup the value of its clack code</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">alphabet</span> <span class="symbol">:a</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; =&gt; [0 1 0 0 0 1]</span></span><br></pre></td></tr></table></figure><p>Then we created a simple function to convert a string to a sequence of clacks</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> character-&gt;clack [letter]</span><br><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">=</span></span> letter <span class="string">"a"</span>)</span><br><span class="line">    (<span class="name">alphabet</span> <span class="symbol">:a</span>)</span><br><span class="line">    (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"Sorry, character is not yet in the alphabet, please create a pull request"</span>)))</span><br></pre></td></tr></table></figure><blockquote><p>The <code>-&gt;</code> character is part of the function name.  This is a Clojure naming convention used when the function you are defining converts from one type to another.</p></blockquote><p>And call the function as follows</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">character-&gt;clack</span> <span class="string">"a"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">;; =&gt; [0 1 0 0 0 1]</span></span><br></pre></td></tr></table></figure><h1 id="Converting-a-word"><a href="#Converting-a-word" class="headerlink" title="Converting a word"></a>Converting a word</h1><p>Now we want to convert a whole word to a clacks sequence.  It seemed the easiest way to convert a whole word was to convert each letter at a time using the map to look up each clack code, returning all the clacks codes in a sequence.</p><p>So we redefined the <code>string-&gt;clacks</code> function to take in a whole word.  </p><p>We used the <code>map</code> function to apply a conversion function over each element in the word (each element of the string).  This conversion function called <code>clacksify</code>.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> clacksify [letter]</span><br><span class="line">  (<span class="name"><span class="builtin-name">let</span></span> [character (<span class="name"><span class="builtin-name">str</span></span> letter)]</span><br><span class="line">  (<span class="name">alphabet</span> (<span class="name"><span class="builtin-name">keyword</span></span> character))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> string-&gt;clacks [word]</span><br><span class="line">  (<span class="name"><span class="builtin-name">map</span></span> clacksify word))</span><br></pre></td></tr></table></figure><p>Now we could convert any workd that used the letters of our limted alphabet.  We chose bat as a simple word.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">string-&gt;clacks</span> <span class="string">"bat"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>As we are passing a string and not a keyword to the <code>clacksify</code> function, then we first convert the string to a keyword using the <code>keyword</code> function.</p></blockquote><h1 id="Converting-the-clack-to-a-string"><a href="#Converting-the-clack-to-a-string" class="headerlink" title="Converting the clack to a string"></a>Converting the clack to a string</h1><p>Is there a simple way to look up a key given a value that is unique in the map?  </p><p>All Clack codes are unique in the map, but there did not seem to be a simple expression to find the key when given a value.</p><p>We could have created a second mapping, however having two maps seemed redundant and a potential cause for silly bugs.</p><p>The answer was simple once we found it.  As the clack codes are unique, they could be used as keys for the letter values, we just needed to swap the map around.  Swapping a map’s keys and values was done by writing a <code>reverse-map</code> function.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> reverse-map</span><br><span class="line">  <span class="string">"Reverse the keys and value pairs in a map.</span></span><br><span class="line"><span class="string">  Allows the map to be used to convert from a clack to a letter without defining a second map"</span></span><br><span class="line">  [m]</span><br><span class="line">  (<span class="name"><span class="builtin-name">into</span></span> &#123;&#125; (<span class="name"><span class="builtin-name">map</span></span> (<span class="name"><span class="builtin-name">fn</span></span> [[a b]] [b a]) m)))</span><br></pre></td></tr></table></figure><p>So we defined the function <code>declacksify</code> which takes a clack code and returns its corresponding character.  The clack code returns the corresponding keyword rather than a character, so we use the <code>name</code> function to convert the keyword into a character name.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> declacksify [clack]</span><br><span class="line">  (<span class="name"><span class="builtin-name">name</span></span> ((<span class="name">reverse-map</span> alphabet) clack)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> clacks-&gt;string [clacks]</span><br><span class="line">  (<span class="name"><span class="builtin-name">map</span></span> declacksify clacks))</span><br></pre></td></tr></table></figure><p>So calling these functions with a clacks </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">declacksify</span>  [<span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>])</span><br><span class="line"><span class="comment">;; =&gt; "t"</span></span><br><span class="line"></span><br><span class="line">(<span class="name">clacks-&gt;string</span> [[<span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span>] [<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>] [<span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]])</span><br><span class="line"><span class="comment">;; =&gt; ("b" "a" "t")</span></span><br></pre></td></tr></table></figure><blockquote><p>Its probably at this point we should have realised that we didnt need to use keywords to represent the characters of the alphabet.  In fact, using keywords made a little more work for us.</p></blockquote><h1 id="Tyding-up-the-output"><a href="#Tyding-up-the-output" class="headerlink" title="Tyding up the output"></a>Tyding up the output</h1><p>Our <code>clacks-&gt;string</code> function returns the right result, but not quite in the format we want.  Rather than a single string, we get the individual characters.</p><p>Using the <code>reduce</code> function we can apply the <code>str</code> function over the resulting characters to give a single string.  So our function becomes</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> clacks-&gt;string [clacks]</span><br><span class="line">(<span class="name"><span class="builtin-name">map</span></span> str (<span class="name"><span class="builtin-name">map</span></span> declacksify clacks)))</span><br></pre></td></tr></table></figure><h1 id="Working-with-another-language"><a href="#Working-with-another-language" class="headerlink" title="Working with another language"></a>Working with another language</h1><p>Thanks to a flexible design with no side effects or side causes then its really easy to replace the English language alphabet with another language that can be encoded into Clack codes.  So languages based on the greek, latin or cyrilic alphabet could be send if a suitable alphabet with clack codes is supplied.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>We were quite happy with the code produced in this dojo.  The code is pretty readable we believe and we have taken a fairly simple approach to the design.  In hindsight we could have made the code even easier if we had tested out the map data structure a little more and used a string character for each letter in the alphabet.</p><p>Working in an editor attached to a REPL worke well (Vim in this case, but not relevant to the development of the code).  The behaviour of the code was tested with almost every expression, so we gained a good understanding of each line of code.</p><p>There are ideas to take this further and show a visual representation of a message passing through a chain of clack tower, showing how the message would pass through the system at a human speed.  This woud assume a fixed time to show a clacks between each clack tower and a minimum level of speed by the human part of the clacks tower.</p><p>No REPL’s were harmed in the making of this code, although one REPL was heavily used.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/clojure-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;At the March 2016 London Clojurians code dojo at uSwitch our group created a Clacks Interpreter in honor of &lt;a href=&quot;https://en.wikipedia.org/wiki/Terry_Pratchett&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Terry Pratchett&lt;/a&gt;, the author of the amazing &lt;a href=&quot;https://en.wikipedia.org/wiki/Discworld&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Discworld&lt;/a&gt; series of books (and a few TV shows of those books too).&lt;/p&gt;
&lt;p&gt;In the 33rd Discworld novel called &lt;a href=&quot;https://en.wikipedia.org/wiki/Going_Postal&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Going Postal&lt;/a&gt;, messages are sent faster than a speeding horse via the &lt;a href=&quot;https://en.wikipedia.org/wiki/Technology_of_the_Discworld#The_clacks&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Clacks&lt;/a&gt; system.  This composes of a series of towers that cross a continent and pass messages on via combinations of lights.  Each tower sees a grid of lights from a distant tower and sends the message on to the next tower.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Clacks system was actually introduced in the 24th Discworld novel called “The Fith Elephant”, however its the “Going Postal” book where we learn the full history of the Clacks system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We created a Clacks Interpreter that converts any English message into its corresponding clacks signal, based on the &lt;a href=&quot;https://boardgamegeek.com/image/1670734/clacks-discworld-board-game&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Clacks alphabet&lt;/a&gt; as defined by the board game of the same name.  The board game defines the alphabet as a 2 by 3 grid (although in the Discworld its actually 8 large squares).  Naturally, the interpreter also converts the Clacks signal back into an English message too.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/discworld-clacks-alphabet.jpg&quot; alt=&quot;Clacks: The board game - Clacks Alphabet&quot;&gt;&lt;/p&gt;
&lt;p&gt;The code is available on Github at: &lt;a href=&quot;https://github.com/liamjtaylor/clacks-messenger&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/liamjtaylor/clacks-messenger&lt;/a&gt; and read on for a walk through of how we came up with the solution.&lt;/p&gt;
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/categories/clojure/"/>
    
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="terry-pratchett" scheme="http://jr0cket.co.uk/tags/terry-pratchett/"/>
    
  </entry>
  
  <entry>
    <title>Growing Your Developer Career</title>
    <link href="http://jr0cket.co.uk/2016/01/growing-your-developer-career.html"/>
    <id>http://jr0cket.co.uk/2016/01/growing-your-developer-career.html</id>
    <published>2016-01-21T12:14:24.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<p>Just being a great developer or even a good one is not enough to create a great career.  How effective you are at communicating your skills, experience and the value you can bring to others really drives the quality of your career.  Luckily there are many ways to show off your skills, including those soft skills that are harder to quantify. </p><p>It is not just recruiters &amp; human resources departments that can get you a job, but more and more it is other developers that bring you in to their teams.  The more developers who know who you are, the more opportunities will be presented to you.</p><p>Activities you can do to boost your career include:</p><ul><li>Blogging &amp; technical content</li><li>Social media for research and communication</li><li>digital presence</li><li>Meetups, Conferences and public speaking</li><li>Understanding the modern recruitment process</li></ul><p>I will walk through this aspects to help you understand them in more detail and describe my experiences and any tips I have to share</p><blockquote><p>Previously I covered aspects of <a href="http://jr0cket.co.uk/2015/09/creating-a-digital-presence.html">creating your digital self</a> previously, covering a range of social media and developer community websites.</p></blockquote><a id="more"></a><h1 id="Classic-recruitment"><a href="#Classic-recruitment" class="headerlink" title="Classic recruitment"></a>Classic recruitment</h1><p>Most of the recruitment companies out there are not particularly progressive, essentially providing little more than collecting and shuffling CV’s.  These types of recruiters are solely focused on their own goals and you are just a name in their database.</p><p>We will look at why these recruiters are considered evil and why community engaged recruiters are often a much better service.</p><h2 id="Evil-recruiters"><a href="#Evil-recruiters" class="headerlink" title="Evil recruiters"></a>Evil recruiters</h2><p>While recruiters themselves are typically not evil, the system that they work within makes them seem so.  Most recruitement consultancies are all about the numbers, usually leaving a bad experience for all involved.</p><p>Typically these recruitement companies engage with their clients (employers) to deliver results based on numbers (eg. 20 CV’s within 5 working days).  This leads to brute-force searches of all the CV’s they have collected for any relevant keywords for a particular job specification.</p><p>If not enough results are found, then recruitment consultants will carry out similar brute-force searches on LinkedIn and Github to try and find possible candidates.  These searches are sometimes also used to find people who do not have a CV on file with the company.</p><h3 id="Deailing-with-Evil-recruiters"><a href="#Deailing-with-Evil-recruiters" class="headerlink" title="Deailing with Evil recruiters"></a>Deailing with Evil recruiters</h3><p>It may still be worth dealing with a specific recruitment consultancy if they have the sole contract for a particular company you are interested in working with.</p><p>I suggest that you send your CV as a pdf document to ensure that recruitement consultancy does not edit the document.  If they insist on a word document, include a reference to an online version and place it in a prominent place on your website (should the employer Google who you are).</p><h2 id="Community-engaged-recruiters"><a href="#Community-engaged-recruiters" class="headerlink" title="Community engaged recruiters"></a>Community engaged recruiters</h2><p>Companies such as RecWorks &amp; eSynergy Solutions actively engage with technical communities in order to understand more effectively how the developer role continues to evolve.  Typically these companies deal with more forward thinking companies that have more progressive roles.</p><p>They will probably not cover as wide a scope as evil recruiters, however it is usually a case of quality over quantity.</p><p>These community engaged recruiters usually have a better relationship with you and are more open with their processes.  They also give back to the community and are in a better position to understand the trends in our industry.</p><hr><h1 id="The-modern-recruitment-process"><a href="#The-modern-recruitment-process" class="headerlink" title="The modern recruitment process"></a>The modern recruitment process</h1><h2 id="Developers-recruit-developers"><a href="#Developers-recruit-developers" class="headerlink" title="Developers recruit developers"></a>Developers recruit developers</h2><p>The more enlightened companies realise that developers are much more effective at finding good developers than the classic recruitment process.  In fact, many IT organisations and development teams are frustrated by the speed and quality of their own HR process and it can be seen as a blocker.</p><blockquote><p>I have join several companies via initial contact from the development team.  Often this is from meeting them at developer events either as an attendee or a speaker.  I also get recognition from blog posts.</p></blockquote><h3 id="Developer-team-recruitment-practices"><a href="#Developer-team-recruitment-practices" class="headerlink" title="Developer team recruitment practices"></a>Developer team recruitment practices</h3><h4 id="Pairing"><a href="#Pairing" class="headerlink" title="Pairing"></a>Pairing</h4><p>By spending a day with the company is a very effective way for them to understand what it will be like working with you.  It also gives you a great experience of what it would be like working with their developers.</p><p>You may pair with one person all day, however its preferably to pair with different people during the day.</p><p>My first experience with this was at a company that built online games.  They effectively hired me for 2 days as the recruitment process.  On paper it looked a great match and the first couple of hours were all positive.  However, as we got into the detail of what they were doing I grew concerned about their approach and didnt feel like I would be a good cultural fit.  In the end we parted after the first day as both sided realised it was not a great match.  I gained many interesting insights into how I think that day, which made it easier for me to assess any other potential roles.</p><h4 id="Tests-Challenges"><a href="#Tests-Challenges" class="headerlink" title="Tests / Challenges"></a>Tests / Challenges</h4><p>I am weary of tests that do not let you access the Internet for answers.  Shutting you away from the tools you use regularly only testing your memory and not your ability to apply what you can learn.  Everyone writes code with the help of Google, Stack Exchange, etc and there is just too much to remember and from my point of view its more important to see how we can learn something new and apply it.</p><p>Instead, setting a challenge and building it with a candidate is much more effective.  Having an exercise or challenge that you have recently done at work it a very valuable approach at it also lets the candidate understand the team they will be working with a little more.  There are also many kata-style challenges on the Internet to choose from if you cant come up with your own exercises.</p><p>Some companies will even publish how to approach them via Github, eg <a href="https://vzaar.com/" target="_blank" rel="noopener">Vzaar</a>, a video hosting company publishes <a href="https://github.com/vzaar/note-to-recruiters/blob/master/ntr.md" target="_blank" rel="noopener">a note to recruiters</a></p><h3 id="Preparing-for-tests"><a href="#Preparing-for-tests" class="headerlink" title="Preparing for tests"></a>Preparing for tests</h3><p>Its very common for you to be sent a coding challenge, so one way to improve your chances it to practice similar kinds of challenges.  Most sane challenges will probably be similar to one of the many <a href="https://en.wikipedia.org/wiki/Kata_%28programming%29" target="_blank" rel="noopener">coding kata</a> challenges.  Many of these are published on the Internet and if you get really stuck you may be able to find some suggested solutions (but its more effective to do as much as you can first).</p><p>Another excellent way is to attend a code dojo, usually a couple of hours on an evening where you get into small groups and code up a challenge.  At the end you demonstrate what you have done, covering any challenges and lessons learned.  Code dojos are always welcoming to new starters and its a very collaborative event, all you need is a willingness to try.</p><p>Examples of code dojo events include</p><ul><li><a href="http://www.meetup.com/London-Code-Dojo/" target="_blank" rel="noopener">London Code Dojo meetup</a> - dojo’s run most months</li><li><a href="http://www.londonclojurians.org/" target="_blank" rel="noopener">London Clojurians Dojos</a> - up to 4 dojo’s per month</li><li><a href="http://www.meetup.com/london-scala/" target="_blank" rel="noopener">London Scala Dojo</a> - monthly dojo, started by Andy Hicks &amp; myself in 2010</li><li><a href="http://www.meetup.com/The-London-Python-Group-TLPG/" target="_blank" rel="noopener">London Python Dojo</a> - runs most months</li></ul><p>If you want to start you own Code Dojo, take a look at “<a href="http://ntoll.org/article/how-to-run-an-awesome-code-dojo" target="_blank" rel="noopener">How to run an awesome code dojo</a>“ by <a href="https://twitter.com/ntoll" target="_blank" rel="noopener">Nicholas Tollervey</a>.</p><h1 id="Showing-your-development-skills"><a href="#Showing-your-development-skills" class="headerlink" title="Showing your development skills"></a>Showing your development skills</h1><p>By making the applications you build available via the Internet, with services like [Heroku], enables anyone to see what you can do and a chance to experience your work.  Think of this like an artist or model creating a portfolio of work.</p><p>Actually having people use your work is a very powerful way to get attention.  If the developers you meet have used your apps then they will give you a lot of trust and have plenty of questions to ask you about, on a subject that you should be fairly comfortable with.</p><p>If user experience (UX) is not your strongest area (and you dont want to create just another Twitter bootstrap site), then you can create a [webservice] or [API]. or that is either very useful or very funny (but be careful to not offend here).</p><p>Examples of an API….</p><ul><li>Google Map API</li><li>KeanIO Analysis in 60 seconds (check mobile browser tab)</li><li>Twilio - set up your own service to respond to phone calls &amp; texts</li><li>Braintree - add a payments system to your app</li><li>Pusher - add websockets service to your app</li></ul><p>There are hundreds more you can find on Google or go to any hackathon event and the sponsors usually have API’s you can try out.</p><h1 id="Hackathons"><a href="#Hackathons" class="headerlink" title="Hackathons"></a>Hackathons</h1><p>Another way to create something different is to take part in a Hackathon.  This is typically a weekend event where you have 24-36 hours to create something, usually as a small group (eg. 2-6 people).  Each group builds a web app, a mobile app or even something physical connected to a software service or app.  At the end of the hack each team usually has a few minutes to show off what they have built.</p><p>Many hackathons have prizes for the teams they judge the best.  Event sponsors have their own prizes that they give out prizes for the team they like the most.  Prizes can range from cool gadgets &amp; toys to large cash prizes.  Because of prizes, there is more of a competition aspect to some hackathons, however, most remain collaborative regardless of the prizes on offer.</p><p>Visit the meetup.com group called <a href="http://www.meetup.com/UK-Hackathons-and-Jams/" target="_blank" rel="noopener">Hackathons &amp; Jams</a> that lists many of the events happening in the United Kingdom.</p><h1 id="Showing-your-code"><a href="#Showing-your-code" class="headerlink" title="Showing your code"></a>Showing your code</h1><img src="/images/github-logo-social-coding.png" class="img-topic"><p>If you want to show how good a developer you are to other developers, then share your code on Github.  If you create sometihng interesting then develops may star your project or follow you</p><p>Here are some useful resources if you are still learning Git / Github</p><ul><li><a href="https://try.github.io" target="_blank" rel="noopener">Try Git</a></li><li><a href="Git Tutorial by Atlassian">https://www.atlassian.com/git/tutorials</a></li></ul><h2 id="Recruitement-through-Github"><a href="#Recruitement-through-Github" class="headerlink" title="Recruitement through Github"></a>Recruitement through Github</h2><p>Some interesting articles on the subject of recruiting from Github, including details of what recruiters may be looking for include:</p><ul><li><a href="https://medium.com/@aiiane/github-for-recruiters-66868c57c79a" target="_blank" rel="noopener">Github for recruiters</a></li><li><a href="http://www.eremedia.com/sourcecon/the-complete-guide-to-recruiting-and-sourcing-candidates-on-github/" target="_blank" rel="noopener">The complete guide to sourcing developers from Github</a></li><li><a href="http://www.socialtalent.co/blog/how-to-use-github-to-find-super-talented-developers" target="_blank" rel="noopener">Use Github to find your Super-Talented developers</a></li><li><a href="http://sourcingrecruitment.info/2015/05/github-and-stackoverflow-in-technical-recruitment/" target="_blank" rel="noopener">Github &amp; StackExchange for recruitement</a></li></ul><h1 id="Language-experiences-Polyglot-developers"><a href="#Language-experiences-Polyglot-developers" class="headerlink" title="Language experiences - Polyglot developers"></a>Language experiences - Polyglot developers</h1><p>Once developers have gained solid experience in there first language, many look to enhance their skills by trying a very different language.  A common choice is JavaScript, especially for those developers working on web user interfaces or needing to build lightweight services / API’s.</p><p>More and more developers are learning a second or third major language, making them what we term Polyglot developers, in that they are comfortable coding with more than one language.</p><p>A polyglot developer is very valuable as they can use the most appropriate language for the project at hand.  They understand the characteristics of a language and know why that language would be the best fit.</p><p>A good starting point for this is by reading <a href>Seven Languages in Seven Weeks</a>.  This book teaches you the characteristics of seven languages, rather than trying to make you proficient in seven languages.</p><h1 id="Contributing-to-Open-Source-Projects"><a href="#Contributing-to-Open-Source-Projects" class="headerlink" title="Contributing to Open Source Projects"></a>Contributing to Open Source Projects</h1><p>Most of the software world now runs on <a href="https://en.wikipedia.org/wiki/Open-source_software" target="_blank" rel="noopener">open source software</a>, so there are a great many projects out there you can contribute to.  Many of these project can be found on <a href="https://github.com" target="_blank" rel="noopener">Github</a></p><p>If you are interested in getting involved, choose a project you really like or some software you use often.  Check the project README file for details of how to contribute.  Projects on Github have a built in <strong>Issue Tracker</strong> where you can check for bugs that need fixing and any features requested.  If you start with one of these issues then let the project team know about it, either in the issue itself or in the chat room if the project has one.</p><blockquote><p>Many projects have IRC, Slack or Gitter based chat rooms to talk about the developent of a project.  Introduce yourself and let them know you are interested in helping out.</p></blockquote><p>If you are looking for projects to contribute, talk at look at <a href="https://twitter.com/yourfirstpr" target="_blank" rel="noopener">Your First PR</a> on Twitter.</p><blockquote><p>Open Source Projects usually have a license, defining the terms of use for the software.  By UK law, the authors of the sorouce retain copywrite of that software, unless specifically over-ridden by the license.  The Open Source Initiative has a list of <a href="http://opensource.org/licenses/category" target="_blank" rel="noopener">Open Source licenses</a></p></blockquote><blockquote><p><a href="http://creativecommons.org/" target="_blank" rel="noopener">Creative Commons</a> is a similar license usually for creative works such as images, videos, blogs &amp; books</p></blockquote><h1 id="Writing-tutorials-amp-blog-posts"><a href="#Writing-tutorials-amp-blog-posts" class="headerlink" title="Writing tutorials &amp; blog posts"></a>Writing tutorials &amp; blog posts</h1><p>Writing a tutorials &amp; blog posts are a great way to review how much you understand about a topic.  Its also a great way to get feedback from the community, who can offer additional technologies &amp; approached to try out.</p><p>A great tool for writing tutorials and ebooks is <a href="https://www.gitbook.com/" target="_blank" rel="noopener">Gitbook</a>.  You can write your content in [Markdown] and Gitbook will generate a fully navigable website and a range of ebook formats. </p><h1 id="Helping-amp-Mentoring-via-StackExchange-or-forums"><a href="#Helping-amp-Mentoring-via-StackExchange-or-forums" class="headerlink" title="Helping &amp; Mentoring via StackExchange or forums"></a>Helping &amp; Mentoring via StackExchange or forums</h1><p>There are lots of opportunities to help other developers at websites such as <a href="http://stackoverflow.com" target="_blank" rel="noopener">StackExchange</a>.  Find a topic you have experience in or even something you are currently learning.  There are lots of questions at various skill levels and so there should be some you can answer.</p><blockquote><p>Actually for some questions you can practice Googl’ing for the answer.  Its amazing how many answers you can find out there, either in one post or accross a few different posts.  You can also help keep StackExchange useful by idenifying duplicate questions.</p></blockquote><h1 id="Speaking-at-conferences-amp-meetups"><a href="#Speaking-at-conferences-amp-meetups" class="headerlink" title="Speaking at conferences &amp; meetups"></a>Speaking at conferences &amp; meetups</h1><p>Speaking at conferences can seem quite dawnting, but its invaluable experience.  If you can talk to an audience of 50 people you can easily talk to your team and the rest of the business you work for.</p><p>Obviously speaking at events helps you get noticed and gives you a good standing with employers.  When you are speaking you are also helping to promote your employer too, even if you are not directly talking about anything your employer does.</p><p>I suggest starting small with a local meetup and giving what is called a Lightning Talk.  This is a 5 to 10 minute talk on a specific topic and is a good way to start to build up some confidence.</p><p>There are plenty of expert speakers out there, but everyone had to start small and work their way up to bigger talks</p><blockquote><p>Everyone has something they do that is of interest to others, it can be as simple as sharing your experiences of a language feature or new technology.</p></blockquote><p>My first talk was on Personal Kanban, it was an agile technique I had been using for a few months and it had made a big difference to the way I worked.  I did a 30 minute talk on the subject and although it felt like hard work and not very good, I got lots of positive feedback from the audience.</p><h2 id="Top-tips-for-speaking"><a href="#Top-tips-for-speaking" class="headerlink" title="Top tips for speaking"></a>Top tips for speaking</h2><ul><li><p>Have a point (or three) you want to get across - its good to be focused in your talk, trying to cover too many things in a talk can be quite confusing for an audience.</p></li><li><p>Tell a story around the point you want to make, as context makes it easier for people to relate and remember your point.</p></li><li><p>Draw from your own experiences.  Nothing is more powerful for an audience than someone sharing their own challenges &amp; solutions.</p></li><li><p>Practice your talk - either with yourself or with others.  If you have a talk for a conference, then get some colleagues together at lunchtime or find a meetup a few weeks before your talk and give a shorter version of your talk.  This is a great way to get feedback and refine your presentation.</p></li></ul><p>Thank you<br><a href="@jr0cket">https://twitter.com/jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Just being a great developer or even a good one is not enough to create a great career.  How effective you are at communicating your skills, experience and the value you can bring to others really drives the quality of your career.  Luckily there are many ways to show off your skills, including those soft skills that are harder to quantify. &lt;/p&gt;
&lt;p&gt;It is not just recruiters &amp;amp; human resources departments that can get you a job, but more and more it is other developers that bring you in to their teams.  The more developers who know who you are, the more opportunities will be presented to you.&lt;/p&gt;
&lt;p&gt;Activities you can do to boost your career include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Blogging &amp;amp; technical content&lt;/li&gt;
&lt;li&gt;Social media for research and communication&lt;/li&gt;
&lt;li&gt;digital presence&lt;/li&gt;
&lt;li&gt;Meetups, Conferences and public speaking&lt;/li&gt;
&lt;li&gt;Understanding the modern recruitment process&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will walk through this aspects to help you understand them in more detail and describe my experiences and any tips I have to share&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Previously I covered aspects of &lt;a href=&quot;http://jr0cket.co.uk/2015/09/creating-a-digital-presence.html&quot;&gt;creating your digital self&lt;/a&gt; previously, covering a range of social media and developer community websites.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="community" scheme="http://jr0cket.co.uk/categories/community/"/>
    
    
  </entry>
  
  <entry>
    <title>Creating Your Digital Self</title>
    <link href="http://jr0cket.co.uk/2015/09/creating-a-digital-presence.html"/>
    <id>http://jr0cket.co.uk/2015/09/creating-a-digital-presence.html</id>
    <published>2015-09-24T14:28:05.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/matrix-digital-self.png" class="img-thumbnail"><p>Creating your digital self helps you express who you are and what you are about online in a way that enhances your career and also help you in your daily work.  Having a recognizable digital self also allow others to reach out to you and include you in the wider community.</p><p>Here are some tips and tools to help you create a consistent expression of your digital self.</p><a id="more"></a><h1 id="Consistency-of-your-digital-self"><a href="#Consistency-of-your-digital-self" class="headerlink" title="Consistency of your digital self"></a>Consistency of your digital self</h1><img src="/images/jr0cket-name.png" class="img-topic"><p>By creating a single name for your presence across all the communication channels you use makes it easier for people to find you and know that its really you.</p><p>I created the short name jr0cket, based on my real name John Stevenson.  Robert Stephenson created the Rocket, the steam locamotive that set the standard for the first railway network.  As my name is John and at the time I was doing a lot of Java development I added j to the rocket to create jrocket.  However, when I tried to get this name on Twitter, it was already taken (although not used), so I changed the o to a zero and created jr0cket.</p><p>At the same time I created a new domain, jr0cket.co.uk and ensured all my other social media and websites about me used jr0cket in some way.</p><h2 id="Buy-a-domain-name-for-yourself"><a href="#Buy-a-domain-name-for-yourself" class="headerlink" title="Buy a domain name for yourself"></a>Buy a domain name for yourself</h2><p>Domain names are relatively cheap (£5-£10 a year) and allow you to have a consistent name for your email, blog and any other websites you use.  You should be able to create sub-domains for each of your websites  I recommend domain name providers such as <a href="https://www.namecheap.com/" target="_blank" rel="noopener">NameCheap</a> or <a href="https://www.gandi.net/" target="_blank" rel="noopener">Gandi</a>.</p><h2 id="Put-a-real-face-to-your-name"><a href="#Put-a-real-face-to-your-name" class="headerlink" title="Put a real face to your name"></a>Put a real face to your name</h2><img src="/images/john-stevenson-profile-square.png" class="img-topic"><p>Using a real picture of yourself is very valuable as it allows your digital presence to easily extend to the physical world.  People are much more likely to talk to you and feel comfortable around you if they have seen your face online.  Having a real picture of you helps make your digital presence unique and makes people feel like they are talking to a real person.</p><p>Try and use the same picture everywhere and update that picture every few years so its a realistic image of yourself (this is a good motivation to keep healthy).</p><h1 id="Twitter"><a href="#Twitter" class="headerlink" title="Twitter"></a>Twitter</h1><img src="/images/twitter-logo.png" class="img-topic"><p>I find twitter one of the simplest and most effective ways of reaching out to people.  Twitter can also be an invaluable research tool, allowing you to easily find interesting articles to read by following a particular topic - ie. a hash tag.  For example, I am learning a programming language called Clojure, so I use Twitter to follow the hashtag #clojure.  This keeps me up to date with new features of the language, events relating to Clojure and interesting articles people have shared.</p><p>As you follow more people on twitter your main feed can get very noisy and move too fast to follow effectively.  Therefore the idea of following users, hashtags or lists of people you have created makes using Twitter more effective.</p><p>I recommend using tools like <a href="https://tweetdeck.twitter.com/" target="_blank" rel="noopener">TweetDeck</a> that allow you to watch several things at once, all of which should move in a more reasonable pace to keep up with.</p><h1 id="Blogging"><a href="#Blogging" class="headerlink" title="Blogging"></a>Blogging</h1><img src="/images/blog_icon.jpg" class="img-topic"><p>To be successful at blogging, you should write about things that are of most interest to you or the activities you are involved in every week.  Having a strong connection to the topic you blog about helps you attain a regular cadence in your writing.</p><p>Writing regularly is a simple and effective way to build up an audience and give you more credibility with developers and potential employers.  One article a week is a good cadence for most individual blogs, more than one if its a larger team blogging and there is enough meaningful content to share.</p><p>If there are special events you are engaged, such as product releases or conferences, then there can be value in blogging more.  By understanding who is visiting your sites and how often you can get a feeling of an appropriate cadence for new posts.</p><h2 id="Blogging-as-a-curated-version-of-Google"><a href="#Blogging-as-a-curated-version-of-Google" class="headerlink" title="Blogging as a curated version of Google"></a>Blogging as a curated version of Google</h2><p>I often Google for answers to specific development challenges, or simply to look for some good examples and tutorials.  If I am lucky I find the the answer I am looking for, described in an easy way for me to understand.  However most of the time I discover the solution by reviewing several websites and combining their information.  By writing my own article to cover the challenge &amp; solution I took, the next time I come across this challenge I have the answer available in a way I can easily understand and apply. </p><p>By writing a blog on the specific challenge or writing my own version of a tutorial helps me in the long run in two ways</p><h2 id="Writing-appealing-blog-posts"><a href="#Writing-appealing-blog-posts" class="headerlink" title="Writing appealing blog posts"></a>Writing appealing blog posts</h2><p>The title and first 2 lines of your blog post will determine if most people read the rest of your article.  It can take some practice to convey what an article is about in such a short amount of words.  Take a look at other blogs and consider if the title and initial words make you want to read the article (or at least help you understand the value of reading the article).</p><p>It can be useful to use a thumbnail image as a visual representation of the topic or main theme of your blog post.  Images in your articles should support and re-enforce the concepts you are trying to convey.</p><h2 id="Blogging-platforms"><a href="#Blogging-platforms" class="headerlink" title="Blogging platforms"></a>Blogging platforms</h2><p>There are many blog platforms out there, all with their pro’s and con’s.  Choose one that suits your needs and if not sure just pick the one that is easiest to use and re-evaluate that decision later on.</p><p>Many people use <a href="https://wordpress.com/" target="_blank" rel="noopener">WordPress.com</a>, however there are others such as <a href="http://www.typepad.com/" target="_blank" rel="noopener">Typepad</a>, <a href="https://ghost.org/" target="_blank" rel="noopener">Ghost</a> and many many more. </p><h1 id="Google-Analytics"><a href="#Google-Analytics" class="headerlink" title="Google Analytics"></a>Google Analytics</h1><p><a href="https://www.google.com/analytics/" target="_blank" rel="noopener">Google Analytics</a> has a free plan that will allow you to see a lot of valuable information about the visitors to your website or blog.</p><ul><li>when people are visiting your website</li><li>if they new or return visitors</li><li>approximate geographical location</li><li>the browser &amp; operating system they are using</li></ul><p>You can use Google Analytics for your blog to see when you get the most visitors and have a better insight into the best time to post new articles.</p><p><img src="/images/google-analytics-example-comparison.png" alt="Google Analytics example - comparing users &amp; page views for two past two months"></p><h1 id="LinkedIn"><a href="#LinkedIn" class="headerlink" title="LinkedIn"></a>LinkedIn</h1><p><a href="https://www.linkedin.com/" target="_blank" rel="noopener">LinkedIn</a> is a very useful service for defining your previous work history, acting as an online CV that you have full control over (recruitment consultants have been know to change or re-organise the information in an off-line document before sending to their customers).</p><h2 id="LinkedIn-Recommendations"><a href="#LinkedIn-Recommendations" class="headerlink" title="LinkedIn Recommendations"></a>LinkedIn Recommendations</h2><p>Getting a good reference from your manager is not always possible, so its useful to encourage your colleagues to give you recommendations via LinkedIn.  A good time to ask is when your colleagues have just benefited from some work you have done for them.  You can review the recommendation they have given you before it is published on your LinkedIn profile.</p><h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><img src="/images/github-logo-social-coding.png" class="img-topic"><p><a href="https://github.com/" target="_blank" rel="noopener">Github</a> is a great way to use the code others have created as well as sharing your own (or even just using Github as a backup for your code).  Many employers are looking at a persons contributions via Github to help them assess development skills.</p><p>Typically it will be other developers or development mangers that will review a candidates activity on Github.  There are many things they could be looking for, including</p><ul><li>Open Source projects contributed to</li><li>Languages used in projects</li><li>Level of experience you have with code</li><li>How well you write, test &amp; document code</li></ul><p>It is also common to look for project documentation or blog posts that describe in more detail the design choices taken in a project.</p><h1 id="Stack-Exchange-amp-discussion-forums"><a href="#Stack-Exchange-amp-discussion-forums" class="headerlink" title="Stack Exchange &amp; discussion forums"></a>Stack Exchange &amp; discussion forums</h1><p>In many development communities your contributions to <a href>Stack Exchange</a> are seen in a very positive light.  If you are quite active on certain parts of Stack Exchange you are quickly perceived as an experienced person on that subject, even if you feel you still have a lot to learn.</p><p>The best way to learn it to try and teach another.  Stack Exchange is a fun and engaging way to help others whilst helping you validate how much you have learned about a particular subject.</p><h1 id="Community-Instant-Messaging"><a href="#Community-Instant-Messaging" class="headerlink" title="Community Instant Messaging"></a>Community Instant Messaging</h1><p>Services like <a href="https://slack.com/" target="_blank" rel="noopener">Slack</a> and <a href="https://gitter.im/" target="_blank" rel="noopener">Gitter</a> provide a way for you to interact with the community in real time.  This is most useful if you are actively involved in the community (or are wanting to become more involved).</p><p>Gitter is especially useful when you are collaborating around a code repository on Github.  It also can show notifications of commits and pull requests made to the repository.</p><h1 id="Other-promotional-sites"><a href="#Other-promotional-sites" class="headerlink" title="Other promotional sites"></a>Other promotional sites</h1><ul><li>About.me - easily create a highly visual page that conveys who you are</li></ul><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Creating and managing a consistent and realistic digital presence is a very valuable way of reaching out to the wider community.  It also helps you make connections that are invaluable for your career as well as your daily life.</p><p>If you have a significant change in what you do or how you want to be percieved, dont forget to update your entire digital presence to reflect this.</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/matrix-digital-self.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Creating your digital self helps you express who you are and what you are about online in a way that enhances your career and also help you in your daily work.  Having a recognizable digital self also allow others to reach out to you and include you in the wider community.&lt;/p&gt;
&lt;p&gt;Here are some tips and tools to help you create a consistent expression of your digital self.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spacemacs for Clojure Development With Emacs - Configure Clojure</title>
    <link href="http://jr0cket.co.uk/2015/09/spacemacs-for-clojure-development-configure-clojure.html"/>
    <id>http://jr0cket.co.uk/2015/09/spacemacs-for-clojure-development-configure-clojure.html</id>
    <published>2015-09-07T16:54:45.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail"><p>Adding the Clojure layer to Spacemacs provides great support for the language via <a href="https://github.com/clojure-emacs/cider" target="_blank" rel="noopener">CIDER</a>, Clojure-mode, clj-refactor and lots of useful tools.</p><p>The <strong>Clojure</strong> layer also adds to the <strong>auto-completion</strong> layer, providing matches for anything currently defined in the current namespace.  The yasnippets package also allows you to expand shortcuts for common Clojure code structures, eg. def, defn, let, require.</p><a id="more"></a><h1 id="Adding-Clojure-support"><a href="#Adding-Clojure-support" class="headerlink" title="Adding Clojure support"></a>Adding Clojure support</h1><p>Clojure support in Spacemacs is configured by adding the <strong>clojure</strong> layer.  Edit <code>./spacemacs</code> and add <code>clojure</code> to the list of layers defined in <code></code>dotspacemacs-configuration-layers` function</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">dotspacemacs-configuration-layers</span> '(clojure)</span><br></pre></td></tr></table></figure><blockquote><p>For an example, see my <a href="https://github.com/jr0cket/spacemacs-config" target="_blank" rel="noopener">spacemacs configuration on github</a>. Please note that there are more configuration options added to this file than required for Clojure, only add the ones you understand.</p></blockquote><p>Restarting Emacs will download by the related packages for Clojure.</p><blockquote><p>You can also use <code>SPC f e R</code> (evil mode) or <code>M-m f e R</code> (holy mode) to reload the Spacemacs configuration and download packages, however for a big layer I have found a restart of Emacs is needed to load in all the new configuration.</p></blockquote><h2 id="Configure-Pretty-symbols"><a href="#Configure-Pretty-symbols" class="headerlink" title="Configure Pretty symbols"></a>Configure Pretty symbols</h2><p>You can configure the Clojure layer to use pretty symbols to represent a few things in Clojure, such as:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(λ [a](<span class="name"><span class="builtin-name">+</span></span> a <span class="number">5</span>)) <span class="comment">;; anonymous function (fn ...)</span></span><br><span class="line">ƒ(+ % 5)       ;; anonymous function shorthand #(...)</span><br><span class="line">∈&#123;2 4 6&#125;       ;; set #&#123;...&#125;</span><br><span class="line">Ƥ              ;; partial function (partial ...)</span><br></pre></td></tr></table></figure><p>To enable this feature, edit the <code>./spacemacs</code> file and add the following snippet to the <code>dotspacemacs/user-config</code> function:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">setq</span> clojure-enable-fancify-symbols <span class="literal">t</span>)</span><br></pre></td></tr></table></figure><h1 id="Configure-Leiningen"><a href="#Configure-Leiningen" class="headerlink" title="Configure Leiningen"></a>Configure Leiningen</h1><p>Install Leiningen using the instructions on <a href="http://leiningen.org" target="_blank" rel="noopener">Leiningen.org</a>, or if you already have Leiningen installed then check you have the latest version via <code>lein upgrade</code></p><blockquote><p>Leiningen should be version 2.6.x or greater as of 22nd February 2015</p></blockquote><p>If you are using CIDER 0.11 or greater then you are done, as from this version the Leiningen dependencies are automatically injected when you start <code>cider-jack-in</code>.</p><p><img src="/images/emacs-cider-auto-dependencies-messages.png" alt="Clojure REPL - CIDER dependency injection for cider-jack-in"></p><h2 id="Only-for-CIDER-0-10-or-earlier"><a href="#Only-for-CIDER-0-10-or-earlier" class="headerlink" title="Only for CIDER 0.10 or earlier"></a>Only for CIDER 0.10 or earlier</h2><p>Edit the Leiningen profile configuration for your useer, eg. <code>~/.lein/profiles.clj</code> and add the following plugins and dependencies:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="symbol">:user</span> &#123;<span class="symbol">:plugins</span>      [[cider/cider-nrepl <span class="string">"0.11.0-SNAPSHOT"</span>]</span><br><span class="line">                       [refactor-nrepl <span class="string">"2.0.0-SNAPSHOT"</span>]]</span><br><span class="line">        <span class="symbol">:dependencies</span> [[alembic <span class="string">"0.3.2"</span>]</span><br><span class="line">                       [org.clojure/tools.nrepl <span class="string">"0.2.12"</span>]]&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Plugin versions are the latest as of 28th December 2015.<br>You can also check for the latest versions of <a href="https://clojars.org/cider/cider-nrepl" target="_blank" rel="noopener">cider-nrepl</a>, <a href="https://clojars.org/refactor-nrepl" target="_blank" rel="noopener">refactor-nrepl</a>, <a href="https://clojars.org/alembic" target="_blank" rel="noopener">alembic</a> &amp; <a href="https://github.com/clojure/tools.nrepl" target="_blank" rel="noopener">tools.nrepl</a></p></blockquote><p>The <code>cider-nrepl</code> plugin should match the version of CIDER used in Spacemacs, found by using  <code>M-x cider-version</code>. You will see a warning message in the REPL buffer if the versions do not match, for example:</p><p><img src="/images/spacemacs-cider-nrepl-mismatch.png" alt="Clojure REPL - CIDER and cider-nrepl version mis-match"></p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Now you have the Clojure layer and Leiningen configured so you can create your Clojure apps with ease.  Next time we will show how to use the REPL to evaluate code, giving you almost instant feedback on what you have created.</p><p>Thank you<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/emacs-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Adding the Clojure layer to Spacemacs provides great support for the language via &lt;a href=&quot;https://github.com/clojure-emacs/cider&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CIDER&lt;/a&gt;, Clojure-mode, clj-refactor and lots of useful tools.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Clojure&lt;/strong&gt; layer also adds to the &lt;strong&gt;auto-completion&lt;/strong&gt; layer, providing matches for anything currently defined in the current namespace.  The yasnippets package also allows you to expand shortcuts for common Clojure code structures, eg. def, defn, let, require.&lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="spacemacs" scheme="http://jr0cket.co.uk/tags/spacemacs/"/>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="cider" scheme="http://jr0cket.co.uk/tags/cider/"/>
    
  </entry>
  
  <entry>
    <title>Spacemacs - First Impressions From an Emacs Driven Developer</title>
    <link href="http://jr0cket.co.uk/2015/08/spacemacs-first-impressions-from-an-emacs-driven-developer.html"/>
    <id>http://jr0cket.co.uk/2015/08/spacemacs-first-impressions-from-an-emacs-driven-developer.html</id>
    <published>2015-08-05T23:24:31.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail"><p><a href="https://github.com/syl20bnr/spacemacs" target="_blank" rel="noopener">Spacemacs</a> is a community developed configuration for Emacs that makes it easier for anyone to use this amazing developer tool.  Spacemacs is a well thought out way to apply the vast and diverse power of Emacs, making it more accessible especially to those who are used to using Vi.</p><p>Unless you’ve spent the last few years hand-crafting your own Emacs configuration, then I think you will enjoy Spacemacs.  Here are some reasons why I love Spacemacs as an Emacs user.</p><a id="more"></a><h1 id="Spacemacs-is-fast"><a href="#Spacemacs-is-fast" class="headerlink" title="Spacemacs is fast"></a>Spacemacs is fast</h1><p>The startup for Spacemacs is really quick, less than 2 seconds, even after adding a whole host of features (layers).  Some of this speed may be due to the lazy loading approach that Spacemacs takes.  In the best tradition of Lisp, some things are only loaded in Spacemacs when they are first used.  For example, when you open a Clojure source code file for the first time, the Clojure layer is loaded and clojure mode is applied.</p><h1 id="Goodbye-init-el-hello-dotspacemacs"><a href="#Goodbye-init-el-hello-dotspacemacs" class="headerlink" title="Goodbye init.el, hello dotspacemacs"></a>Goodbye init.el, hello dotspacemacs</h1><img src="/images/spacemacs-configure-layers.png" class="img-topic"><p>The init.el file has long been the entry point for your Emacs configuration with many different ways to setup an Emacs configuration.  With Spacemacs you have the <code>.spacemacs</code> file and layers, giving a very structured approach that is easy to follow.</p><p>The <code>.spacemacs</code> file has three sections</p><ul><li><strong>dotspacemacs/init</strong> - configuration applied when Spacemacs first starts, eg evil or holy mode(emacs), themes, fonts, full screen, recent files, etc</li><li><strong>dotspacemacs/layers</strong> - add features to spacemacs using layers, a layer can contain elisp and packages from Melpa/Elpa</li><li><strong>dotspacemacs/config</strong> - additional layer configuration or your own customisations </li></ul><p>The (emacs) keybindings for dotspacemacs are</p><p><code>M-m f e d</code> - open the <code>~/.spacemacs</code> file<br><code>M-m f e R</code> - reload the configuration from <code>~/.spacemacs</code> </p><blockquote><p>Some changes in the <code>~/.spacemacs</code> file still require a restart of Emacs , especially when pulling in a large number of packages in a layer.</p></blockquote><h1 id="Navigating-with-Helm"><a href="#Navigating-with-Helm" class="headerlink" title="Navigating with Helm"></a>Navigating with Helm</h1><img src="/images/spacemacs-helm-file-edit.png" class="img-topic"><p>Developers drive Emacs with keybindings or use commands via <code>M-x</code>.  The more features you add to Emacs, the more keybindings and commands you have at your fingertips.  So to manage all this power, Spacemacs uses Helm to organise these keybindings &amp; commands into groups.  Helm also helps you navigate the file system too, minimising the need to type directory and file names in full.</p><p>Commands are grouped by their nemonic character, for example</p><ul><li><code>S</code> - spelling</li><li><code>T</code> - themes</li><li><code>a</code> - applications</li><li><code>b</code> - buffers</li><li><code>f</code> - files</li><li><code>g</code> - git/version control</li></ul><p><a href="https://github.com/emacs-helm/helm" target="_blank" rel="noopener">Helm</a> is an incremental completion and selection<br>narrowing framework.  Its the central control tower of Spacemacs, it is used to manage buffers, projects, search results, configuration layers, toggles and more.</p><p>Once you have learnt the Spacemacs groupings for Helm its really fast to do anything, so take a look at the <a href="https://github.com/emacs-helm/helm/wiki" target="_blank" rel="noopener">Helm documentation wiki</a>.</p><p>You can still type in command names using <code>M-x command-name</code> too, if you know the name of the command you are looking for.</p><blockquote><p>ido mode is still available in Spacemacs but by default it is over-ridden by Helm.  You can enable ido using <code>dotspacemacs-use-ido t</code> in the <code>dotspacemacs/init</code> section of <code>.spacemacs</code>, however this only replaces a few commands.</p></blockquote><h1 id="Other-features-of-Spacemacs"><a href="#Other-features-of-Spacemacs" class="headerlink" title="Other features of Spacemacs"></a>Other features of Spacemacs</h1><img src="/images/spacemacs-other-features.png" class="img-topic"><ul><li><p><strong>numbered buffers</strong> - each buffer gets a number in the status bar, allowing you to jump to any buffer using the <code>M-m</code> or <code>SPC</code> and the buffer number, eg. <code>M-n 3</code> jumps to buffer number 3.</p></li><li><p><strong>smartparens and symbol balancing/highlighting</strong> - speeding up typing and reducing errors due to unmatched symbols.  For most symbols in most modes a matching symbol is created.  So if you type <code>(</code> then a matching <code>)</code> is created too.  If you want to surround some existing text with a symbol pair, then simply highlight the text and press the opening symbol.  A closing symbol is also highlighted when the cursor is at the opening symbol.  Spacemacs also highlights the surrounding symbols, including any parents.  So if you are in a nested list, <code>(parent code (nested code))</code>, then if the cursor is on the nested code, both nested &amp; parent symbols are highlighted.</p></li><li><p><strong>smooth scrolling</strong> - unlike the traditional jump-scrolling of Emacs, Spacemacs uses smooth scrolling as you fing in most other text editors.</p></li></ul><h1 id="Getting-started-with-Spacemacs"><a href="#Getting-started-with-Spacemacs" class="headerlink" title="Getting started with Spacemacs"></a>Getting started with Spacemacs</h1><p>Here are a few basic steps I took when starting Spacemacs</p><h2 id="Installing-amp-develop-branch"><a href="#Installing-amp-develop-branch" class="headerlink" title="Installing &amp; develop branch"></a>Installing &amp; develop branch</h2><p>With Emacs 24 installed I simply clone the Spacemacs configuration (first moving any existing Emacs configuration out of the way)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive https://github.com/syl20bnr/spacemacs ~/.emacs.d</span><br></pre></td></tr></table></figure><p>Before running Emacs I switched to the <code>develop</code> branch so I would have all the latest additions to Spacemacs (it seems pretty stable so far)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br></pre></td></tr></table></figure><p>Then I just ran Emacs as normal and saw Spacemacs taking shape.  There were a number of Emacs packages to download, so this bit took about a minute.</p><h2 id="Holy-mode"><a href="#Holy-mode" class="headerlink" title="Holy mode"></a>Holy mode</h2><p>I’ve been using Emacs for several years as my main browser so am very familiar with the Emacs bindings.  So when first starting Spacemacs I naturally chose the <strong>holy</strong> mode (aka Emacs mode)</p><p><img src="/images/spacemacs-install-holy-mode.png" alt="Spacemacs - selecting Holy mode"></p><h2 id="Adding-layers"><a href="#Adding-layers" class="headerlink" title="Adding layers"></a>Adding layers</h2><p>Spacemacs has only a few layers by default so I added auto-completion, clojure, git, html, javascript, markdown, org-mode, syntax-checking and version control to the <code>dotspacemacs/layers</code> function in <code>~/.spacemacs</code></p><p>After saving the changes to <code>~/.spacemacs</code> the configuration was reloaded with <code>M-m f e R</code>.  As I installed a lot of packages, I also restarted Emacs once everything had finished.</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">dotspacemacs-configuration-layers</span><br><span class="line">'(</span><br><span class="line">  ;; ----------------------------------------------------------------</span><br><span class="line">  ;; Example of useful layers you may want to use right away.</span><br><span class="line">  ;; Uncomment some layer names and press &lt;SPC f e R&gt; (Vim style) or</span><br><span class="line">  ;; &lt;M-m f e R&gt; (Emacs style) to install them.</span><br><span class="line">  ;; ----------------------------------------------------------------</span><br><span class="line">  auto-completion</span><br><span class="line">  better-defaults</span><br><span class="line">  clojure</span><br><span class="line">  emacs-lisp</span><br><span class="line">  git</span><br><span class="line">  html</span><br><span class="line">  javascript</span><br><span class="line">  markdown</span><br><span class="line">  org</span><br><span class="line">  syntax-checking</span><br><span class="line">  version-control</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>Using Helm is an easy way to see what layers are already available in Spacemacs, using the keyboard combo <code>M-m f e h</code>.  This gives you a list of all layers and if you hit return on any of the layer names you are taken to the docs for that layer.</p><p><img src="/images/spacemacs-helm-layers-list.png" alt="Helm layers"></p><p>You can also create your own layers with <code>M-m configuration-layer/create-layer</code>.  See <a href="http://thume.ca/howto/2015/03/07/configuring-spacemacs-a-tutorial/" target="_blank" rel="noopener">http://thume.ca/howto/2015/03/07/configuring-spacemacs-a-tutorial/</a> for more info as well as the Spacemacs docs.</p><h2 id="Changing-font-size"><a href="#Changing-font-size" class="headerlink" title="Changing font size"></a>Changing font size</h2><p>I set the default font to Ubuntu 16, the smallest usable font for my laptop for my own use.</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dotspacemacs-default-font '(<span class="string">"Ubuntu Mono"</span></span><br><span class="line">                            <span class="symbol">:size</span> <span class="number">16</span></span><br><span class="line">                            <span class="symbol">:weight</span> normal</span><br><span class="line">                            <span class="symbol">:width</span> normal</span><br><span class="line">                            <span class="symbol">:powerline-scale</span> <span class="number">1.1</span>)</span><br></pre></td></tr></table></figure><p>I often share my laptop with others or give a presentation using Emacs.  So I’ve added two keyboard bindings I commonly used to increase &amp; decrease the font size in the current buffer.  This was added to the <code>dotspacemacs/config</code> function in <code>~/.spacemacs</code></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">define-key</span> global-map (<span class="name">kbd</span> <span class="string">"C-+"</span>) 'text-scale-increase)</span><br><span class="line">(<span class="name">define-key</span> global-map (<span class="name">kbd</span> <span class="string">"C--"</span>) 'text-scale-decrease)</span><br></pre></td></tr></table></figure><h2 id="Fullscreen-at-startup"><a href="#Fullscreen-at-startup" class="headerlink" title="Fullscreen at startup"></a>Fullscreen at startup</h2><p>I like to see Emacs in full screen mode for minimum distraction, so I changed the following option in the <code>dotspacemacs/init</code> function of <code>~/.spacemacs</code></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotspacemacs-fullscreen-at-startup <span class="literal">t</span></span><br></pre></td></tr></table></figure><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>I really like the way Spacemacs is organised and have not felt the need to change anything, other than adding a few keybindings.  Its obvious right from the start that Spacemacs has been well thought out.  There is also a great community behind Spacemacs and there is always plenty of help.</p><p>There is still a lot to learn to get the most out of Spacemacs, but after a day I am pretty comfortable and productive.  The biggest thing to try is probably the modal editing approach you get with Vi and other eVIl features of Spacemacs.  This could make development with Emacs even faster.</p><p>It is well worth reading the <a href="https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.org" target="_blank" rel="noopener">Spacemacs guide</a>, which I found easy to follow.</p><p>Thank you.</p><p><a href="http://jr0cket.co.uk">jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/emacs-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/syl20bnr/spacemacs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spacemacs&lt;/a&gt; is a community developed configuration for Emacs that makes it easier for anyone to use this amazing developer tool.  Spacemacs is a well thought out way to apply the vast and diverse power of Emacs, making it more accessible especially to those who are used to using Vi.&lt;/p&gt;
&lt;p&gt;Unless you’ve spent the last few years hand-crafting your own Emacs configuration, then I think you will enjoy Spacemacs.  Here are some reasons why I love Spacemacs as an Emacs user.&lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="spacemacs" scheme="http://jr0cket.co.uk/tags/spacemacs/"/>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
  </entry>
  
  <entry>
    <title>Hack Faster With Heroku</title>
    <link href="http://jr0cket.co.uk/2015/07/hack-faster-with-heroku.html"/>
    <id>http://jr0cket.co.uk/2015/07/hack-faster-with-heroku.html</id>
    <published>2015-07-07T11:07:47.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/heroku-logo.png" class="img-thumbnail"><p>Time at a hackathon runs much faster that you think, so you can use <a href="https://heroku.com" target="_blank" rel="noopener">Heroku</a> to kickstart your app and get database services up and running instantly. Heroku also provides an easy way for a team to collaborate and let the judges see there app in action. </p><p>Here are a few tips on how to get going with Heroku and you can also use this <a href="http://jr0cket.co.uk/developer-guides/heroku-quickstart-guide.pdf">Heroku commands cheetsheet</a> for as a quick reference.</p><a id="more"></a><h2 id="Heroku-Buttons-for-a-head-start"><a href="#Heroku-Buttons-for-a-head-start" class="headerlink" title="Heroku Buttons for a head start"></a>Heroku Buttons for a head start</h2><img src="/images/heroku-elements-buttons-feautured.png" class="img-topic"><p>Each <a href="https://elements.heroku.com/buttons" target="_blank" rel="noopener">Heroku Button</a> gives you sample projects you can run on Heroku straight away.  Using Git you can clone that project and build your own app on top.</p><p>Or take a look at the <a href="https://devcenter.heroku.com/start" target="_blank" rel="noopener">getting started guides</a> that give you a sample project that you can configure to run on Heroku in a few simple steps.</p><p>If none of those appeal, then Googling for a good tutorial on your favourite framework &amp; Heroku will give you a lot of information to kickstart your project.</p><h2 id="Create-your-Heroku-app"><a href="#Create-your-Heroku-app" class="headerlink" title="Create your Heroku app"></a>Create your Heroku app</h2><p>If you are starting from scratch with your app, then create a local Git repository and commit your code as usual:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init </span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"Initial project created for the Hackathon"</span></span><br></pre></td></tr></table></figure><p>Then create an Heroku app, seting up a git remote alias called heroku that you push your code to</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku create</span><br></pre></td></tr></table></figure><h2 id="Push-your-app-changes-to-Heroku"><a href="#Push-your-app-changes-to-Heroku" class="headerlink" title="Push your app changes to Heroku"></a>Push your app changes to Heroku</h2><p>When you add new features to your app, commit them locally and then push those changes to Heroku as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"feature x added to wow the judges"</span></span><br><span class="line">git push heroku master</span><br></pre></td></tr></table></figure><h2 id="Create-Databases-amp-services-instantly"><a href="#Create-Databases-amp-services-instantly" class="headerlink" title="Create Databases &amp; services instantly"></a>Create Databases &amp; services instantly</h2><p>Installing &amp; configuring databases can be slow.  Using <a href="https://elements.heroku.com/addons/heroku-postgresql" target="_blank" rel="noopener">Heroku Posgres</a>, <a href="https://elements.heroku.com/addons/heroku-redis" target="_blank" rel="noopener">Heroku Redis</a> or 3rd party services for MongoDB, Neo4j and Hadoop gives you can have a data store in seconds with a click of the button or a simple command.</p><p>To add an Heroku postgres database to your app, use the following command </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku addons:add heroku-postgresql</span><br></pre></td></tr></table></figure><p>An environment variable is created called <code>DATABASE_URL</code>, which contains the username, password, server and database name.</p><p>You can also add databases and other services via your <a href="https://dashboard.heroku.com" target="_blank" rel="noopener">Heroku dashboard</a>.  Go to the <strong>Resources</strong> page of your Heroku app and select the <strong>Edit</strong> button next to <strong>Addons</strong>.  Matching addons with list as you type in the name of the addon you want.</p><p><img src="/images/heroku-dashboard-addons-post-results.png" alt="Heroku Dashboard - find add-on"> </p><blockquote><p>Note: 3rd party databases and services require a <a href="https://devcenter.heroku.com/articles/account-verification" target="_blank" rel="noopener">validated Heroku account</a> to minimise abuse on our platform.  A verified Heroku account requires credit card details.</p></blockquote><h2 id="Check-your-logs-easily"><a href="#Check-your-logs-easily" class="headerlink" title="Check your logs easily"></a>Check your logs easily</h2><p>Should something go wrong when deploying your app, take a look at the logs by running the <code>heroku logs</code> command.  Using the <code>--tail</code> option will display any new log entries as they happen.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku logs --tail</span><br></pre></td></tr></table></figure><h2 id="Sleep-your-app-when-not-in-use"><a href="#Sleep-your-app-when-not-in-use" class="headerlink" title="Sleep your app when not in use"></a>Sleep your app when not in use</h2><p>When you are not testing your app, you can switch it off easily and save your free credits for the day using the <code>heroku ps:scale</code> command.  Scaling your active process to zero swiches your application off completely, so scale down your web process as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku ps:scale web=0</span><br></pre></td></tr></table></figure><p>When you are ready to use your app again, start your web process up with the same <code>heroku ps:scale</code> command, for example</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku ps:scale web=1</span><br></pre></td></tr></table></figure><blockquote><p>If you have a worker process, then simply use <code>worker</code> instead of <code>web</code> in the above commands.</p></blockquote><p>You can also switch your app off using the Heroku dashboard.  On the Resources tab of your app, edit the dyno’s section and switch the running dyno off.</p><p><img src="/images/heroku-dashboard-free-plan-edit-one-dyno.png" alt="Heroku Dashboard - Switch your app off or on"> </p><h2 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h2><p>Hopefully you can see that using Heroku will help speed up a lot of tasks at a hackathon and give you more time to develop your idea and create a great demo for the judges.</p><p>Good luck with your hack!</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/heroku-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Time at a hackathon runs much faster that you think, so you can use &lt;a href=&quot;https://heroku.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Heroku&lt;/a&gt; to kickstart your app and get database services up and running instantly. Heroku also provides an easy way for a team to collaborate and let the judges see there app in action. &lt;/p&gt;
&lt;p&gt;Here are a few tips on how to get going with Heroku and you can also use this &lt;a href=&quot;http://jr0cket.co.uk/developer-guides/heroku-quickstart-guide.pdf&quot;&gt;Heroku commands cheetsheet&lt;/a&gt; for as a quick reference.&lt;/p&gt;
    
    </summary>
    
    
      <category term="heroku" scheme="http://jr0cket.co.uk/tags/heroku/"/>
    
      <category term="hackathon" scheme="http://jr0cket.co.uk/tags/hackathon/"/>
    
  </entry>
  
  <entry>
    <title>Clojure Templates Are Easy With Leiningen</title>
    <link href="http://jr0cket.co.uk/2015/03/clojure-templates-are-easy-with-leiningen.html"/>
    <id>http://jr0cket.co.uk/2015/03/clojure-templates-are-easy-with-leiningen.html</id>
    <published>2015-03-09T22:58:28.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/clojure-logo.png" class="img-thumbnail"><p>  Using templates to create your Clojure projects can save you a lot of setup time and ensure your team is using the same base configuration and dependencies.  There are <a href="https://clojars.org/search?q=lein-template" target="_blank" rel="noopener">templates on Clojars.org</a>, however I’ll show you how easy it is to create your own with <a href="http://leiningen.org" target="_blank" rel="noopener">Leiningen</a>.</p><p>  I’ll create a simple template based on the leiningen default template, adding a section in the project.clj to give a custom propmt when run in the repl.</p><blockquote><p>Templates used to be a Leinigen pluging called <a href="https://github.com/Raynes/lein-newnew" target="_blank" rel="noopener">lein-newnew</a> and its repo was the only doucmentation I found and was a little outdated.  The plugin is now part of Leiningen and there are a few <a href="https://github.com/technomancy/leiningen/tree/master/src/leiningen/new" target="_blank" rel="noopener">built in templates</a>.  There is also information via <code>lein help new</code>.</p></blockquote><blockquote><p>If you want to create a template in a more automatic way from a more complete project you created, take a look at the <a href="https://github.com/tcw/lein-create-template" target="_blank" rel="noopener">lein-create-template</a> Leinignen plugin.</p></blockquote><a id="more"></a><h2 id="Creating-templates"><a href="#Creating-templates" class="headerlink" title="Creating templates"></a>Creating templates</h2><p>  A Clojure template is created in the same was as a Clojure project, however a template called <code>template</code> is used</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lein new template your-template-name</span><br></pre></td></tr></table></figure><p>  I created a new template called <code>jr0cket-prompt</code>, so where you see this name in the following commands, substitue your own template name</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lein new template jr0cket-prompt</span><br></pre></td></tr></table></figure><p><img src="/images/leiningen-template-new-jr0cket-prompt.png" alt></p><blockquote><p>The documentation for <em>lein-newnew</em> uses the <code>--to-dir</code> to specify the name of a directory to create the template in.  This is only useful if you want to give the directory a different name to the template name.</p></blockquote><h2 id="Overview-of-the-template"><a href="#Overview-of-the-template" class="headerlink" title="Overview of the template"></a>Overview of the template</h2><p><img src="/images/leiningen-template-new-jr0cket-prompt-tree.png" alt="Directory structure of jr0cket-prompt template"></p><p><code>project.clj</code> - this is the same as any other project.clj file, except the project name has <code>/lein-template</code> after it.  This allows leiningen find it on <a href="http://clojars.org" target="_blank" rel="noopener">Clojars.org</a>.</p><p><code>source/leiningen/new/clj_jr0cket_dojo_template.clj</code> - defines how a project is created from this template.  For example, defining which files the template generates and how it creates them.</p><p><code>resources/leiningen/new/clj_jr0cket_dojo/</code> - this is where you put all the source &amp; project files that make up your template, using tags where the name of a new project should be substituted.</p><h2 id="Configure-the-template-definition"><a href="#Configure-the-template-definition" class="headerlink" title="Configure the template definition"></a>Configure the template definition</h2><p>  My template will have a customised <code>project.clj file</code>.  The rest of the template is the same as the default Leiningen template. So I edited the <code>src/leiningen/new/jr0cket_prompt.clj</code> and added code to create the threee files for my project, in the correct paths.</p><blockquote><p> The project contains a <code>project.clj</code> file containing my prompt modifications and the <code>core.clj</code> file for the <code>src</code> and <code>test</code> branch.</p></blockquote><blockquote><p>The <code>sanitized</code> tag is used to change any <code>-</code> characters in the project name to <code>_</code> characters, so the directory names do not cause issues for Java.  The <code>render</code> specifies which file in the <code>resources</code> directory a new file is generated from.</p></blockquote><p><img src="/images/leiningen-template-new-jr0cket-prompt-definition.png" alt="Leiningen template definition - files to be generated by the template"></p><h2 id="Copy-files-into-the-template"><a href="#Copy-files-into-the-template" class="headerlink" title="Copy files into the template"></a>Copy files into the template</h2><p>  I now add the files to the <code>resources</code> directory that my new project files are generated from, configuring each file to substitute the namespace and any other project specific information.</p><p>  From a project I previosly created with <code>lein new</code>, I copied over a <code>project.clj</code> file along with a <code>core.clj</code> file for <code>src</code> and <code>core_test.clj</code> for <code>test</code> directories.  These files all reside under <code>resources/leiningen/new/jr0cket_prompt/</code>.</p><h2 id="Add-placeholder-names-to-the-template"><a href="#Add-placeholder-names-to-the-template" class="headerlink" title="Add placeholder names to the template"></a>Add placeholder names to the template</h2><p>  When a new Clojure project is created with your template, in this case using <code>lein new jr0cket-prompt new-project</code>, the name needs to be substitued into the new Clojure files so they have the correct namespace for the project.  The new <code>project.clj</code> file also needs to use the name of the new Clojure project.</p><p>  I edited the <code>project.clj</code> file to add the custom prompt information and a placeholder for the new project name.</p><p><img src="/images/leiningen-template-new-jr0cket-prompt-project.png" alt="Leiningen template - custom project.clj file"></p><p>  For the <code>src/project/core.clj</code> and <code>test/project/core.clj</code> I add the name tag to the namespace definition.</p><p><img src="/images/leiningen-template-new-jr0cket-prompt-core.png" alt="Leiningen template - src core.clj file"></p><p><img src="/images/leiningen-template-new-jr0cket-prompt-core_test.png" alt="Leiningen template - test core_test.clj file"></p><h2 id="Testing-the-template"><a href="#Testing-the-template" class="headerlink" title="Testing the template"></a>Testing the template</h2><p>  Build the template project into a <code>.jar</code> file using leiningen by running the following command within the template directory:</p><pre><code>lein jar</code></pre><p>  Now change to the <code>target</code> directory and create a new project using leiningen.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> target</span><br><span class="line">lein new myproject-template new-project-name</span><br></pre></td></tr></table></figure><blockquote><p>By changing into the target directory, you are placing the jar file of the template onto the Java class path and therefore making it avaialble to leiningen.</p></blockquote><h2 id="Installing-the-template"><a href="#Installing-the-template" class="headerlink" title="Installing the template"></a>Installing the template</h2><p>  Once you are happy with the template, you can use it locally by installing it into your library cache - <code>~/.m2/repository/</code>.  From the root of the template project, run the following command:</p><pre><code>lein install</code></pre><h2 id="Publishing-the-template"><a href="#Publishing-the-template" class="headerlink" title="Publishing the template"></a>Publishing the template</h2><p>  Once the template is ready to share with others, you can publish the jar on <a href="http://clojars.org" target="_blank" rel="noopener">Clojars.org</a> using the following command from the root of the template project:</p><pre><code>lein deploy clojars</code></pre><blockquote><p>You should clean the project and rebuild it before publishing to Clojars to make sure there are no testing files remaining - <code>lein clean ; lein jar</code></p></blockquote><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>  This has been just the simplest template I could think of.  There are many useful <a href="https://github.com/technomancy/leiningen/blob/de06302d28cfadcced25067e6ac04480f18789c5/src/leiningen/new/templates.clj" target="_blank" rel="noopener">helper functions</a> as part of Leiningen templates</p><ul><li><a href="https://github.com/Raynes/lein-newnew" target="_blank" rel="noopener">Lein-new project</a> - this project was merged into Leiningen.  The documentation gives a good overview, however there are smoe things that are less than ceear.</li><li><a href="https://github.com/technomancy/leiningen/tree/master/src/leiningen/new" target="_blank" rel="noopener">Leiningen example templates</a> - examples of how to define a template</li><li><a href="https://github.com/technomancy/leiningen/blob/de06302d28cfadcced25067e6ac04480f18789c5/src/leiningen/new/templates.clj" target="_blank" rel="noopener">Leiningen template helper functions</a> - useful functions you can call in your template definition</li></ul><h2 id="Community-templates-of-note"><a href="#Community-templates-of-note" class="headerlink" title="Community templates of note"></a>Community templates of note</h2><p>  Templates others have created can be <a href="https://clojars.org/search?q=lein-template" target="_blank" rel="noopener">found on Clojars.org</a>.  For example, <a href="https://github.com/james-henderson/splat" target="_blank" rel="noopener">Splat</a> is a template to create a ClojureScript single page web applications by <a href="https://github.com/james-henderson" target="_blank" rel="noopener">James Hendersons</a>.  Malcolm Sparks has templates for his <a href="http://modularity.org/" target="_blank" rel="noopener">Modularity.org projects</a>.</p><p>  Got and create your own templates and contribute them back via Clojars.org.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/clojure-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;  Using templates to create your Clojure projects can save you a lot of setup time and ensure your team is using the same base configuration and dependencies.  There are &lt;a href=&quot;https://clojars.org/search?q=lein-template&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;templates on Clojars.org&lt;/a&gt;, however I’ll show you how easy it is to create your own with &lt;a href=&quot;http://leiningen.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leiningen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;  I’ll create a simple template based on the leiningen default template, adding a section in the project.clj to give a custom propmt when run in the repl.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Templates used to be a Leinigen pluging called &lt;a href=&quot;https://github.com/Raynes/lein-newnew&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lein-newnew&lt;/a&gt; and its repo was the only doucmentation I found and was a little outdated.  The plugin is now part of Leiningen and there are a few &lt;a href=&quot;https://github.com/technomancy/leiningen/tree/master/src/leiningen/new&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;built in templates&lt;/a&gt;.  There is also information via &lt;code&gt;lein help new&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want to create a template in a more automatic way from a more complete project you created, take a look at the &lt;a href=&quot;https://github.com/tcw/lein-create-template&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lein-create-template&lt;/a&gt; Leinignen plugin.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/categories/clojure/"/>
    
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="leiningen" scheme="http://jr0cket.co.uk/tags/leiningen/"/>
    
      <category term="coding" scheme="http://jr0cket.co.uk/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Clean Git Commits With Emacs Magit</title>
    <link href="http://jr0cket.co.uk/2015/02/clean-git-commits-with-emacs-magit.html"/>
    <id>http://jr0cket.co.uk/2015/02/clean-git-commits-with-emacs-magit.html</id>
    <published>2015-02-09T10:28:30.000Z</published>
    <updated>2022-01-02T20:20:15.290Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail"><p>  An effective way to have a clean and valuable commit history is to create the smallest valuable commit each time, with a descriptive commit message.  This sounds obvious, but when you are in the midst of work things can get messy.  Using Emacs Magit you can be highly selective as to what changes you include in each commit, down to individual characters.</p><blockquote><p>This follows on from <a href="/2014/07/staging-patches-with-git-for-cleaner-commits.html">staging patches for cleaner commits</a> with the command line, <code>git add -p</code>.  Also see how to <a href="/2012/12/driving-git-with-emacs-pure-magic-with.html.html">drive Git with Emacs and Magit</a> for more background.</p></blockquote><a id="more"></a><h2 id="Emacs-Magit"><a href="#Emacs-Magit" class="headerlink" title="Emacs Magit"></a>Emacs Magit</h2><p>  Magit is an amazing tool for managing Git repositories, providing all the standard features of a graphical tool.  It is part of the <a href="https://github.com/overtone/emacs-live" target="_blank" rel="noopener">Emacs Live</a> and available via the useual Emacs package managers.</p><p>  To run magit, I typically open a file under version control and hit <code>C-x g</code> or <code>M-x magit-status</code>.</p><p>  Magit keeps track of the changes in your project and the status can be updated using <code>g</code> in the magit buffer.</p><p>  To stage all the changes in a file you can move the cursor to the unstaged file you want to add and press <code>s</code>, or stage all changes using <code>S</code>.</p><p>  To unstage a file, again move the cursor against its name and press <code>u</code> or unstage all files added using <code>U</code>.</p><p><img src="/images/emacs-magit-status.png" alt="Emacs Magit - status buffer"></p><h2 id="Selective-commits-using-hunks"><a href="#Selective-commits-using-hunks" class="headerlink" title="Selective commits using hunks"></a>Selective commits using hunks</h2><p>  Its easy to be more selective than just staging everything in a file.  Move the cursor against the filename and press <code>tab</code> to show the <em>hunks</em> within a file.</p><blockquote><p>A <em>hunk</em> is the name Git gives to continuous lines that contain changes in a file.  So if all your changes are made line after line, there will be one <em>hunk</em>.  If you have unchanged lines between the lines you have changed, you will have more than one <em>hunk</em>.</p></blockquote><p>  Move the cusor to the hunk you want to add and pres <code>s</code> to stage that hunk.  Using <code>n</code> &amp; <code>p</code> to move to the next or previous hunks if they exist.</p><p>  Sometimes Git organised the changed lines into hunks that have too many changes in, or to few changes.  You can change hunk sizes using  <code>+</code> or <code>-</code> to expand or shrink the hunk (shrinking is essentially splitting a hunk where possible).</p><blockquote><p>It may not always be possible to split a hunk enough for your commit.</p></blockquote><h2 id="Selective-commits-using-regions"><a href="#Selective-commits-using-regions" class="headerlink" title="Selective commits using regions"></a>Selective commits using regions</h2><p>  If you really need to refine what you are committing, you can select a region to stage by selecting characters and lines.</p><p>  Open a file that has unstaged changes using <code>tab</code></p><p>  Select a region of the text using <code>C-SPC</code> or <code>C-@</code></p><p>  Hit <code>s</code> to stage the selected region</p><p><img src="/images/emacs-magit-staging-hunk-select-region-to-stage.png" alt="Emacs Magit - select region to stage"></p><blockquote><p>Make sure you have not shrunk any hunks, or the region selection may not work.</p></blockquote><p>  You can check the correct text has been added by viewing the newly added entry in <em>Staged changes</em> section.</p><p><img src="/images/emacs-magit-staging-hunk-select-region-staged.png" alt></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>  So Emacs Magit give a really easy way to stage changes in the size of commit that is most valuable.  So take a few seconds longer to think about what you are committing and how useful it will be to others and yourself during the life of the project.</p><p>  You dont want to be spending too much time unpicking commits to find a bug and applying a patch.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/emacs-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;  An effective way to have a clean and valuable commit history is to create the smallest valuable commit each time, with a descriptive commit message.  This sounds obvious, but when you are in the midst of work things can get messy.  Using Emacs Magit you can be highly selective as to what changes you include in each commit, down to individual characters.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This follows on from &lt;a href=&quot;/2014/07/staging-patches-with-git-for-cleaner-commits.html&quot;&gt;staging patches for cleaner commits&lt;/a&gt; with the command line, &lt;code&gt;git add -p&lt;/code&gt;.  Also see how to &lt;a href=&quot;/2012/12/driving-git-with-emacs-pure-magic-with.html.html&quot;&gt;drive Git with Emacs and Magit&lt;/a&gt; for more background.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/tags/dev-tools/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="magit" scheme="http://jr0cket.co.uk/tags/magit/"/>
    
  </entry>
  
  <entry>
    <title>Custom Powerline Theme for Emacs Modeline</title>
    <link href="http://jr0cket.co.uk/2015/01/custom-powerline-theme-for-Emacs-modeline.html"/>
    <id>http://jr0cket.co.uk/2015/01/custom-powerline-theme-for-Emacs-modeline.html</id>
    <published>2015-01-30T22:49:53.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail"><p>  Continuing my modeline customisation with <a href="https://github.com/milkypostman/powerline" target="_blank" rel="noopener">powerline</a>, I wanted to add colour to match the Cyberpunk theme of <a href="http://overtone.github.io/emacs-live/" target="_blank" rel="noopener">Emacs Live</a>.  To do this I copied the default them and custmised it, adding colours and chaning the style of seperatr.  Here is how I customised the powerline code to make my own theme.</p><blockquote><p>See how I previously <a href="http://jr0cket.co.uk/2015/01/tweaking-emacs-modeline-with-powerline.html">tweaked Emacs modeline with powerline</a>, as this article carries on from that.  My modeline also includes an earlier <a href="http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html.html">tweak for the minor modes</a>.</p></blockquote><a id="more"></a><h2 id="Modeline-seperators-as-waves"><a href="#Modeline-seperators-as-waves" class="headerlink" title="Modeline seperators as waves"></a>Modeline seperators as waves</h2><p><img src="/images/emacs-emacs-live-powerline-theme-default-modeline.png" alt="Emacs - Powerline default arrow seperators"></p><p>  Although the arrows are nice way to seperate the different parts of the modeline, I tried out the different styles.  My favorite was the <code>wave</code> style.</p><p>  To change the style, I edited the <code>lib/powerline.el</code> file and change the <code>powerline-default-separator</code> to the value to <code>wave</code>.  The choice list shows you all the styles of seperator available. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(defcustom powerline-default-separator &apos;wave</span><br><span class="line">  &quot;The separator to use for the default theme.</span><br><span class="line">  :group &apos;powerline</span><br><span class="line">  :type &apos;(choice (const alternate)</span><br><span class="line">                 (const arrow)</span><br><span class="line">                 (const arrow-fade)</span><br><span class="line">                 (const bar)</span><br><span class="line">                 (const box)</span><br><span class="line">                 (const brace)</span><br><span class="line">                 (const butt)</span><br><span class="line">                 (const chamfer)</span><br><span class="line">                 (const contour)</span><br><span class="line">                 (const curve)</span><br><span class="line">                 (const rounded)</span><br><span class="line">                 (const roundstub)</span><br><span class="line">                 (const slant)</span><br><span class="line">                 (const wave)</span><br><span class="line">                 (const zigzag)</span><br><span class="line">                 (const nil)))</span><br></pre></td></tr></table></figure><p><img src="/images/emacs-emacs-live-powerline-theme-default-modeline-wave.png" alt="Emacs - Powerline wave seperators"></p><blockquote><p>I restarted Emacs each time I changed the seperator style for it to take effect. I am not sure how to update the style without a restart.</p></blockquote><h2 id="Creating-my-own-theme-for-Emacs-Powerline"><a href="#Creating-my-own-theme-for-Emacs-Powerline" class="headerlink" title="Creating my own theme for Emacs Powerline"></a>Creating my own theme for Emacs Powerline</h2><p>  I wanted to change the colours of the modeline to make it more personal to me and also help it stand out between all the text of the buffers.</p><p>  Rather than mess up the default theme I simply edited the <code>lib/powerline/powerline-theme.el</code> file and copied the default theme completely, called the new theme <code>powerline-default-theme</code>.  This allowed me to experiment whilst still having a working reference theme to fall back on.  </p><p>  To use my new theme,  I edited the configuration file <code>~/.live-packs/jr0cket-pack/config/powerline.el</code> and changed the line defining the theme</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(require &apos;powerline)</span><br><span class="line">(powerline-jr0cket-theme)</span><br></pre></td></tr></table></figure><h3 id="Removing-modeline-information-I’m-not-interested-in"><a href="#Removing-modeline-information-I’m-not-interested-in" class="headerlink" title="Removing modeline information I’m not interested in"></a>Removing modeline information I’m not interested in</h3><p>  There are some of the elements I was not interested in, such as the size of buffer and mule-info. So I edited my jr0cket theme and removed the lines</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(powerline-buffer-size nil &apos;l) </span><br><span class="line">(powerline-raw mode-line-mule-info nil &apos;l)</span><br></pre></td></tr></table></figure><h3 id="Removing-extra-spacing"><a href="#Removing-extra-spacing" class="headerlink" title="Removing extra spacing"></a>Removing extra spacing</h3><p>  The default theme adds padding between some elements by adding a space character. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(powerline-raw &quot; &quot;)</span><br></pre></td></tr></table></figure><p>   There was aso padding around some elements on the modeline, specifically the line <code>l</code> &amp; column <code>c</code> numbers and the percentage of buffer above the currently visible text <code>p</code>.  The default theme adds numbers in front of these caracters adds padding, which I didnt feel was needed so I deleted those numbers.      </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(powerline-raw &quot;%l&quot; face1 &apos;l)</span><br><span class="line">(powerline-raw &quot;%c&quot; face1 &apos;r)</span><br><span class="line">(powerline-raw &quot;%p&quot; nil &apos;r)</span><br></pre></td></tr></table></figure><h2 id="Changing-Colours-in-the-modeline"><a href="#Changing-Colours-in-the-modeline" class="headerlink" title="Changing Colours in the modeline**"></a>Changing Colours in the modeline**</h2><p>  The powerline default theme is very grey, so I wanted to add some colours that would work with the Emacs Live Cyberpunk theme.  Changing colours is done in the <code>lib/powerline/powerline.el</code> file.</p><p>  I changed the text colour using <code>:foreground</code>, the background colour with <code>:background</code>and made the text bold using <code>:weight bold</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(defface powerline-active1 &apos;((t (:foreground &quot;#d0d0f0&quot; :background &quot;purple&quot; :inherit mode-line)))</span><br><span class="line">  &quot;Powerline face 1.&quot;</span><br><span class="line">  :group &apos;powerline)</span><br><span class="line"></span><br><span class="line">(defface powerline-active2 &apos;((t (:foreground &quot;#63b132&quot; :weight bold :background &quot;black&quot; :inherit mode-line)))</span><br><span class="line">  &quot;Powerline face 2.&quot;</span><br><span class="line">  :group &apos;powerline)</span><br></pre></td></tr></table></figure><h2 id="Adding-an-extra-face-for-the-buffer-name"><a href="#Adding-an-extra-face-for-the-buffer-name" class="headerlink" title="Adding an extra face for the buffer name"></a>Adding an extra face for the buffer name</h2><p>  The defalt powerline theme has two faces (styles) for inactive  and active windows - <code>powerline-active1</code>, <code>powerline-active2</code>, <code>powerline-inactive1</code> &amp; <code>powerline-inactive2</code>  Different parts of the modeline are assigned to one of the faces and therefore display in different styles.  There are a few parts of the modeline, like the buffer name, that are not assinged to a face and display in the colour of the Emacs theme (Emacs Live)  </p><p>  I wanted to change the style of the buffer name, so rather than change the Emacs theme I added a third face to the <code>lib/powerline/powerline-theme.el</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(defface powerline-active0 &apos;((t (:foreground &quot;deep pink&quot; :weight bold :background &quot;black&quot; :inherit mode-line)))</span><br><span class="line">  &quot;Powerline face 0.&quot;</span><br><span class="line">  :group &apos;powerline)</span><br><span class="line"></span><br><span class="line">(defface powerline-inactive0</span><br><span class="line">  &apos;((t (:background &quot;black&quot; :weight bold :inherit mode-line-inactive)))</span><br><span class="line">  &quot;Powerline face 0.&quot;</span><br><span class="line">  :group &apos;powerline)</span><br></pre></td></tr></table></figure><p> I then tried out different colours for the buffer name and settled on the reverse of face0, so updated the <code>lib/powerline/powerline.el</code> file by adding an <code>active0</code> and <code>inactive0</code> configuration as follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">(defface powerline-active0 &apos;((t (:foreground &quot;purple&quot; :weight bold :background &quot;#d0d0f0&quot; :inherit mode-line)))</span><br><span class="line">  &quot;Powerline face 0.&quot;</span><br><span class="line">  :group &apos;powerline)</span><br><span class="line"></span><br><span class="line">(defface powerline-inactive0</span><br><span class="line">  &apos;((t (:background &quot;black&quot; :weight bold :inherit mode-line-inactive)))</span><br><span class="line">  &quot;Powerline face 0.&quot;</span><br><span class="line">  :group &apos;powerline)</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">  The final active modeline with my theme and colours applied looks very nice and very useful to me</span><br><span class="line"></span><br><span class="line">![Emacs - Powerline jr0cket theme fullscreen](/images/emacs-emacs-live-powerline-theme-jr0cket-modeline.png)</span><br><span class="line"></span><br><span class="line">  Here is the overal view of Emacs with the jr0cket theme and colours applied.</span><br><span class="line"></span><br><span class="line">![Emacs - Powerline jr0cket theme fullscreen](/images/emacs-emacs-live-powerline-theme-jr0cket-fullscreen.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Final version of the jr0cket powerline theme</span><br><span class="line"></span><br><span class="line">  Here is the complete code for the `powerline-jr0cket-theme`</span><br><span class="line"></span><br><span class="line">``` elisp </span><br><span class="line">    (defun powerline-jr0cket-theme ()</span><br><span class="line">      &quot;Customisation of the default powerline theme&quot;</span><br><span class="line">      (interactive)</span><br><span class="line">      (setq-default mode-line-format</span><br><span class="line">        &apos;(&quot;%e&quot;</span><br><span class="line">          (:eval</span><br><span class="line">           (let* (</span><br><span class="line">             (active (powerline-selected-window-active))</span><br><span class="line">             (mode-line (if active &apos;mode-line &apos;mode-line-inactive))</span><br><span class="line">             (face0 (if active &apos;powerline-active0 &apos;powerline-inactive0))</span><br><span class="line">             (face1 (if active &apos;powerline-active1 &apos;powerline-inactive1))</span><br><span class="line">             (face2 (if active &apos;powerline-active2 &apos;powerline-inactive2))</span><br><span class="line">             (separator-left</span><br><span class="line">              (intern</span><br><span class="line">               (format &quot;powerline-%s-%s&quot;</span><br><span class="line">                       powerline-default-separator</span><br><span class="line">                       (car powerline-default-separator-dir))))</span><br><span class="line">             (separator-right</span><br><span class="line">              (intern (format &quot;powerline-%s-%s&quot;</span><br><span class="line">                              powerline-default-separator</span><br><span class="line">                              (cdr powerline-default-separator-dir))))</span><br><span class="line">             (lhs (list (powerline-raw &quot;%*&quot; face0 &apos;l)</span><br><span class="line">                        (powerline-buffer-id face0 &apos;l)</span><br><span class="line">                        (when (and (boundp &apos;which-func-mode) which-func-mode)</span><br><span class="line">                          (powerline-raw which-func-format face0 &apos;l))</span><br><span class="line">                        (powerline-narrow face0 &apos;l)</span><br><span class="line">                        (funcall separator-left face0 face1)</span><br><span class="line">                        (when (boundp &apos;erc-modified-channels-object)</span><br><span class="line">                          (powerline-raw erc-modified-channels-object face1 &apos;l))</span><br><span class="line">                            (powerline-major-mode face1 &apos;l)</span><br><span class="line">                            (powerline-process face1)</span><br><span class="line">                            (powerline-raw &quot; &quot; face1 &apos;r)</span><br><span class="line">                            (powerline-minor-modes face1 &apos;l)</span><br><span class="line">                            (powerline-narrow face1)</span><br><span class="line">                            (funcall separator-left face1 face2)</span><br><span class="line">                            (powerline-vc face2 &apos;r)))</span><br><span class="line">             (rhs (list (powerline-raw global-mode-string face2 &apos;r)</span><br><span class="line">                        (funcall separator-right face2 face1)</span><br><span class="line">                        (powerline-raw &quot;%l&quot; face1)</span><br><span class="line">                        (powerline-raw &quot;:&quot; face1)</span><br><span class="line">                        (powerline-raw &quot;%c&quot; face1)</span><br><span class="line">                        (funcall separator-right face1 face0)</span><br><span class="line">                        (powerline-raw &quot;%p&quot; face0)</span><br><span class="line">                        (powerline-hud face2 face1))))</span><br><span class="line">             (concat (powerline-render lhs)</span><br><span class="line">                     (powerline-fill face2 (powerline-width rhs))</span><br><span class="line">                     (powerline-render rhs)))))))</span><br></pre></td></tr></table></figure><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>  <a href="https://github.com/milkypostman/powerline" target="_blank" rel="noopener">Powerline</a> is a really nice way to add that extra touch to the Emacs experience.  Its also pretty easy to configure to give you your own personalised look to the Emacs modeline.  Let me know if you have any interesting customisations to your Emacs setup.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/emacs-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;  Continuing my modeline customisation with &lt;a href=&quot;https://github.com/milkypostman/powerline&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;powerline&lt;/a&gt;, I wanted to add colour to match the Cyberpunk theme of &lt;a href=&quot;http://overtone.github.io/emacs-live/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Emacs Live&lt;/a&gt;.  To do this I copied the default them and custmised it, adding colours and chaning the style of seperatr.  Here is how I customised the powerline code to make my own theme.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;See how I previously &lt;a href=&quot;http://jr0cket.co.uk/2015/01/tweaking-emacs-modeline-with-powerline.html&quot;&gt;tweaked Emacs modeline with powerline&lt;/a&gt;, as this article carries on from that.  My modeline also includes an earlier &lt;a href=&quot;http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html.html&quot;&gt;tweak for the minor modes&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/tags/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title>Tweaking Emacs Modeline With Powerline</title>
    <link href="http://jr0cket.co.uk/2015/01/tweaking-emacs-modeline-with-powerline.html"/>
    <id>http://jr0cket.co.uk/2015/01/tweaking-emacs-modeline-with-powerline.html</id>
    <published>2015-01-28T22:59:23.000Z</published>
    <updated>2022-01-02T20:20:15.310Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail"><p>  It important to enjoy the development tools you use day after day, so after seeing some of the great looking Emacs modeline customisations, I couldnt resist pimping my modeline (again).</p><p>  Previously I <a href="http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html.html">tweaked the modeline for Clojure development</a>, this time I’ve added styling to the modeline using <a href="https://github.com/milkypostman/powerline" target="_blank" rel="noopener">powerline</a>.  I aim to create a modeline worthy of the rest of the <a href="http://overtone.github.io/emacs-live/" target="_blank" rel="noopener">Emacs Live</a> experience.</p><a id="more"></a><blockquote><p>There are several other versions of powerline listed on the EmacsWiki <a href="http://www.emacswiki.org/emacs/PowerLine" target="_blank" rel="noopener">powerline</a> page.  </p></blockquote><h2 id="Installing-powerline"><a href="#Installing-powerline" class="headerlink" title="Installing powerline"></a>Installing powerline</h2><p>  I use Emacs Live as my base configuration for Emacs, so I added the powerline project to my personal configuration <code>~/.live-packs/jr0cket-pack/</code></p><p>  First I cloned the powerline Gitub repository into the <code>lib</code> folder of my live pack </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.live-packs/jr0cket-pack/lib</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/milkypostman/powerline</span><br></pre></td></tr></table></figure><p>  Then I created a configuration file for the powerline project</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emacslcient ~/.live-packs/jr0cket-pack/config/powerline.el &amp;</span><br></pre></td></tr></table></figure><p>   Adding the following code to the powerline config file loads the files in <code>lib/powerline</code>.  I also state which theme I want to use.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(require &apos;powerline)</span><br><span class="line">(powerline-default-theme)</span><br></pre></td></tr></table></figure><blockquote><p>There are several other themes avaiable in powerline, including <code>(powerline-center-theme)</code> and <code>(powerline-nano-theme)</code></p></blockquote><p>  Finally, I added a function to load the powerline library at startup in my Emacs Live live-pack init.el file, <code>~/.live-packs/jr0cket-pack/init.el</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(live-load-config-file &quot;powerline.el&quot;)</span><br></pre></td></tr></table></figure><p>  I restarted Emacs and was presented with my new modeline</p><p><img src="/images/emacs-emacs-live-powerline-theme-default.png" alt="Emacs powerline - default theme with my Clojure mode tweaks"></p><p>  In full screen with several windows open you can see the difference between active and inactive windows.</p><p><img src="/images/emacs-emacs-live-powerline-theme-default-fullscreen.png" alt="Emacs powerline - default theme with active and inactive windows"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>  The powerline project is an easy way to tweak your modeline into something more stylised.  Next I want to create my own powerline theme to have my own design touches and tailor it more to my needs.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/emacs-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;  It important to enjoy the development tools you use day after day, so after seeing some of the great looking Emacs modeline customisations, I couldnt resist pimping my modeline (again).&lt;/p&gt;
&lt;p&gt;  Previously I &lt;a href=&quot;http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html.html&quot;&gt;tweaked the modeline for Clojure development&lt;/a&gt;, this time I’ve added styling to the modeline using &lt;a href=&quot;https://github.com/milkypostman/powerline&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;powerline&lt;/a&gt;.  I aim to create a modeline worthy of the rest of the &lt;a href=&quot;http://overtone.github.io/emacs-live/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Emacs Live&lt;/a&gt; experience.&lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/tags/dev-tools/"/>
    
      <category term="emacslive" scheme="http://jr0cket.co.uk/tags/emacslive/"/>
    
  </entry>
  
  <entry>
    <title>Getting Started With Cider Repl for Clojure on Emacs Live</title>
    <link href="http://jr0cket.co.uk/2015/01/getting-started-with-cider-repl-for-clojure-on-emacs-live.html"/>
    <id>http://jr0cket.co.uk/2015/01/getting-started-with-cider-repl-for-clojure-on-emacs-live.html</id>
    <published>2015-01-21T11:07:17.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/clojure-cider-logo.png" class="img-thumbnail"><p>  <a href="https://github.com/clojure-emacs/cider" target="_blank" rel="noopener">CIDER</a> is the Clojure IDE and REPL for Emacs.  It is built on top of nREPL, the Clojure networked REPL server and replaces the direct use of nREPL in Emacs.</p><p>  In this article we are using CIDER that is packaged in Emacs Live, a very complete, well organised and extensible configuration for Clojure and many other things in Emacs.</p><a id="more"></a><p>  CIDER includes the standard interactive code evaluation developers are used to.  There are also many other features that I want to explore further, including error and warning highlighting, human-friendly stacktraces, smart code completion, definition &amp; documentation lookup, value inspector &amp; function tracing, interactive macroexpansion, <a href="http://conj.io/" target="_blank" rel="noopener">Grimoire</a> integration, <code>clojure.test</code> integration, classpath browser, namespace browser, nREPL session management, scratchpad, minibuffer code evaluation, integration with <a href="http://company-mode.github.io/" target="_blank" rel="noopener">company-mode</a> and <a href="https://github.com/clojure-emacs/ac-cider" target="_blank" rel="noopener">auto-complete-mode</a></p><h2 id="Emacs-Live"><a href="#Emacs-Live" class="headerlink" title="Emacs Live"></a>Emacs Live</h2><p>  CIDER is now the default in the latest version of <a href="http://overtone.github.io/emacs-live/" target="_blank" rel="noopener">Emacs Live</a>, so there no set up to do if you already have the latest version.  If you need to update, or are not sure you are on the latest version of Emacs live, simply run a <em>git pull</em> from within <code>~/.emacs.d</code> directory:</p><pre><code>git pull origin master</code></pre><p>  If you dont have Emacs Live, you can install it from the <a href="https://github.com/overtone/emacs-live" target="_blank" rel="noopener">Emacs Live Github repository</a> and either clone the repository into <code>~/.emacs.d</code> (moving or deleting any existing directory) or preferably use the install script that also sets up a <code>~/.live-packs</code> extension directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    bash &lt;(curl -fksSL https://raw.github.com/overtone/emacs-live/master/installer/install-emacs-live.sh)</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="comment">## Leiningen configuration</span></span><br><span class="line"></span><br><span class="line">  CIDER requires the use of [nREPL middleware](https://github.com/clojure-emacs/cider-nrepl) between Emacs and Leiningen.  For example, when you run CIDER `M-x cider-jack-in` <span class="keyword">in</span> Emacs it calls Leiningen to start the REPL.  So you need to add a plugin to your Leiningen configuration.</span><br><span class="line">  </span><br><span class="line">  Edit the `~/.lein/plugings.clj` file (or create this file <span class="keyword">if</span> it does not exist yet) and add the `[cider/cider-nrepl <span class="string">"0.8.1"</span>]` plugin.  The `~/.lein/plugings.clj` should look similar to this:</span><br><span class="line">  </span><br><span class="line">```clojure</span><br><span class="line">    &#123;:user &#123;:plugins [[lein-pprint <span class="string">"1.1.1"</span>]</span><br><span class="line">                      [cider/cider-nrepl <span class="string">"0.8.1"</span>]]&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>You can find the available versions of the <a href="https://clojars.org/cider/cider-nrepl" target="_blank" rel="noopener">cider-nrepl plugin on Clojars.org</a>.  The plugin version should be the same version of CIDER you are using in your Emacs configuration, which at the time of writing was 0.8.1.</p></blockquote><h2 id="Running-CIDER-in-Emacs"><a href="#Running-CIDER-in-Emacs" class="headerlink" title="Running CIDER in Emacs"></a>Running CIDER in Emacs</h2><p>  Either create a new Clojure project using <code>lein new my-project-name</code> or open an existing project in Emacs (either the <code>project.clj</code> file or a <code>.clj</code> file from <code>src/my-project-name/</code>).</p><p>  With your cursor in the Clojure file buffer, run CIDER using the keybinding <code>C-c M-j</code> or the emacs command </p><pre><code>M-x cider-jack-in</code></pre><p><img src="/images/emacs-cider-started.png" alt="Emacs Live - CIDER jack in - C-c M-j"></p><blockquote><p>Alternatively, you could run a REPL using <code>lein repl</code> on the command line and connect to that REPL using <code>C-c M-c</code> or <code>M-x cider</code>.  You will be prompted for the connection details of the running repl, ie. host, port.</p></blockquote><h2 id="Using-CIDER-in-Emacs"><a href="#Using-CIDER-in-Emacs" class="headerlink" title="Using CIDER in Emacs"></a>Using CIDER in Emacs</h2><p>  There are a number of <a href="https://github.com/clojure-emacs/cider#keyboard-shortcuts" target="_blank" rel="noopener">Cider keyboard shortcuts (keybindings)</a> already defined, here are some of the most common ones I use:</p><ul><li><code>C-c C-e</code> - evaluates the form immediately before the cursor and shows the result in the minibuffer.  So place your cursor right after the closing parentheses <code>)</code> of your expression, hit the keybinding and see the minibuffer for the result.</li></ul><p><img src="/images/emacs-cider-eval-expression-minibuffer.png" alt="Emacs Live - CIDER eval form with result in minibuffer - C-c C-e"></p><ul><li><code>C-c M-e</code> - the same as above except the result is sent to the REPL</li></ul><p><img src="/images/emacs-cider-eval-expression-repl.png" alt="Emacs Live - CIDER eval form with result in the REPL - C-c M-e"></p><ul><li><p><code>C-c C-k</code> - evaluate the whole buffer.  So with the cursor in a Clojure source file, all the forms / expressions are evaluate as if the code was loaded in from scratch.</p></li><li><p><code>C-c C-d d</code> - show the documentaion as you would with <code>(doc function-name)</code>.  Place the cursor over a function name, hit the keybinding and see the documenation for that funtion.  This also works inside the REPL buffer, so no need to use <code>(doc)</code>, which is not loaded by default. </p></li><li><p><code>C-c M-n</code> - switch to namespace of current Clojure buffer.  So with the cursor in a Clojure source file, hit the keybinding and your REPL buffer will now be in the namespace for that Clojure code.</p></li></ul><p><img src="/images/emacs-cider-namespace-change.png" alt="Emacs Live - CIDER change to namespace of current Clojure code - C-c M-n"></p><blockquote><p>Changing into a namespace does not automatically evaluate the code in that namespace, so evaluate the whole buffer <code>C-c C-k</code> or evaluate specific expressions (forms) <code>C-c M-e</code>.  Once evaluated, you can evaluate that code in the REPL.</p></blockquote><ul><li><p><code>M-&gt;</code> or <code>M-x cider-jump-to-var</code> prompts you for a var, a function <code>(defn)</code> or symbol name <code>(def)</code> and moves the cursor to its definition.  If the cusor is already on a matching name the the cursor jumps straight to that definition.</p></li><li><p><code>C-c C-q</code> or <code>M-x cider-quit</code> - close the REPL and its associated buffer.</p><p>There are many more things you can do within Clojure files and the REPL, so take a look at the <a href="https://github.com/clojure-emacs/cider#keyboard-shortcuts" target="_blank" rel="noopener">Cider keyboard shortcuts (keybindings)</a> once you have the basics mastered.</p></li></ul><h2 id="Further-reading"><a href="#Further-reading" class="headerlink" title="Further reading"></a>Further reading</h2><p>  Some further reading around CIDER:</p><ul><li><a href="https://github.com/clojure-emacs/cider#keyboard-shortcuts" target="_blank" rel="noopener">Cider keyboard shortcuts (keybindings)</a></li><li><p><a href="http://blog.jenkster.com/2013/12/a-cider-excursion.html" target="_blank" rel="noopener">Clojure on Emacs - A CIDER workflow hack</a> - Kris Jenkins</p><p>Have fun and be productive with CIDER, Emacs and Clojure.  If you have any other suggestions on getting them most out of these tools, please let me know.</p></li></ul><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/clojure-cider-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;  &lt;a href=&quot;https://github.com/clojure-emacs/cider&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CIDER&lt;/a&gt; is the Clojure IDE and REPL for Emacs.  It is built on top of nREPL, the Clojure networked REPL server and replaces the direct use of nREPL in Emacs.&lt;/p&gt;
&lt;p&gt;  In this article we are using CIDER that is packaged in Emacs Live, a very complete, well organised and extensible configuration for Clojure and many other things in Emacs.&lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/tags/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title>Tweaking Light Table for a Great Clojure Experience</title>
    <link href="http://jr0cket.co.uk/2015/01/tweaking-light-table-for-a-great-clojure-experience.html"/>
    <id>http://jr0cket.co.uk/2015/01/tweaking-light-table-for-a-great-clojure-experience.html</id>
    <published>2015-01-03T22:27:09.000Z</published>
    <updated>2022-01-02T20:20:15.310Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/lighttable-logo.png" class="img-thumbnail"><p>  <a href="http://lighttable.com" target="_blank" rel="noopener">Light Table</a> provides a great development environment for Clojure, ClojureScript &amp; JavaScript.  With a few tweaks and some of the many plugins you can make Light Table do even more.  Here are a few of the tweaks and plugins I use for my development with Light Table.</p><a id="more"></a><h4 id="Ubuntu-Fonts"><a href="#Ubuntu-Fonts" class="headerlink" title="Ubuntu Fonts"></a>Ubuntu Fonts</h4><p>  The <a href="http://font.ubuntu.com/" target="_blank" rel="noopener">Ubuntu fonts</a> are very clear and easy on the eyes, so are great for coding with.  I use the Ubuntu Mono font for all my editors by adding the following line to my user behaviors</p><p>  Open the command panel in Light Table with <code>Ctrl-Space</code> and type <code>user behaviors</code>.  Then edit the file that opens and add the following line</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">:editor</span> <span class="symbol">:lt.objs.style/font-settings</span> <span class="string">"Ubuntu Mono"</span> <span class="number">16</span> <span class="number">1.2</span>]</span><br></pre></td></tr></table></figure><p>  When I run workshops or other demos I increase the font size to 20, to make the code easier to read from a distance.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">:editor</span> <span class="symbol">:lt.objs.style/font-settings</span> <span class="string">"Ubuntu Mono"</span> <span class="number">20</span> <span class="number">1.2</span>]</span><br></pre></td></tr></table></figure><blockquote><p>You can use Ubuntu Fonts with operating systems other than Ubuntu by downloading the fonts from <a href="http://font.ubuntu.com/" target="_blank" rel="noopener">font.ubuntu.com</a></p></blockquote><h4 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a>Themes</h4><p>  The default theme for Light Table is pretty good, however my prefered Light Table font is called <em>Tommorow Night</em> and I configure my user behaviors to use this theme by adding the following line:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">:editor</span> <span class="symbol">:lt.objs.style/set-theme</span> <span class="string">"tomorrow-night"</span>]</span><br></pre></td></tr></table></figure><blockquote><p>There is also an Ubuntu theme plugin that I have just spotted, so I am trying that out although I want to tweak some of the colours before I make the switch.</p></blockquote><h4 id="Bracket-fun"><a href="#Bracket-fun" class="headerlink" title="Bracket fun"></a>Bracket fun</h4><p>From Light Table 0.7.0 onwards parens are not auto-closed anymore, so when you type <code>(</code> then you have to also type <code>)</code>.  Coming from Emacs, I find this limiting, so luckily you can add this behaviour back in by editing your user behaviors.  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">:app</span> <span class="symbol">:lt.objs.settings/pair-keymap-diffs</span>]</span><br></pre></td></tr></table></figure><h4 id="Emacs-keybindings"><a href="#Emacs-keybindings" class="headerlink" title="Emacs keybindings"></a>Emacs keybindings</h4><p>  The Emacs plugin is a wrapper around the Code Mirror keybindings for Emacs.  Installing the Emacs plugin with give you many of the Emacs keybindings you enjoy and you can easily customise them by changing the keybindings mapping in the plugin.</p><p>  See my previous post on how to use the <a href="http://localhost:4004/2015/01/clojure-with-lighttable-in-emacs-mode.html" target="_blank" rel="noopener">Emacs plugin with Light Table</a>. </p><h4 id="Git-Status-Bar"><a href="#Git-Status-Bar" class="headerlink" title="Git Status Bar"></a>Git Status Bar</h4><p>  The Git status bar plugin simply indicates the Git branch your current editors’ file is in, assuming it is under version control.</p><img src="/images/lighttable-plugin-git-status-bar.png" class="img-code"><p>  Install using the plugin manager and restart Light Table (you may just be able to select “Reload App Behaviours” from the Light Table commands).  Then open a file under version control and you will see its Git branch in the right corner of the status bar (the bar at the bottom of Light Table).</p><blockquote><p>Git branch / status will only show for files that are in repositories whose root is in your workspace.</p></blockquote><h4 id="Gitlight"><a href="#Gitlight" class="headerlink" title="Gitlight"></a>Gitlight</h4><p>  Gitlight plugin provides a visual Git client that can stage and commit changes, push &amp; pull changes with remote repositories and show visual diffs of changes.  Install Gitlight from the Light Table plugin manager and restart Light Table (you may just be able to select “Reload App Behaviours” from the Light Table commands).</p><p>  Use Gitlight by opening the command panel and type <code>gitlight</code>, you will see a list of available commands</p><img src="/images/lighttable-gitlight-commands.png" class="img-code"><p>  If you open a file from a project managed by git you can see the status of all the files in that project using the command <code>gitlight-status</code></p><img src="/images/lighttable-gitlight-status-window.png" class="img-code">  <p>  If you select diff for any of the files in the project, you get a nice visual comparison of the changes between what is committed and your working copy.</p><img src="/images/lighttable-gitlight-diff-visual.png" class="img-code">    <h4 id="Modific-show-changes-since-last-Git-commit"><a href="#Modific-show-changes-since-last-Git-commit" class="headerlink" title="Modific - show changes since last Git commit"></a>Modific - show changes since last Git commit</h4><p>  When you save a file, any changes you made since it was last commited to Git are marked by coloured lines at the left hand side of the editor window, also known as <em>gutter marks</em>. </p><img src="/images/lighttable-plugin-modific-example.png" class="img-code"><blockquote><p>modific example with red, green and yellow highlights</p></blockquote><ul><li>Red    = lines have been deleted  </li><li>Green  = new lines have been added</li><li>Yellow = text that has be modified</li></ul><p>You can jump between changes using <code>Ctrl+Shift+PageUp/PageDown</code>, show the original version by putting the cursor on a changed line and hit <code>Ctrl+Alt+c</code> and revert a change by putting the cursor on a changed line and hit <code>Ctrl+Alt+r</code></p><p>  Install modific from the Light Table plugin manager and restart Light Table.  Then open a file from workspace project that is under version control.  Now any change you make will be highlighted.</p><h4 id="Plugins-to-try-next"><a href="#Plugins-to-try-next" class="headerlink" title="Plugins to try next"></a>Plugins to try next</h4><p>  There are lots of other plugins I have not tried yet.  Many plugins also provide additional language support.</p><p>  Here are a few plugins I plan to try next: </p><ul><li><a href="https://github.com/chadhq/slamhound-lt" target="_blank" rel="noopener">Slamhound</a> - refactor your Clojure namespace</li><li><a href="https://github.com/vgrichina/lt-howdoi" target="_blank" rel="noopener">howdoi</a> - pull in code solutions from the web</li><li><a href="https://github.com/joshuafcole/recall" target="_blank" rel="noopener">recall</a> - workspace Persistence </li><li><a href="https://github.com/bfabry/workspace-nav" target="_blank" rel="noopener">workspace nav</a> - Navigate the workspace view via the keyboard </li></ul><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>  Light Table provides a lot of great features out of the box, expecially for Clojure, ClojureScript and JavaScript development.  Using tweaks and plugins, Light Table is easy to tailor int a more personalised development experience.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/lighttable-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;  &lt;a href=&quot;http://lighttable.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Light Table&lt;/a&gt; provides a great development environment for Clojure, ClojureScript &amp;amp; JavaScript.  With a few tweaks and some of the many plugins you can make Light Table do even more.  Here are a few of the tweaks and plugins I use for my development with Light Table.&lt;/p&gt;
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="lighttable" scheme="http://jr0cket.co.uk/tags/lighttable/"/>
    
  </entry>
  
  <entry>
    <title>Faster Clojure REPL Startup With Java 9 Snapshot</title>
    <link href="http://jr0cket.co.uk/2015/01/faster-clojure-repl-startup-with-java-9-snapshot.html"/>
    <id>http://jr0cket.co.uk/2015/01/faster-clojure-repl-startup-with-java-9-snapshot.html</id>
    <published>2015-01-03T20:18:13.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/java-logo.png" class="img-thumbnail"><p>  After upgrading to Java 8, Clojure development seemed faster due to quicker REPL startup times.  So when I saw a snapshot of Java 9 had been released I was hopeful that startup performance would be even faster.</p><blockquote><p>As Clojure runs on the Java Virtual machine (JVM), each time you start a REPL then you wait for a new JVM to start.  Other than this REPL startup, Clojure feels faster than developing with Java directly.</p></blockquote><p>  Here is how I set up Java 9 Snapshot on my Linux laptop (Ubuntu 14.10), it should be the same for any decent operating system.</p><a id="more"></a><h4 id="Installing-Java-9-Snapshot"><a href="#Installing-Java-9-Snapshot" class="headerlink" title="Installing Java 9 Snapshot"></a>Installing Java 9 Snapshot</h4><blockquote><p>I could have built Java 9 from source and made a <code>.deb</code> file of it for a nice install, however the manual install is a lot quicker.</p></blockquote><p>  <a href="https://jdk9.java.net/download/" target="_blank" rel="noopener">Download the Java 9 snapshot</a> from the OpenJDK9 website.</p><p>  I extracted the .tar.gz file into the directory <code>~/apps/openjdk</code> and created a symbolic link called <code>current</code> that pointed to the extracted directory </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar zvxf ~/Downloads/jdk-9-ea-bin-b44-linux-x64-23_dec_2014.tar.gz ~/apps/openjdk</span><br><span class="line"><span class="built_in">cd</span> ~/apps/openjdk</span><br><span class="line">ln -s jdk-9-ea-bin-b44-linux-x64-23_dec_2014 current</span><br></pre></td></tr></table></figure><h4 id="Add-Java-9-to-the-system-PATH"><a href="#Add-Java-9-to-the-system-PATH" class="headerlink" title="Add Java 9 to the system PATH"></a>Add Java 9 to the system PATH</h4><p>  I currently have Java 8 installed and its picked up by the alternatives system in Ubuntu, which has java in the <code>/usr/bin</code> path.  So to run Java 9 without removing Java 8 or creating an Ubuntu package, I can simply add Java 9 executable to the start of the system path so it is picked up first.</p><p>  To make the manual adding of Java to the path more robust, I use the environment vairable <code>JAVA_HOME</code> and set that to the location pointed to by the <code>current</code> symbolic link.  If I want to try a new version of Java I can simply change the symbolic link.</p><p>  Add the environment variable to your shell resource configuration, eg <code>~/.bashrc</code> or <code>~/.zshrc</code> as follows</p><pre><code class="bash"><span class="comment">### Java9 - from https://jdk9.java.net/download/</span><span class="built_in">export</span> JAVA_HOME=/home/jr0cket/apps/openjdk/current<span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></code></pre><p>  Now when ever I open a new command line terminal I can run Java 9 as the default Java.  I could also use <code>source ~/.bashrc</code> or <code>source ~/.zshrc</code> command to update the path in the current command line terminal. </p><h4 id="Testing-Java-9"><a href="#Testing-Java-9" class="headerlink" title="Testing Java 9"></a>Testing Java 9</h4><p>  To test I have successfulling installed Java 9 I run the following commands:</p><pre><code>java -versionjavac -version</code></pre><p>  To test the speed performance of Java 9 over Java 8 I used Light Table, a modern and easy to use development environment for Clojure.  For my performance test I opened a small project in Light Table and opened its main Clojure file.  I then started an Instarepl in Light Table for the current file.  </p><p>  Using Java 8 the Instarepl took 17 seconds to start up.  Using Java 9 the Instarepl took 14 seconds to start up.</p><blockquote><p>The time taken for the REPL to start included checking for dependencies each time I ran it.  In each test the dependencies were all ready present so time difference is not due to downloading libraries.  There are many more tests I could run, but the biggest difference for me is in REPL startup time.</p></blockquote><p>  So in this basic test there is a visible improvement in REPL startup time with Java 9.  I hope that this startup time can be further reduced as Java 9 develops and the componentisation of Java via Project Jigsaw helps make Java smaller and quicker to start.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/java-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;  After upgrading to Java 8, Clojure development seemed faster due to quicker REPL startup times.  So when I saw a snapshot of Java 9 had been released I was hopeful that startup performance would be even faster.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As Clojure runs on the Java Virtual machine (JVM), each time you start a REPL then you wait for a new JVM to start.  Other than this REPL startup, Clojure feels faster than developing with Java directly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  Here is how I set up Java 9 Snapshot on my Linux laptop (Ubuntu 14.10), it should be the same for any decent operating system.&lt;/p&gt;
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/categories/clojure/"/>
    
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/tags/dev-tools/"/>
    
      <category term="lighttable" scheme="http://jr0cket.co.uk/tags/lighttable/"/>
    
      <category term="java" scheme="http://jr0cket.co.uk/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Clojure With Light Table and Emacs Keybindings</title>
    <link href="http://jr0cket.co.uk/2015/01/clojure-with-lighttable-in-emacs-mode.html"/>
    <id>http://jr0cket.co.uk/2015/01/clojure-with-lighttable-in-emacs-mode.html</id>
    <published>2015-01-03T14:08:38.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[ <img src="http://www.lighttable.com/images/logo.png" class="img-thumbnail"><p>  When I <a href="http://clojure.practical.li" target="_blank" rel="noopener">teach people Clojure</a> I use <a href="http://lighttable.com/" target="_blank" rel="noopener">Light Table</a> because it is really simple to use and its <em>Instarepl</em> gives instant feedback of the code as you type it.  This feedback helps you understand Clojure quickly and gives you more confidence when coding.</p><p>  As I do most of my Clojure development (and most everything else) in <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="noopener">Emacs</a> I really miss the excellent Emacs keybindings when I use Light Table.  Luckily there is an <a href="https://github.com/LightTable/Emacs" target="_blank" rel="noopener">Emacs plugin for Light Table</a>, so here is a quick guide on how to install &amp; use this Emacs plugin.</p><a id="more"></a><h4 id="Install-Emacs-plugin-for-Light-Table"><a href="#Install-Emacs-plugin-for-Light-Table" class="headerlink" title="Install Emacs plugin for Light Table"></a>Install Emacs plugin for Light Table</h4><p>  Light Table has many plugins available and the easiest way to install them is with the plugin manager.  In Light Table, open the command bar with <code>Ctrl-Space</code> (<code>Cmd-Space</code> on MacOSX) and type <code>plugin</code></p><p>  Select the plugin manager and a new window opens, listing all the currently installed plugins.  Select the <code>available</code> tab in this window.  </p><p>  There are many plugins, so type <code>emacs</code> to quickly find the plugin.  Then select <code>install</code> on the Emacs plugin</p><p><img src="/images/lighttable-plugins-emacs-install.png" alt="Light Table plugin manager - Emacs install"></p><p>  At the time of writing, installing this plugin generates a warning message due to a format change in Light Table 0.7.0.  The plugin still works correctly however.</p><p><img src="/images/lighttable-plugins-emacs-install-error-vector-map.png" alt="Light Table Emacs plugin - warning message"></p><h4 id="Add-Emacs-plugin-to-Light-Table-user-behavior"><a href="#Add-Emacs-plugin-to-Light-Table-user-behavior" class="headerlink" title="Add Emacs plugin to Light Table user.behavior"></a>Add Emacs plugin to Light Table user.behavior</h4><p>  Finally, we need to edit the Light Table user behaviours to use the Emacs keybindings with the editor.</p><p>  Open the command bar with <code>Ctrl-Space</code> (<code>Cmd-Space</code> on MacOSX) and type <code>behavior</code>, selecting on the <code>Settings: user Behaviours</code> command.</p><p>  In the user behaviours window that opens, edit the configuration by adding the following line to the <code>editor</code> section</p><pre><code>[:editor :lt.plugins.emacs/activate-emacs]</code></pre><p>  The user behaviors configuration should look something like this:</p><p><img src="/images/lighttable-plugins-emacs-behaviors-user-editor-emacs-activate.png" alt="Light Table user behaviors configuration - Emacs activate"></p><blockquote><p>The format of user.behaviour has changed from Light Table version 0.7.0 onwards.  Configuration is now defined using vectors or maps, rather than lists as before.  At the time of writing, the configuration line on the Github repository README.md is incorrect (a <a href="https://github.com/LightTable/Emacs/pull/25" target="_blank" rel="noopener">pull request</a> has been created).</p></blockquote><h4 id="Using-Emacs-keybindings-with-Light-Table"><a href="#Using-Emacs-keybindings-with-Light-Table" class="headerlink" title="Using Emacs keybindings with Light Table"></a>Using Emacs keybindings with Light Table</h4><p>  The Emacs keybindings seem to be exactly what you would expect in Emacs.  Obviously there are a few differences between the design of Light Table and Emacs, although conceptually things seem to work the same.</p><p>  Here are a few keybindings that may not be immediately obvious:</p><p><code>Alt-x</code> - opens the command bar so you can find the command you want by typing - in the same way as you use <code>meta-x</code> in Emacs.</p><p><code>C-x f</code> - open a file using the system file manager (Ctrl-Shift-o in Light Table default keybinding)</p><p><code>C-x C-f</code> - select a file from those added to the Light Table workspace - the Light Table <code>Navigate: Open Navigate</code> command is called.</p><p><code>C-x o</code> - switch to next window tab on the right - similar to the next buffer window in Emacs.</p><p><code>C-x k</code> - close the current tab - similar to killing a buffer, but without a choice.</p><p><code>Alt-g g</code> - go to line.</p><p><code>C-x h</code> - select all.</p><p><code>C-x C-e</code> - evaluate all the code in the current tab.</p><p>  You can see all the Emacs keybindings at the <a href="https://github.com/LightTable/Emacs/blob/master/emacs.keymap" target="_blank" rel="noopener">Emacs Plugin Github repository</a>.</p><p>  Have fun with Light Table and Emacs keybindings.  If you have any modifications of the Emacs keybindings you find useful, please share them in the comments.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://www.lighttable.com/images/logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;  When I &lt;a href=&quot;http://clojure.practical.li&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;teach people Clojure&lt;/a&gt; I use &lt;a href=&quot;http://lighttable.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Light Table&lt;/a&gt; because it is really simple to use and its &lt;em&gt;Instarepl&lt;/em&gt; gives instant feedback of the code as you type it.  This feedback helps you understand Clojure quickly and gives you more confidence when coding.&lt;/p&gt;
&lt;p&gt;  As I do most of my Clojure development (and most everything else) in &lt;a href=&quot;http://www.gnu.org/software/emacs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Emacs&lt;/a&gt; I really miss the excellent Emacs keybindings when I use Light Table.  Luckily there is an &lt;a href=&quot;https://github.com/LightTable/Emacs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Emacs plugin for Light Table&lt;/a&gt;, so here is a quick guide on how to install &amp;amp; use this Emacs plugin.&lt;/p&gt;
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/categories/clojure/"/>
    
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/tags/dev-tools/"/>
    
      <category term="lighttable" scheme="http://jr0cket.co.uk/tags/lighttable/"/>
    
  </entry>
  
  <entry>
    <title>Quick Guide to Github Pull Requests</title>
    <link href="http://jr0cket.co.uk/2014/11/quick-guide-to-github-pull-requests.html"/>
    <id>http://jr0cket.co.uk/2014/11/quick-guide-to-github-pull-requests.html</id>
    <published>2014-11-29T07:02:05.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/24-pull-requests-of-xmas.png" class="img-topic"><p>  This holiday season give the gift of code… or anything else no matter how small to help out your favorite open source project.  By joining the <a href="http://24pullrequests.com/" target="_blank" rel="noopener">24 pull requests website</a> with your Github account, you can challenge yourself to contribute to 24 projects through December.</p><p>  Here is a quick guide to creating pull requests on Github.<br><a id="more"></a></p><h1 id="Contribute-via-a-Github-pull-request"><a href="#Contribute-via-a-Github-pull-request" class="headerlink" title="Contribute via a Github pull request"></a>Contribute via a Github pull request</h1><p>  Find a project you want to contribute to on Github.  On the top right of its page, press the fork button to create your own complete copy of the project in your own account.  This allows you to add changes (commits) to your own fork, which you then share back to the original project. </p><p><img src="/images/github-pull-request-fork-gitbookio-plugin-quizzes.png" alt="Fork a project on Github"></p><p>  Take a copy of your fork using the <code>git clone</code> command:</p><pre><code>git clone git@github.com:jr0cket/plugin-quizzes.git</code></pre><p><img src="/images/github-pull-request-clone-gitbookio-plugin-quizzes.png" alt="Clone your fork"></p><p>   Its very useful to create a branch for the change you are going to make.  If there are project updates while you are creating your contribution or you just mess up so bad you just want to throw your contribution away, then a seperate branch makes this easy.</p><pre><code>git checkout -b doc-plugin-configuration</code></pre><p><img src="/images/github-pull-request-branch-create.png" alt="Fork a project on Github"></p><p>  Edit the files that make up your contribution and test your changes work before you do a local commit.  Here I am updating the README.md file with some clearer instructions on how to add the plugin to your project. </p><pre><code>git add README.md git commit -m &quot;adding instructions on configuring the plugin&quot;</code></pre><p><img src="/images/github-pull-request-commit-locally.png" alt="Fork a project on Github"></p><p>  Now copy your local commit back to your fork of the Github project.  Remember to push the branch you created and not the master branch.</p><pre><code>git push origin doc-plugin-configuration</code></pre><p><img src="/images/github-pull-request-push-to-fork.png" alt="Fork a project on Github"></p><p>  Once you have pushed your branch to your fork, Github gives you the option to create a pull request.</p><p><img src="/images/github-pull-request-create-pull-request.png" alt="Create a Pull Request"></p><p>  When you create the pull request, it uses your commit message as the title of the pull request.  You can also add further information if it helps the project maintainers understand what the change is about and why they should accept it.</p><p><img src="/images/github-pull-request-message-example.png" alt="Pull Request message"></p><p>  Create the pull request and then wait for the project maintainters to talk a look at your change.  If your change has a large green icon next to it, it means it can easily be merged into the project.</p><p><img src="/images/github-pull-request-push-submitted.png" alt="Pull Request submitted"></p><h2 id="Patients-is-a-virtue"><a href="#Patients-is-a-virtue" class="headerlink" title="Patients is a virtue"></a>Patients is a virtue</h2><p>  Its now time to wait for the project maintainers to review your pull request.  If they like what they see and its easy to merge into the project then that may happen fairly quickly.  However, as it’s their project then it is up to them what they accept.  This is why small contributions are better than large, so you can develop good communication with the project maintainers with the minimum of effort.</p><h2 id="Planing-to-contribute-regularly"><a href="#Planing-to-contribute-regularly" class="headerlink" title="Planing to contribute regularly"></a>Planing to contribute regularly</h2><p>  If you want to are going to contribute to a project over time, its a good idea to create your own fork.  Also, once you have cloned your fork, you should also add the original project repository.  </p><pre><code>git remote add upstream git://github.com/project/repository-name</code></pre><p>  Before you make any change or create a new branch for your change, you should get all the latest updates from the original project.</p><pre><code>git pull upstream master</code></pre><h2 id="Updating-your-own-fork"><a href="#Updating-your-own-fork" class="headerlink" title="Updating your own fork"></a>Updating your own fork</h2><p>  If your pull request is accepted then you can pull that commit into your own fork by pulling the changes from the original project and pushing them back to your fork.</p><pre><code>git pull upstream master </code></pre><blockquote><p>If you have other changes in the working copy, you can always use <code>git stash</code> before you pull in order to keep your work safe.  Once you have done a pull you can use <code>git stash pop</code> to restore the changes back to your working copy.</p></blockquote><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/24-pull-requests-of-xmas.png&quot; class=&quot;img-topic&quot;&gt;
&lt;p&gt;  This holiday season give the gift of code… or anything else no matter how small to help out your favorite open source project.  By joining the &lt;a href=&quot;http://24pullrequests.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;24 pull requests website&lt;/a&gt; with your Github account, you can challenge yourself to contribute to 24 projects through December.&lt;/p&gt;
&lt;p&gt;  Here is a quick guide to creating pull requests on Github.&lt;br&gt;
    
    </summary>
    
      <category term="coding" scheme="http://jr0cket.co.uk/categories/coding/"/>
    
    
      <category term="github" scheme="http://jr0cket.co.uk/tags/github/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Contributing to Open Source Projects</title>
    <link href="http://jr0cket.co.uk/2014/11/contributing-to-open-source-projects.html"/>
    <id>http://jr0cket.co.uk/2014/11/contributing-to-open-source-projects.html</id>
    <published>2014-11-28T19:23:39.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/24-pull-requests-of-xmas.png" class="img-topic"><p>  This holiday season give the gift of code… or anything else no matter how small to help out your favorite open source project.  By joining the 24 pull reuests website with your Github account, you can challenge yourself to contribute to 24 projects through December.</p><p>  Here are some reasons why you should contribute to open source projects.<br><a id="more"></a></p><p>  It can seem like a bit task to jump into any open source project, so start by looking for the smallest thing your could contribute.</p><h3 id="Why-contribute-to-Open-Source-Project"><a href="#Why-contribute-to-Open-Source-Project" class="headerlink" title="Why contribute to Open Source Project"></a>Why contribute to Open Source Project</h3><p>  Its simple really, as developers we all use open source projects and we would get less done without them.  It is an opportunity to get more experience outside of your daily routine and is a great way to differentiate yourself should you look for another role.  </p><p>  Look at the open source projects you use regularly, which of those have issues you could help with?</p><h3 id="What-could-I-possibly-contribute"><a href="#What-could-I-possibly-contribute" class="headerlink" title="What could I possibly contribute ?"></a>What could I possibly contribute ?</h3><p>  You don’t need to be the best coder on the planet to contribute, find a simple bug in the issue tracker for the project and have a go.  You should match any coding styles the project uses, even if you dont like them.</p><p>  If you find something you dont understand in the docs, then write an improvement.  I often start contributing by answering some of the simpler issues raised.  Those issues are often from missunderstanding the docs for the project, so it can be an effective way to work out what needs improving.</p><p>  All this frees up the time the project maintainers have to develop the code and tackle larger features and bugs.</p><h2 id="Concered-about-your-code-quality"><a href="#Concered-about-your-code-quality" class="headerlink" title="Concered about your code quality ?"></a>Concered about your code quality ?</h2><p>  There is no such thing as perfect code, so you shouldnt be afraid to share.  </p><p>  To help your code be more useful to the project, you should look out for coding styles used.  Even if you have your own style that you love, you should use the styles already adopted by the project.</p><p>  The smaller the code change you make, the less likely you will make any coding fubar’s and if you do then its easier for the project maintainers to tell you what they would like to see instead.  If you have lots of changes over several files, if the maintainers dont like the first code they see they are likely to just reject the change.</p><h2 id="Using-Github-amp-Pull-Requests"><a href="#Using-Github-amp-Pull-Requests" class="headerlink" title="Using Github &amp; Pull Requests"></a>Using Github &amp; Pull Requests</h2><p>  One of the easiest way to contribute to an open source project is to create a small change and share it back to the original project.  If the project is on Github, you can create a pull request.  A pull request is a message to the original project to invite them to pull a change you made into the original project.</p><p>  You can make a change directly on the projects Github page, or ifs a code change that you want to test then you can fork the project and have your own copy of the project on Github.</p><h3 id="Learning-to-use-Git"><a href="#Learning-to-use-Git" class="headerlink" title="Learning to use Git"></a>Learning to use Git</h3><p>  If you are not up to speed with Git yet, the most useful website I have found it <a href="http://try.github.com" target="_blank" rel="noopener">try.github.com</a>.</p><p>  If you use the Git command line client, then <code>git help &lt;command&gt;</code> is a great way to get help on specific commands.  Alternatively, there is a great online help at <a href="http://git-scm.com/docs/" target="_blank" rel="noopener">git-scm.com/docs</a></p><p>  There is a list of <a href="http://git-scm.com/downloads" target="_blank" rel="noopener">graphical Git clients</a> on the git-scm.com website.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/24-pull-requests-of-xmas.png&quot; class=&quot;img-topic&quot;&gt;
&lt;p&gt;  This holiday season give the gift of code… or anything else no matter how small to help out your favorite open source project.  By joining the 24 pull reuests website with your Github account, you can challenge yourself to contribute to 24 projects through December.&lt;/p&gt;
&lt;p&gt;  Here are some reasons why you should contribute to open source projects.&lt;br&gt;
    
    </summary>
    
      <category term="coding" scheme="http://jr0cket.co.uk/categories/coding/"/>
    
    
      <category term="github" scheme="http://jr0cket.co.uk/tags/github/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Anyone Can Deploy Your App With Heroku Button</title>
    <link href="http://jr0cket.co.uk/2014/08/anyone-can-deploy-your-app-with-heroku-button.html"/>
    <id>http://jr0cket.co.uk/2014/08/anyone-can-deploy-your-app-with-heroku-button.html</id>
    <published>2014-08-11T08:53:22.000Z</published>
    <updated>2022-01-02T20:20:15.290Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/heroku-logo.png" class="img-thumbnail"><p><a href="https://devcenter.heroku.com/articles/heroku-button" target="_blank" rel="noopener">Heroku Button</a> provides a quick &amp; easy way for anyone to deploy your apps, for free, with just a browser.  Simply <a href="https://devcenter.heroku.com/articles/heroku-button#creating-the-app-json-file" target="_blank" rel="noopener">create a manifest file for your app</a> and add the <a href="https://devcenter.heroku.com/articles/heroku-button#adding-the-heroku-button" target="_blank" rel="noopener">Heroku Button code</a> to your Github repository or Website.  Heroku takes care of the rest (server, database, deployment, scaling etc).  </p><p>Experience Heroku Button for yourself with our <a href="https://heroku.com/deploy?template=https://github.com/heroku/node-js-sample" target="_blank" rel="noopener">simple NodeJS app</a>. </p><a id="more"></a><p>Once you press the Heroku Button, you see a deployment page for you app.  The name, description and logo come from the <code>app.json</code> manifest file.</p><img src="/images/heroku-button-sample-nodejs.png" class="img-code"><p>Once you press the <em>Deploy for Free</em> button, Heroku does the work and creates a new App for you live on the Internet</p><img src="/images/heroku-button-deploy-results.png" class="img-code"><p>Now you can view your app as well as access your own copy of the code.</p><h1 id="Why-use-Heroku-Button"><a href="#Why-use-Heroku-Button" class="headerlink" title="Why use Heroku Button"></a>Why use Heroku Button</h1><p>Here are just a few thoughts about why you may want to use Heroku Button.</p><h2 id="App-Creators"><a href="#App-Creators" class="headerlink" title="App Creators"></a>App Creators</h2><p>Its easy to show off your work to prospective employers so they can be quickly impressed by your skills.  You can also share your apps with your friends and co-workers as well as making it easy to test your app at any time.</p><h2 id="Framework-developers"><a href="#Framework-developers" class="headerlink" title="Framework developers"></a>Framework developers</h2><p>Share demos that allow developers to understand the benefits of your framework quickly and show off what they could create.</p><h2 id="Hackathon-teams"><a href="#Hackathon-teams" class="headerlink" title="Hackathon teams"></a>Hackathon teams</h2><p>Provide an easy way for judges to play around with your app, so they can get a better appreciation of what you have created</p><h1 id="Creating-your-first-button"><a href="#Creating-your-first-button" class="headerlink" title="Creating your first button"></a>Creating your first button</h1><p>Creating an Heroku Button for your app is very simple and has 2 parts to it:</p><p>1) Create an app manifest file for your project - <code>app.json</code><br>2) Add the Heroku Button to your Github Repository or any website (code provided)</p><p>The only requirement is that your code be available via a public repository on Github or other git repository  </p><h2 id="Create-an-app-manifest-file"><a href="#Create-an-app-manifest-file" class="headerlink" title="Create an app manifest file"></a>Create an app manifest file</h2><p>Create an <code>app.json</code> file in the root of your project.  This file contains the name, description and an image link for your app (eg. a logo).  This should provide people with an understanding of what they are going to deploy.</p><p>The <code>app.json</code> file should also contain any configuration (environment) variables and Heroku addons (databases, etc) your app needs.</p><h2 id="Example-manifest-file"><a href="#Example-manifest-file" class="headerlink" title="Example manifest file"></a>Example manifest file</h2><p>The Heroku example NodeJS app is very easy to define in the manifest file, as it does not use any Heroku addons or require any environment variables.  The app itself is assembled on Heroku using Node Pakage manager and <a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs" target="_blank" rel="noopener">Heroku support for NodeJS apps</a>.</p><figure class="highlight json"><figcaption><span>app.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Node.js Sample"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"A barebones Node.js app using Express 4"</span>,</span><br><span class="line">  <span class="attr">"repository"</span>: <span class="string">"https://github.com/heroku/node-js-sample"</span>,</span><br><span class="line">  <span class="attr">"logo"</span>: <span class="string">"https://node-js-sample.herokuapp.com/node.svg"</span>,</span><br><span class="line">  <span class="attr">"keywords"</span>: [<span class="string">"node"</span>, <span class="string">"express"</span>, <span class="string">"static"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Adding-Heroku-Button-for-your-app"><a href="#Adding-Heroku-Button-for-your-app" class="headerlink" title="Adding Heroku Button for your app"></a>Adding Heroku Button for your app</h2><p>You could just use a URL link to deploy you app, however, Heroku has provided you with a button image and all the code you need to use it.  Using a button makes it very obvious to see that your app is easily deployable.</p><p><strong>Markdown</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![Deploy my app to Heroku</span>](<span class="link">https://www.herokucdn.com/deploy/button.png</span>)]</span><br><span class="line">  (https://heroku.com/deploy?template=https://github.com/heroku/node-js-sample)</span><br></pre></td></tr></table></figure><blockquote><p>If you expect people to fork your Github repository and want them to deploy their own versions of the code, you can omit the template query parameter (everything after the <code>?</code>).  Heroku Button will infer its the repository the button was clicked on if there is no parameter.</p></blockquote><p><strong>HTML</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://heroku.com/deploy?template=https://github.com/heroku/node-js-sample"</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://www.herokucdn.com/deploy/button.png"</span> <span class="attr">alt</span>=<span class="string">"Deploy my App to Heroku"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>If you are using HTML you can of course add any styles you want to the button using CSS.</p></blockquote><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Heroku Button enables anyone to play with your apps, encouraging them to give you meaningful feedback and showing them what they can create if they get involved with your project.</p><p>If you create an Heroku Button with your app, please tweet about it using <a href="https://twitter.com/search?q=%23herokubutton" target="_blank" rel="noopener">#herokubutton</a>.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/heroku-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-button&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Heroku Button&lt;/a&gt; provides a quick &amp;amp; easy way for anyone to deploy your apps, for free, with just a browser.  Simply &lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-button#creating-the-app-json-file&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;create a manifest file for your app&lt;/a&gt; and add the &lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-button#adding-the-heroku-button&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Heroku Button code&lt;/a&gt; to your Github repository or Website.  Heroku takes care of the rest (server, database, deployment, scaling etc).  &lt;/p&gt;
&lt;p&gt;Experience Heroku Button for yourself with our &lt;a href=&quot;https://heroku.com/deploy?template=https://github.com/heroku/node-js-sample&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;simple NodeJS app&lt;/a&gt;. &lt;/p&gt;
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="heroku" scheme="http://jr0cket.co.uk/tags/heroku/"/>
    
  </entry>
  
  <entry>
    <title>Staging Patches for Cleaner Git Commits</title>
    <link href="http://jr0cket.co.uk/2014/07/staging-patches-with-git-for-cleaner-commits.html"/>
    <id>http://jr0cket.co.uk/2014/07/staging-patches-with-git-for-cleaner-commits.html</id>
    <published>2014-07-15T21:58:36.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/git-logo.png" class="img-thumbnail"><p>Some times you work on your code or configuration files and realise you have made more changes than sensibly fit into one commit.  Using patches you can easily select only the changes want rather than adding all the changes in a file.  You dont even have to create a seperate patch file.</p><a id="more"></a><p>You can use the git via the interactive mode <code>git add -i</code>, however its just as easy to use the command <code>git add --patch</code> or its short form <code>git add -p</code>.  The <code>--patch</code> or <code>-p</code> option allows you to select what git calls <em>hunks</em>, lines git sees as a change within a file.  A hunk may be a change to one line or changes across several lines grouped together. </p><pre><code>git add -p .</code></pre><p>This command will prompt to you accept each <em>hunk</em> through all the files that have modifications since the last commit.</p><p>If you just want to pick out changes from a specific file or collection of files you can narrow the scope by specifying the filename or filename pattern</p><pre><code>git add -p filenamegit add -p *.md git add -p config.*</code></pre><h1 id="An-example"><a href="#An-example" class="headerlink" title="An example"></a>An example</h1><p>In this example there are several lines of changes in the <code>article.styl</code> file.  Using the <code>git add -p</code> command we are shown each <em>hunk</em> in turn as a diff, so we can compare the current version with the changes in the <em>hunk</em>.  We then decide if we want to add the changed lines or not.  </p><p>We say yes to the first <em>hunk</em> and no to the second.</p><img src="/images/hexo-theme-git-staging-patches.png" class="img-code"><p>Once we have added or ingnored all the <em>hunks</em> in the file the interactive staging ends.  If we are ready we can then do a commit as normal.</p><h1 id="Splitting-the-hunks"><a href="#Splitting-the-hunks" class="headerlink" title="Splitting the hunks"></a>Splitting the hunks</h1><p>Sometimes git chooses hunks that include too many changes.  If we see a hunk we want to break down during the interactive staging, we can select the <code>s</code> option.  We are then shown the same <em>hunk</em> aft it has been split.</p><p>In the following example, our editor has added a new line to the file that we added a twitter account to.  We only want to add the twitter account, so split the hunk to get the twitter line as its own <em>hunk</em>.</p><p>Then we add the <em>hunk</em> with the twitter change in it by selecting <code>y</code> and do not include the new line change by skipping the next <em>hunk</em> by pressing <code>n</code>.</p><img src="/images/git-staging-interactive-split-hunk.png" class="img-code"><h1 id="More-Interactive-Staging-options"><a href="#More-Interactive-Staging-options" class="headerlink" title="More Interactive Staging options"></a>More Interactive Staging options</h1><p>There are many more options to help you when your are staging changes interactively.  Using the <code>?</code> key at any time during interactive staging will show you a brief description of those options.</p><img src="/images/git-staging-interactive-options.png" class="image-code"><p>For more detailed descriptoin of interactive staging and the options available, see the git manpages via the command <code>git help add</code> or <a href="http://git-scm.com/docs/git-add" target="_blank" rel="noopener">git add documentation online</a>.</p><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>By staging patches I can very easily see the exact changes I am assembling for my next commit.  I can then include only the code &amp; configuration changes that are ready to be part of the next commit.</p><p>Using this patch technique for staging avoids unstaging files (git reset -soft), editing them and then adding them again.  That is a real pain.</p><p>And finally, staging patches keeps my commits nice and simple and focused.  I get a detailed and accurate history of my changes and that makes its really easy for others to merge or cherry-pick my commits.</p><p>Read the <a href="http://git-scm.com/book/en/Git-Tools-Interactive-Staging" target="_blank" rel="noopener">Git-scm guide on Interactive Staging</a> if you want to see more tooling around this topic.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/git-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Some times you work on your code or configuration files and realise you have made more changes than sensibly fit into one commit.  Using patches you can easily select only the changes want rather than adding all the changes in a file.  You dont even have to create a seperate patch file.&lt;/p&gt;
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Cycling Through Emacs Buffers Easily</title>
    <link href="http://jr0cket.co.uk/2014/07/cycling-through-emacs-buffers-easily.html"/>
    <id>http://jr0cket.co.uk/2014/07/cycling-through-emacs-buffers-easily.html</id>
    <published>2014-07-13T11:27:39.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail"><p>Once you have more buffers (files) open than windows in Emacs, then having a quick way to cycle through buffers is invaluable.  Even with 4 windows open, I still find myself using IBuffer, <code>C-c C-x</code>, many times.</p><p>Sometimes I just want to switch between the current and previous buffer in the same window.  So this is how I tweaked my Emacs configuration (based on Emacs Live) to cycle through buffers.</p><a id="more"></a><h1 id="Cycling-through-buffers"><a href="#Cycling-through-buffers" class="headerlink" title="Cycling through buffers"></a>Cycling through buffers</h1><p>Emacs has two functions to move through buffers in the current window, <code>next-buffer</code> and <code>previous-buffer</code>.  These can be called in the usual way using <code>Meta-x</code>:</p><pre><code>M-x next-bufferM-x previous-buffer</code></pre><p>Using these functions is quick than firing up an IBuffer, however if we create some good keybindings then we can cycle buffers even faster.</p><h1 id="Creating-keybindings"><a href="#Creating-keybindings" class="headerlink" title="Creating keybindings"></a>Creating keybindings</h1><p>I already have several keybindings defined in my Emacs Live personal pack, so I simply add two more keybindings.  The file I put my keybindings in is called <code>~/.live-packs/jr0cket-pack/config/keybindings.el</code> and these bindings are loaded by adding the following line to <code>~/.live-packs/jr0cket-pack/init.el</code></p><pre><code>(live-load-config-file &quot;keybindings.el&quot;)</code></pre><p>The key combination I decided to use was <code>Ctrl - PageUp</code> for previous button and <code>Ctrl - PageDown</code> for the next buffer.</p><pre><code>;; Set keybindings for cycling buffers(global-set-key [C-prior] &apos;previous-buffer)(global-set-key [C-next] &apos;next-buffer)</code></pre><blockquote><p>The PageUp key is referenced by the name prior and the PageDown key is referenced by the name next. </p></blockquote><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/emacs-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Once you have more buffers (files) open than windows in Emacs, then having a quick way to cycle through buffers is invaluable.  Even with 4 windows open, I still find myself using IBuffer, &lt;code&gt;C-c C-x&lt;/code&gt;, many times.&lt;/p&gt;
&lt;p&gt;Sometimes I just want to switch between the current and previous buffer in the same window.  So this is how I tweaked my Emacs configuration (based on Emacs Live) to cycle through buffers.&lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/tags/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Theme - Creating Image Styles</title>
    <link href="http://jr0cket.co.uk/2014/06/hexo-theme-creating-image-styles.html"/>
    <id>http://jr0cket.co.uk/2014/06/hexo-theme-creating-image-styles.html</id>
    <published>2014-06-20T17:38:18.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p>Adding images to a blog post helps the audience undersand what the will get from reading the article and if it will be relevant for the.  Images also aid the understanding of the topic you are covering, especially if you are explaining something technical or more complicated.</p><p>The default theme for hexo only provides a single image style, so here I will create several styles of image to help convey the topic and details of every post.</p><a id="more"></a><h1 id="Adding-image-logos-to-posts"><a href="#Adding-image-logos-to-posts" class="headerlink" title="Adding image logos to posts"></a>Adding image logos to posts</h1><p>I like to have logos on images to provide a quick visual way to identify the topic of an article.  This is similar to other sites such as <a href="http://slashdot.org" target="_blank" rel="noopener">Slashdot</a>.  </p><p>If I simply add an image then it will be placed in the middle of the article area, this does not look that great and takes up a lot of space.</p><img src="/images/hexo-theme-image-default-style.png" class="img-code"><p>To make better use of space and improve the design, I created a style called <code>img-thumbnail</code>.  The style ensures that each image displays on the left and be no bigger than 240 pixels wide and 96 pixels high.</p><figure class="highlight css"><figcaption><span>/themes/landscape/source/css/_partial/article.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.img-thumbnail</span></span><br><span class="line">  <span class="selector-tag">max-width</span>: 240<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">max-height</span>: 96<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">display</span>: <span class="selector-tag">block</span></span><br><span class="line">  <span class="selector-tag">margin-right</span>: 12<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">margin-top</span>: 12<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">float</span>: <span class="selector-tag">left</span></span><br><span class="line">  <span class="selector-tag">clear</span>: <span class="selector-tag">left</span></span><br></pre></td></tr></table></figure><p>Here is an example of what the <code>img-thumbnail</code> style looks like in the websites</p><img src="/images/hexo-theme-images-style-thumbnail.png" class="img-code"><h1 id="Adding-image-style-for-screenshots"><a href="#Adding-image-style-for-screenshots" class="headerlink" title="Adding image style for screenshots"></a>Adding image style for screenshots</h1><p>Some images will be screenshots of the command line, code and developer tools in actoin.  These images will be centrally placed as normal, but will have specific height and with contraints to make sure all the images are big enough to view yet stil fit on the page.</p><figure class="highlight css"><figcaption><span>/themes/landscape/source/css/_partial/article.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.img-screenshot</span></span><br><span class="line">  <span class="selector-tag">max-width</span>: 640<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">max-height</span>: 320<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">display</span>: <span class="selector-tag">block</span> </span><br><span class="line">  <span class="selector-tag">margin-left</span>: <span class="selector-tag">auto</span></span><br><span class="line">  <span class="selector-tag">margin-right</span>: <span class="selector-tag">auto</span>  </span><br></pre></td></tr></table></figure><p>Here is an example of what the <code>img-screenshot</code> style looks like in the websites</p><img src="/images/hexo-theme-image-code.png" class="img-code"><h1 id="Adding-images-for-topics-discussed"><a href="#Adding-images-for-topics-discussed" class="headerlink" title="Adding images for topics discussed"></a>Adding images for topics discussed</h1><p>During an article I may talk about several different topics and what to visually highlight what topic is being disscussed.  So again I created another image style, this time placing the image on the right hand side of the content and allowing a bigger size.</p><figure class="highlight css"><figcaption><span>/themes/landscape/source/css/_partial/article.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.img-topic</span></span><br><span class="line">  <span class="selector-tag">max-width</span>: 360<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">max-height</span>: 1800<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">display</span>: <span class="selector-tag">block</span> </span><br><span class="line">  <span class="selector-tag">margin-left</span> 12<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">margin-right</span>: 12<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">float</span>: <span class="selector-tag">right</span></span><br><span class="line">  <span class="selector-tag">clear</span>: <span class="selector-tag">right</span></span><br></pre></td></tr></table></figure><p>Here is an example of what the <code>img-topic</code> style looks like in the websites</p><img src="/images/hexo-theme-images-style-topic.png" class="img-code"><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>By setting up different styles it makes it very easy to layout images in an article, using just one style name.  This helps me make each blog post more visually appealing to look at and therefore a better experience for the reader (and myself).</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Adding images to a blog post helps the audience undersand what the will get from reading the article and if it will be relevant for the.  Images also aid the understanding of the topic you are covering, especially if you are explaining something technical or more complicated.&lt;/p&gt;
&lt;p&gt;The default theme for hexo only provides a single image style, so here I will create several styles of image to help convey the topic and details of every post.&lt;/p&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Theme - Using Ubuntu Google Fonts</title>
    <link href="http://jr0cket.co.uk/2014/06/hexo-theme-using-ubuntu-google-fonts.html"/>
    <id>http://jr0cket.co.uk/2014/06/hexo-theme-using-ubuntu-google-fonts.html</id>
    <published>2014-06-16T22:37:17.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p>The font that comes with the default hexo fault is quite nice, however, I like using the Ubuntu font especially for code.  As the Hexo theme uses Google fonts in some places already, then it was really easy to change which one Hexo uses.  Here I will show you how to change over to the Ubuntu font family for text and sorce code using <a href="http://www.google.com/fonts" target="_blank" rel="noopener">Google Fonts</a>.</p><a id="more"></a><h1 id="Defining-fonts-in-Hexo"><a href="#Defining-fonts-in-Hexo" class="headerlink" title="Defining fonts in Hexo"></a>Defining fonts in Hexo</h1><p>As Hexo uses Google Fonts by default, then you can simply define which font you want by using the font name.  The default Heox theme, landscape, uses a file called <code>source/css/_variables.styl</code> to define common variables, such as fonts.  </p><p>Viewing the <code>_variables.styl</code> file you can see the fonts that Hexo uses by default, which are assigned to three variables:</p><ul><li>font-sans</li><li>font-serif</li><li>font-mono - (source code) </li><li>font-icon - (icons in navbar) </li></ul><blockquote><p>Font-icon is configured to use Font Awesome to make it quick and simple to add logos such as twitter, facebook, linkedIn and RSS feeds.  Using font icons is more efficient than using image files as they are scalable, so no need for multiple image files for the logos.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Fonts</span><br><span class="line">font-sans = &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif</span><br><span class="line">font-serif = Georgia, &quot;Times New Roman&quot;, serif</span><br><span class="line">font-mono = &quot;Source Code Pro&quot;, Consolas, Monaco, Menlo, Consolas, monospace</span><br><span class="line">font-icon = FontAwesome</span><br><span class="line">font-icon-path = &quot;fonts/fontawesome-webfont&quot;</span><br><span class="line">font-icon-version = &quot;4.0.3&quot;</span><br><span class="line">font-size = 14px</span><br><span class="line">line-height = 1.6em</span><br><span class="line">line-height-title = 1.1em</span><br></pre></td></tr></table></figure><p>This is what the fonts in the hexo default theme look like: </p><img src="/images/hexo-theme-original-fonts.png" class="img-code"> <h1 id="Updating-Hexo-to-use-the-Ubuntu-fonts"><a href="#Updating-Hexo-to-use-the-Ubuntu-fonts" class="headerlink" title="Updating Hexo to use the Ubuntu fonts"></a>Updating Hexo to use the Ubuntu fonts</h1><p>I prefer to use the Ubunt fonts, for text and for source code.  So I updated the <code>source/css/_variables.styl</code> file with Ubuntu for the font-sans and font-serif variables and Ubuntu Mono for the font-mono variable.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Fonts</span><br><span class="line">font-sans = Ubuntu, sans-serif</span><br><span class="line">font-serif = Ubuntu, serif</span><br><span class="line">font-mono = &quot;Ubuntu Mono&quot;, monospace</span><br><span class="line">font-icon = FontAwesome</span><br><span class="line">font-icon-path = &quot;fonts/fontawesome-webfont&quot;</span><br><span class="line">font-icon-version = &quot;4.0.3&quot;</span><br><span class="line">font-size = 14px</span><br><span class="line">line-height = 1.6em</span><br><span class="line">line-height-title = 1.1em</span><br></pre></td></tr></table></figure><p>Using Ubuntu fonts just works on my laptop, as I use Ubuntu as my operating system and the Ubuntu fonts are just there.  When I publish my Hexo website, I cant guarantee everyone is using Ubuntu so I use Google Fonts to spread the Ubuntu font love.</p><h1 id="Google-Fonts"><a href="#Google-Fonts" class="headerlink" title="Google Fonts"></a>Google Fonts</h1><p>Google fonts are a wide range of open fonts hosted in the cloud and part of a content delivery network (CDN).  This means that a whole range of fonts are freely availble to be used in your own websites and apps.  The content delivery network ensures these fonts are loaded (relatively) quickly anywhere in the world. </p><p>You can browse the fonts avaible for use and see the code to include them in your websites by visiting <a href="http://www.google.com/fonts" target="_blank" rel="noopener">google.com/fonts</a></p><p>To keep these fonts as lightweight as possible whilst loading into the browser, I chose only the Ubuntu fonts I needed.  In this case, I chose the Ubuntu Normal and Italic fonts at 400 weight and bold at 700 weight </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://fonts.googleapis.com/css?family=Ubuntu:400,700,400italic"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>I also want to show code in the Ubuntu Mono typeface at both 400 and 700 weight for normal and bold text respectively.  Google Fonts website generates me the following link I can use in my Hexo website.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://fonts.googleapis.com/css?family=Ubuntu+Mono:400,700|Ubuntu:400,700,400italic"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Adding-the-Ubuntu-Google-Fonts-to-Hexo"><a href="#Adding-the-Ubuntu-Google-Fonts-to-Hexo" class="headerlink" title="Adding the Ubuntu Google Fonts to Hexo"></a>Adding the Ubuntu Google Fonts to Hexo</h1><p>I updated my custom theme to use the Ubuntu Google fonts by editing the <code>layout/_partial/head.ejs</code> file.  This already had a Google Font for Source Code Pro, so I simply replaced that line with the new URL I got from Google Fonts as above.</p><figure class="highlight html"><figcaption><span>layout/_partial/head.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">title</span>)&#123; %&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span> | <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">config.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">open_graph</span>(&#123;<span class="attr">twitter_id:</span> <span class="attr">theme.twitter</span>, <span class="attr">google_plus:</span> <span class="attr">theme.google_plus</span>, <span class="attr">fb_admins:</span> <span class="attr">theme.fb_admins</span>, <span class="attr">fb_app_id:</span> <span class="attr">theme.fb_app_id</span>&#125;) %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.rss</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternative"</span> <span class="attr">href</span>=<span class="string">"&lt;%- theme.rss %&gt;"</span> <span class="attr">title</span>=<span class="string">"&lt;%= config.title %&gt;"</span> <span class="attr">type</span>=<span class="string">"application/atom+xml"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.favicon</span>)&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"&lt;%- theme.favicon %&gt;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://fonts.googleapis.com/css?family=Ubuntu+Mono:400,700|Ubuntu:400,700,400italic"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">css</span>('<span class="attr">css</span>/<span class="attr">style</span>') %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">google-analytics</span>') %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Line 10: Ubuntu fonts included from Google Fonts</p></blockquote><p>When Hexo generates all the theme files, the Google Docs URL for the Ubuntu fonts gets included in the head part of all pages.  This ensures that even thought without Ubuntu fonts installed on their device will see the page with Ubuntu fonts.</p><h1 id="Testing-the-font-change"><a href="#Testing-the-font-change" class="headerlink" title="Testing the font change"></a>Testing the font change</h1><p>Changes to the <code>source/css/_variables.styl</code> file are picked up straight away if you are running the command <code>hexo server</code>, so all you would need to do is refresh your browser.</p><p>Hexo with the Ubuntu fonts looks like:</p><img src="/images/hexo-theme-ubuntu-fonts.png" class="img-code"><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Changing to Ubuntu fonts or any other Google font is pretty easy with Hexo.  It may not seem a big change that I have made, but as I refer to my blog many times during the week (and sometime many times a day), its nice to have a font that I find pleasing to read.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;The font that comes with the default hexo fault is quite nice, however, I like using the Ubuntu font especially for code.  As the Hexo theme uses Google fonts in some places already, then it was really easy to change which one Hexo uses.  Here I will show you how to change over to the Ubuntu font family for text and sorce code using &lt;a href=&quot;http://www.google.com/fonts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google Fonts&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Tips When Upgrading to 2.6.x Onwards</title>
    <link href="http://jr0cket.co.uk/2014/06/hexo-tips-when-upgrading-to-26x-onwards.html"/>
    <id>http://jr0cket.co.uk/2014/06/hexo-tips-when-upgrading-to-26x-onwards.html</id>
    <published>2014-06-04T19:35:06.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p>Hexo has a bit of a refactor from version 2.6 onwards to make it a bit more flexible with regard to the node modules it uses.  So when you create a new Hexo project you have to add some module to that project before you can generate your site.  This is an easy step as its managed by the Node package manager (npm).  </p><blockquote><p>There are more details about <a href="https://github.com/tommy351/hexo/wiki/Migrating-from-2.5-to-2.6" target="_blank" rel="noopener">migration steps on the Hexo Github project</a>.  </p></blockquote><p>Here are the essential details and options for upgrading to Hexo 2.6 onwards.</p><a id="more"></a><h1 id="Check-your-version-of-Hexo"><a href="#Check-your-version-of-Hexo" class="headerlink" title="Check your version of Hexo"></a>Check your version of Hexo</h1><p>You can easily check the version of Hexo you are using with the following command:</p><pre><code>hexo -v </code></pre><p>This should give you output similar to:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hexo: 2.5.3</span><br><span class="line">os: Linux 3.11.0-20-generic linux x64</span><br><span class="line">http_parser: 1.0</span><br><span class="line">node: 0.10.26</span><br><span class="line">v8: 3.14.5.9</span><br><span class="line">ares: 1.9.0-DEV</span><br><span class="line">uv: 0.10.25</span><br><span class="line">zlib: 1.2.3</span><br><span class="line">modules: 11</span><br><span class="line">openssl: 1.0.1e</span><br></pre></td></tr></table></figure><h1 id="Upgrading-Hexo"><a href="#Upgrading-Hexo" class="headerlink" title="Upgrading Hexo"></a>Upgrading Hexo</h1><p>Upgrading Hexo is as easy as installing Hexo in the first place.  Simply use node package manager to install the latest version</p><pre><code>npm install -g hexo </code></pre><blockquote><p>The above command uses the global option, -g, so anyone can run hexo.  If you have installed Hexo in a directory not owned by your operating system account (eg. <code>/usr/local/</code> or <code>/opt</code>) then you should use <code>sudo</code> in front of this command, ie. <code>sudo npm install -g hexo</code></p></blockquote><h1 id="Checking-the-version-of-Hexo-again"><a href="#Checking-the-version-of-Hexo-again" class="headerlink" title="Checking the version of Hexo again"></a>Checking the version of Hexo again</h1><p>As before, you can check you are running the latest version of hexo using the command:</p><pre><code>hexo -v</code></pre><p>This time you should have a newer version:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hexo: 2.7.1</span><br><span class="line">os: Linux 3.11.0-23-generic linux x64</span><br><span class="line">http_parser: 1.0</span><br><span class="line">node: 0.10.26</span><br><span class="line">v8: 3.14.5.9</span><br><span class="line">ares: 1.9.0-DEV</span><br><span class="line">uv: 0.10.25</span><br><span class="line">zlib: 1.2.3</span><br><span class="line">modules: 11</span><br><span class="line">openssl: 1.0.1e</span><br></pre></td></tr></table></figure><p>As I am only upgrading Hexo to a new vesion, only it has a new version.  The other components are all the same version.</p><h1 id="Adding-modules-to-new-Hexo-projects"><a href="#Adding-modules-to-new-Hexo-projects" class="headerlink" title="Adding modules to new Hexo projects"></a>Adding modules to new Hexo projects</h1><p>When you create a new Hexo project with the command <code>hexo init</code>, the names of the extra node modules are written to the <code>package.json</code> file.  So all that is needed is to run the node package manager</p><pre><code>hexo init my-projectcd my-projectnpm install</code></pre><h1 id="Adding-modules-to-an-existing-project"><a href="#Adding-modules-to-an-existing-project" class="headerlink" title="Adding modules to an existing project"></a>Adding modules to an existing project</h1><p>If you have a project that was created before Hexo version 2.6, you need to reinitialise the Hexo project.  To do this, change into the hexo directory and run the command:</p><pre><code>cd my-existing-projecthexo init</code></pre><p>The <code>hexo init</code> command updates the <code>package.json</code> file with the names of the required modules.  Then as with a new project you run the node package manager to fetch and install the modules:</p><pre><code>npm install</code></pre><h1 id="Manually-updating-an-existing-Hexo-project"><a href="#Manually-updating-an-existing-Hexo-project" class="headerlink" title="Manually updating an existing Hexo project"></a>Manually updating an existing Hexo project</h1><p>If you want to control over what is being changed in your Hexo project nodejs packages, you can add each package seperately.  Here we are using the <code>npm</code> option <code>--save</code> to ensure the package is added to the <code>packages.json</code> file for the Hexo project.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-ejs --save</span><br><span class="line">npm install hexo-renderer-stylus --save</span><br><span class="line">npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure><h1 id="Troubleshooting-Hexo-not-working-after-upgrade"><a href="#Troubleshooting-Hexo-not-working-after-upgrade" class="headerlink" title="Troubleshooting: Hexo not working after upgrade"></a>Troubleshooting: Hexo not working after upgrade</h1><p>If all goes wrong then try uninstalling hexo and install again (the classic IT approach).</p><pre><code>npm remove hexo     npm install hexo -g </code></pre><p>Then check the version again to see if the new hexo will run.</p><pre><code>hexo -v</code></pre><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Hexo has a bit of a refactor from version 2.6 onwards to make it a bit more flexible with regard to the node modules it uses.  So when you create a new Hexo project you have to add some module to that project before you can generate your site.  This is an easy step as its managed by the Node package manager (npm).  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are more details about &lt;a href=&quot;https://github.com/tommy351/hexo/wiki/Migrating-from-2.5-to-2.6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;migration steps on the Hexo Github project&lt;/a&gt;.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are the essential details and options for upgrading to Hexo 2.6 onwards.&lt;/p&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Custom Theme - Styling Code Snippets</title>
    <link href="http://jr0cket.co.uk/2014/06/hexo-custom-theme---styling-code-snippets.html"/>
    <id>http://jr0cket.co.uk/2014/06/hexo-custom-theme---styling-code-snippets.html</id>
    <published>2014-06-04T05:34:28.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p>The hexo theme shows code in a solid black box with syntax hightlghting to match.  It gives a nice contrast to the rest of the content, however I wanted to add curves to the corner of the code boxes.  I also wanted to  add a margin / padding around the code box so it did not touch the edges of the post.</p><a id="more"></a><h1 id="Add-corners-to-the-code-box"><a href="#Add-corners-to-the-code-box" class="headerlink" title="Add corners to the code box"></a>Add corners to the code box</h1><p>Values for commonly used styles are defined as variables in the file <code>source/css/_variables.styl</code>.  This makes it easy to redefine a style across the whole theme with a single change.</p><p>In this case, I defined a <code>code-border-radius</code> variable and gave it a value of 10px.</p><figure class="highlight"><figcaption><span>source/css/_partial/header.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code-border-radius = 10px </span><br></pre></td></tr></table></figure><p>I edited the <code>source/css/_partial/highlight.styl</code> file and added definitions to the <code>$code-block</code> style: </p><ul><li><code>boarder-radius</code> adds a cure to the corner using size defined in the variable <code>code-border-radius</code></li><li><code>background: #333</code> - why did I add this ?</li><li><code>margin: 1px 10px 1px 10px</code> puts a space of 10 pixels at the left and right of the code block, as well as a 1 pixel space above and below</li><li><code>border: 3px solid #EEEEEE;</code> adds a discrete white boarder around the codeblock to make it blend into the page gracefully.</li></ul><p>The updated <code>$code-block</code> style now looks like (added lines 11-14):</p><figure class="highlight css"><figcaption><span>source/css/_partial/highlight.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$code-block</span><br><span class="line">  <span class="selector-tag">background</span>: <span class="selector-tag">highlight-background</span></span><br><span class="line">  <span class="selector-tag">margin</span>: 0 <span class="selector-tag">article-padding</span> * <span class="selector-tag">-1</span></span><br><span class="line">  <span class="selector-tag">padding</span>: 15<span class="selector-tag">px</span> <span class="selector-tag">article-padding</span></span><br><span class="line">  <span class="selector-tag">border-style</span>: <span class="selector-tag">solid</span></span><br><span class="line">  <span class="selector-tag">border-color</span>: <span class="selector-tag">color-border</span></span><br><span class="line">  <span class="selector-tag">border-width</span>: 1<span class="selector-tag">px</span> 0</span><br><span class="line">  <span class="selector-tag">overflow</span>: <span class="selector-tag">auto</span></span><br><span class="line">  <span class="selector-tag">color</span>: <span class="selector-tag">highlight-foreground</span></span><br><span class="line">  <span class="selector-tag">line-height</span>: <span class="selector-tag">font-size</span> * <span class="selector-tag">line-height</span></span><br><span class="line">  <span class="selector-tag">border-radius</span>: <span class="selector-tag">code-border-radius</span></span><br><span class="line">  <span class="selector-tag">background</span>: <span class="selector-id">#333</span>;</span><br><span class="line">  <span class="selector-tag">margin</span>: 1<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> 10<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">border</span>: 3<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#EEEEEE</span>;</span><br></pre></td></tr></table></figure><p> I didnt make any further changes in to the theme in the <code>highlight.styl</code> file.  However, there are other things in this file you may want to modify.</p><h2 id="Line-numbers"><a href="#Line-numbers" class="headerlink" title="Line numbers"></a>Line numbers</h2><p> The hexo theme makes the line numbers smaller in font size and makes the numbers look faded by using colour number 666.  This looked good to me, so I didnt change these styles.</p> <figure class="highlight css"><figcaption><span>source/css/_partial/highlight.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$line-numbers</span><br><span class="line"> <span class="selector-tag">color</span>: <span class="selector-id">#666</span></span><br><span class="line"> <span class="selector-tag">font-size</span>: 0<span class="selector-class">.85em</span></span><br></pre></td></tr></table></figure><h2 id="More-customisation-possible"><a href="#More-customisation-possible" class="headerlink" title="More customisation possible"></a>More customisation possible</h2><p>There is a whole range of settings that affect the code-block and other highlighted areas of articles in the <code>highlight.styl</code> file, however I did feel the need to make any changes here.  </p><p>If I get tired of the black background for code I could change it here, although I’d need to check the colours used for syntax highlighting still worked with the new code background.</p> <figure class="highlight css"><figcaption><span>source/css/_partial/highlight.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.article-entry</span></span><br><span class="line"> <span class="selector-tag">pre</span>, <span class="selector-tag">code</span></span><br><span class="line">   <span class="selector-tag">font-family</span>: <span class="selector-tag">font-mono</span></span><br><span class="line"> <span class="selector-tag">code</span></span><br><span class="line">   <span class="selector-tag">background</span>: <span class="selector-tag">color-background</span></span><br><span class="line">   <span class="selector-tag">text-shadow</span>: 0 1<span class="selector-tag">px</span> <span class="selector-id">#fff</span></span><br><span class="line">   <span class="selector-tag">padding</span>: 0 0<span class="selector-class">.3em</span></span><br><span class="line"> <span class="selector-tag">pre</span></span><br><span class="line">   <span class="keyword">@extend</span> $code-block</span><br><span class="line">   code</span><br><span class="line">     <span class="attribute">background:</span> none</span><br><span class="line">     <span class="attribute">text-shadow:</span> none</span><br><span class="line">     <span class="attribute">padding:</span> <span class="number">0</span></span><br><span class="line"> .highlight</span><br><span class="line">   @extend $code-block</span><br><span class="line">   pre</span><br><span class="line">     <span class="attribute">border:</span> none</span><br><span class="line">     <span class="attribute">margin:</span> <span class="number">0</span></span><br><span class="line">     <span class="attribute">padding:</span> <span class="number">0</span></span><br><span class="line">   table</span><br><span class="line">     <span class="attribute">margin:</span> <span class="number">0</span></span><br><span class="line">     <span class="attribute">width:</span> auto</span><br><span class="line">   td</span><br><span class="line">     <span class="attribute">border:</span> none</span><br><span class="line">     <span class="attribute">padding:</span> <span class="number">0</span></span><br><span class="line">   figcaption</span><br><span class="line">     clearfix()</span><br><span class="line">     <span class="attribute">font-size:</span> <span class="number">0.85em</span></span><br><span class="line">     <span class="attribute">color:</span> highlight-comment</span><br><span class="line">     <span class="attribute">line-height:</span> <span class="number">1em</span></span><br><span class="line">     <span class="attribute">margin-bottom:</span> <span class="number">1em</span></span><br><span class="line">     a</span><br><span class="line">       <span class="attribute">float:</span> right</span><br><span class="line">   .gutter pre</span><br><span class="line">     @extend $line-numbers</span><br><span class="line">     <span class="attribute">text-align:</span> right</span><br><span class="line">     <span class="attribute">padding-right:</span> <span class="number">20px</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;The hexo theme shows code in a solid black box with syntax hightlghting to match.  It gives a nice contrast to the rest of the content, however I wanted to add curves to the corner of the code boxes.  I also wanted to  add a margin / padding around the code box so it did not touch the edges of the post.&lt;/p&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Custom Theme - Maximising the Layout of the Website</title>
    <link href="http://jr0cket.co.uk/2014/06/hexo-custom-theme---maximising-the-layout-of-the-website.html"/>
    <id>http://jr0cket.co.uk/2014/06/hexo-custom-theme---maximising-the-layout-of-the-website.html</id>
    <published>2014-06-03T14:52:05.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p>Whilst I like many aspects of the Hexo theme used to generate static websites, it does seem to have a lot of redundant space.  So here are a few aspects of the them I have changes in order to get more of the actual content showing on the page.</p><a id="more"></a><h1 id="Scaling-down-the-header-space"><a href="#Scaling-down-the-header-space" class="headerlink" title="Scaling down the header space"></a>Scaling down the header space</h1><p>The most obvious occurance is the header image, which takes up a huge part of the screen on the desktop.</p><h1 id="Scaling-down-the-image"><a href="#Scaling-down-the-image" class="headerlink" title="Scaling down the image"></a>Scaling down the image</h1><h1 id="Changing-the-image"><a href="#Changing-the-image" class="headerlink" title="Changing the image"></a>Changing the image</h1><p>The most obvious way to make your website look different from all the other Hexo generated websites is to change the header image.</p><h2 id="Header-image-with-my-cat"><a href="#Header-image-with-my-cat" class="headerlink" title="Header image with my cat"></a>Header image with my cat</h2><p>Very personal, not neccessarily representative of the website content though.</p><p>Also not that easy to see the text in the top navigation bar, as the text and icons are white and the background image is light.</p><p>Boosting the opacity of the naviation text and icons makes them stand out better on the lighter background.</p><h3 id="Chaning-Navbar-text-opacity"><a href="#Chaning-Navbar-text-opacity" class="headerlink" title="Chaning Navbar text opacity"></a>Chaning Navbar text opacity</h3><p>The CSS definition called nav-link contains an opacity value.  This was changed from 0.6 (60 percent) to 0.8 (80 percent) to make the navbar links more visible when hovering over them with the mouse.</p><figure class="highlight css"><figcaption><span>source/css/_partial/header.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$nav-link</span><br><span class="line">  <span class="selector-tag">float</span>: <span class="selector-tag">left</span></span><br><span class="line">  <span class="selector-tag">color</span>: <span class="selector-id">#fff</span></span><br><span class="line">  <span class="selector-tag">opacity</span>: 0<span class="selector-class">.8</span></span><br><span class="line">  <span class="selector-tag">text-decoration</span>: <span class="selector-tag">none</span></span><br><span class="line">  <span class="selector-tag">text-shadow</span>: 0 1<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.2</span>)</span><br><span class="line">  <span class="selector-tag">transition</span>: <span class="selector-tag">opacity</span> 0<span class="selector-class">.2s</span></span><br><span class="line">  <span class="selector-tag">display</span>: <span class="selector-tag">block</span></span><br><span class="line">  <span class="selector-tag">padding</span>: 20<span class="selector-tag">px</span> 15<span class="selector-tag">px</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span></span><br><span class="line">    <span class="selector-tag">opacity</span>: 1</span><br></pre></td></tr></table></figure><h2 id="Increase-the-size-of-the-logo-text"><a href="#Increase-the-size-of-the-logo-text" class="headerlink" title="Increase the size of the logo text"></a>Increase the size of the logo text</h2><p>I change my logo to say “community developer” and wanted it to take up less room in the header.  So I found the CSS declaration for <code>logo-text</code> and increased the font weight from 300 to 700</p><figure class="highlight css"><figcaption><span>source/css/_partial/header.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$logo-text</span><br><span class="line">  <span class="selector-tag">text-decoration</span>: <span class="selector-tag">none</span></span><br><span class="line">  <span class="selector-tag">color</span>: <span class="selector-id">#fff</span></span><br><span class="line">  <span class="selector-tag">font-weight</span>: 300</span><br><span class="line">  <span class="selector-tag">text-shadow</span>: 0 1<span class="selector-tag">px</span> 4<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.3</span>)</span><br></pre></td></tr></table></figure>  <p> The same for the main-nav-link text</p><figure class="highlight css"><figcaption><span>source/css/_partial/header.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main-nav-link</span></span><br><span class="line">  <span class="keyword">@extend</span> $nav-link</span><br><span class="line">  <span class="attribute">font-weight:</span> <span class="number">700</span></span><br><span class="line">  <span class="attribute">letter-spacing:</span> <span class="number">1px</span></span><br><span class="line">  @media mq-mobile</span><br><span class="line">    <span class="attribute">display:</span> none</span><br></pre></td></tr></table></figure><h2 id="More-navbar-changes"><a href="#More-navbar-changes" class="headerlink" title="More navbar changes"></a>More navbar changes</h2><ul><li>Reduced the banner height from 300px to 120px </li><li>reduced the logo size from 40px to 32pd</li><li>changed banner-url to point to a different image</li></ul><figure class="highlight"><figcaption><span>source/css/_variables.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Header</span><br><span class="line">logo-size = 32px</span><br><span class="line">subtitle-size = 16px</span><br><span class="line">banner-height = 120px</span><br><span class="line">banner-url = "images/cat-eyes-and-paw.png"</span><br></pre></td></tr></table></figure><h3 id="Previous-values"><a href="#Previous-values" class="headerlink" title="Previous values"></a>Previous values</h3><p>// Header<br>logo-size = 40px<br>subtitle-size = 16px<br>banner-height = 300px<br>banner-url = “images/banner.jpg”</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Whilst I like many aspects of the Hexo theme used to generate static websites, it does seem to have a lot of redundant space.  So here are a few aspects of the them I have changes in order to get more of the actual content showing on the page.&lt;/p&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Custom Theme - Using FontAwesome Icons</title>
    <link href="http://jr0cket.co.uk/2014/06/hexo-custom-theme---adding-navbar-icon-links-using-fontawesome.html"/>
    <id>http://jr0cket.co.uk/2014/06/hexo-custom-theme---adding-navbar-icon-links-using-fontawesome.html</id>
    <published>2014-06-01T18:50:09.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p><a href="http://fortawesome.github.io/Font-Awesome/" target="_blank" rel="noopener">FontAwesome</a> provides a lot of icons you can use in your website instead of including image logos of various sizes.  There are icons for twitter, linkedin, Github and RSS feeds.  Using these icons keeps your website fast on any device or network.</p><p>I’ll explain how I configured the standard <a href="https://github.com/hexojs/hexo-theme-landscape" target="_blank" rel="noopener">Hexo Landscape theme</a> to add icons in my blog website navigation bar, each icon linking to the developer related sites I use such as Github and Twitter.</p><a id="more"></a> <h1 id="FontAwesome-icons-are-awesome"><a href="#FontAwesome-icons-are-awesome" class="headerlink" title="FontAwesome icons are awesome"></a>FontAwesome icons are awesome</h1><p>FontAwesome is a font that has a wide range of icons, including logos from common websites such at Twitter, Github, LinkedIn, etc.  Using a font for these logos is more efficient when it comes to load times of your website, as you only need to include one font which scales to different sizes.</p><img src="/images/font-awesome-icons.png" class="img-code"><h1 id="Adding-Icons-Styles-to-the-CSS"><a href="#Adding-Icons-Styles-to-the-CSS" class="headerlink" title="Adding Icons Styles to the CSS"></a>Adding Icons Styles to the CSS</h1><p>The Hexo theme already had two CSS ID’s defined in the header styles, providing icons for the RSS feed and search button.  I simpy copied these style definitions for the addtional icons I wanted, giving each icon its own unique CSS ID.</p><p>To get the correct code for the FontAwesome icon I wanted, I refered to this <a href="http://astronautweb.co/snippet/font-awesome/" target="_blank" rel="noopener">list of CSS content values</a>.</p><p>I updated the <code>source/css/_partial/header.styl</code> file to include the additional icon styles.</p><figure class="highlight css"><figcaption><span>source/css/_partial/header.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#nav-rss-link</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span></span><br><span class="line">    <span class="selector-tag">content</span>: "\<span class="selector-tag">f09e</span>"</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav-twitter-link</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span></span><br><span class="line">    <span class="selector-tag">content</span>: "\<span class="selector-tag">f099</span>"</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav-linkedin-link</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span></span><br><span class="line">    <span class="selector-tag">content</span>: "\<span class="selector-tag">f0e1</span>"</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav-googleplus-link</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span></span><br><span class="line">    <span class="selector-tag">content</span>: "\<span class="selector-tag">f0d5</span>"</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav-github-link</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span></span><br><span class="line">    <span class="selector-tag">content</span>: "\<span class="selector-tag">f113</span>"</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav-search-btn</span></span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span></span><br><span class="line">    <span class="selector-tag">content</span>: "\<span class="selector-tag">f002</span>"</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Adding-Icons-to-the-header-layout"><a href="#Adding-Icons-to-the-header-layout" class="headerlink" title="Adding Icons to the header layout"></a>Adding Icons to the header layout</h1><p>Now the icon style are defined, we need to include them in the navigation bar layout.  This navigation bar layout is defined in the file <code>layout/_partial/header.ejs</code>, see lines 3,4,and 5 below: </p><figure class="highlight javascript"><figcaption><span>layout/_partial/header.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav id=<span class="string">"sub-nav"</span>&gt;</span><br><span class="line">  &lt;a id=<span class="string">"nav-github-link"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"nav-icon"</span> href=<span class="string">"https://github.com/jr0cket"</span> target=<span class="string">"_blank"</span>&gt;&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  &lt;a id="nav-linkedin-link" class="nav-icon" href="https:/</span><span class="regexp">/uk.linkedin.com/i</span>n/jr0cket<span class="string">" target="</span>_blank<span class="string">"&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">  &lt;a id="</span>nav-twitter-link<span class="string">" class="</span>nav-icon<span class="string">" href="</span>https:<span class="comment">//twitter.com/jr0cket" target="_blank"&gt;&lt;/a&gt;</span></span><br><span class="line">  &lt;a id=<span class="string">"nav-googleplus-link"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"nav-icon"</span> href=<span class="string">"https://plus.google.com/117080433375668558463"</span> target=<span class="string">"_blank"</span>&gt;&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  &lt;% if (theme.rss)&#123; %&gt;</span></span><br><span class="line"><span class="regexp">    &lt;a id="nav-rss-link" class="nav-icon" href="&lt;%- theme.rss %&gt;" title="RSS Feed"&gt;&lt;/</span>a&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">  &lt;a id=<span class="string">"nav-search-btn"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"nav-icon"</span> title=<span class="string">"Search"</span>&gt;&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>nav&gt;</span><br></pre></td></tr></table></figure><h1 id="The-finished-result"><a href="#The-finished-result" class="headerlink" title="The finished result"></a>The finished result</h1><p>As soon as both files are saved, I can see the results as soon as I refresh the browser as I am running <code>hexo server</code>.  </p><p>My navigation bar now has more icons displayed, each icon linking to my other developer websites</p><img src="/images/hexo-theme-navbar-icons-fontawesome.png" class="img-code"><p>The navigation bar has a link for my Github, LinkedIn, Twitter and Google plus profile pages.</p><p>Thank you<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://fortawesome.github.io/Font-Awesome/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FontAwesome&lt;/a&gt; provides a lot of icons you can use in your website instead of including image logos of various sizes.  There are icons for twitter, linkedin, Github and RSS feeds.  Using these icons keeps your website fast on any device or network.&lt;/p&gt;
&lt;p&gt;I’ll explain how I configured the standard &lt;a href=&quot;https://github.com/hexojs/hexo-theme-landscape&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo Landscape theme&lt;/a&gt; to add icons in my blog website navigation bar, each icon linking to the developer related sites I use such as Github and Twitter.&lt;/p&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Managing Hexo Blog Content With Git Submodules</title>
    <link href="http://jr0cket.co.uk/2014/05/managing-hexo-blog-content-with-git-submodules.html"/>
    <id>http://jr0cket.co.uk/2014/05/managing-hexo-blog-content-with-git-submodules.html</id>
    <published>2014-05-27T06:09:44.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p> You can use Git to manage version of your content effectively.  You can also use Git to manage any changes you make to the theme you use.</p><p>Rather than keep all these seperate changes in one repository, you can use Git submodules to manage your theme and content changes seperately.</p><a id="more"></a><blockquote><p>In have detailed how I used <a href="/hexo/using-git-submodules-for-custom-hexo-theme.html">Git Submodules for managing content seperately from a custom theme</a> and how to <a href="/2014/04/getting-started-with-hexo---a-modern-static-site-generator/">get started with Hexo</a></p></blockquote><img src="https://lh3.googleusercontent.com/-VuoPUgPuNV8/U4uIHw5YjoI/AAAAAAAAOTs/7PF8HvWrwIQ/w320-h240-no/git-submodules-concept.png" class="img-code"><p>Thank you<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt; You can use Git to manage version of your content effectively.  You can also use Git to manage any changes you make to the theme you use.&lt;/p&gt;
&lt;p&gt;Rather than keep all these seperate changes in one repository, you can use Git submodules to manage your theme and content changes seperately.&lt;/p&gt;
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git Submodules Pros and Cons</title>
    <link href="http://jr0cket.co.uk/2014/05/git-submodules-pros-and-cons.html"/>
    <id>http://jr0cket.co.uk/2014/05/git-submodules-pros-and-cons.html</id>
    <published>2014-05-26T14:14:42.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/git-logo.png" class="img-thumbnail"><p>Git is the version control system of choice by most developers, however when it comes to Git Submodules there is some contention as to their value.  I have used them successfully and when you understand where they fit in you can use them to benefit your own projects too.</p><p>I’ll explain what Git Submodules as well as why some developers are using them and some developers warn you not to.</p><a id="more"></a><h1 id="Git-Submodules-Overview"><a href="#Git-Submodules-Overview" class="headerlink" title="Git Submodules Overview"></a>Git Submodules Overview</h1><img src="/images/git-submodules-abstract.png" class="img-topic"><p>A submodule appears to be just a subdirectory of another git repository.  Actually its a full and seperate git repository itself with its own commit history. </p><p>Submodules are not clones or branches of a single repository and I would advise against merging submodules into the main repository.</p><p>You can have many submodules within a git repository and even have submodules in a submodule.</p><p>Submodules are useful if you have a code or content in one git repository that you want to use with several other git managed projects, yet you still want to keep the change history seperate.  For example, you may be using a library that is under active development and you need to develop you code along with any changes.</p><p>Git Submodules allow you to share two or more repositories as though they were one.  Each repository maintains its own seperate change history and submodules are updated independently of the main repository.  When you clone or pull a repository with a submodule, the repository has a link to where to get the submodle code from.</p><h1 id="My-blog-A-simple-example-of-Git-Submodules"><a href="#My-blog-A-simple-example-of-Git-Submodules" class="headerlink" title="My blog: A simple example of Git Submodules"></a>My blog: A simple example of Git Submodules</h1><img src="/images/hexo-submodules-theme-devguides.png" class="img-topic"><p>I use Hexo.io, a static site generator, to create this blog you are reading.  I create all my content in markdown and push it to a github repository as a backup.  The generated site is also deployed as a Github Pages site.</p><p>I started using a Git Submodule with my project as I wanted to make significant changes to the default theme that Hexo uses.  However, I didnt want to add the theme or my changes to the repository I am managing all my content, as I dont want to tie the content to a particular platform.</p><p>So by forking the Hexo defalut theme into a seperate repository, I can then add the theme repository as a submodule of my content repository.  I can create a history of changes to the theme and roll back if there are bugs without having to worry about dropping content changes.</p><p>I also have an existing repository for a series of developer guides I created, which I can also add as a sub-module and still keep that repository seperate for those who wish to only work with my guides (and not my full content).  </p><h2 id="Prezto-A-bigger-example-of-submodules-in-actions"><a href="#Prezto-A-bigger-example-of-submodules-in-actions" class="headerlink" title="Prezto: A bigger example of submodules in actions"></a>Prezto: A bigger example of submodules in actions</h2><p>I use a project calle Prezto which provides a great setup for using Zsh.  The Prezto project pulls in several other projects, each of which configures specific features of Zsh.  Rather than pull all the code into one repository, submodules means that updates from the other projects are easily incorporated into the main Prezto project.</p><h1 id="Git-Submodules-usage"><a href="#Git-Submodules-usage" class="headerlink" title="Git Submodules usage"></a>Git Submodules usage</h1><p>To start using git submodules you first need a Git repository, this can be a new repository or an existing one.  Lets call this the <em>main repository</em>.</p><p>In the root of the main repository, you add a submodule using the <code>git submodule add</code> command as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git submodule  add -b &lt;branch&gt; --name &lt;name&gt;  &lt;repository&gt;</span><br><span class="line"></span><br><span class="line">git submodule add &lt;repository-url&gt; &lt;sub-directory-name&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In the man repository you can now see a directory called … [TODO: Is the directory named after <name> ?]</name></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] status [--cached] [--recursive] [--] [&lt;path&gt;...]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] init [--] [&lt;path&gt;...]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] update [--init] [--remote] [-N|--no-fetch]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] summary [--cached|--files] [(-n|--summary-limit) &lt;n&gt;]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] sync [--] [&lt;path&gt;...]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] foreach [--recursive] &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure><p>To see the full list of options, please read the <a href="http://git-scm.com/docs/git-submodule" target="_blank" rel="noopener">Git Submodules onlne man pages</a>.</p><h1 id="Reasons-not-to-use-Git-Submodules"><a href="#Reasons-not-to-use-Git-Submodules" class="headerlink" title="Reasons not to use Git Submodules"></a>Reasons not to use Git Submodules</h1><p>Git Submodules add complexity to your version control system and you should ensure using Submodules is more of a benefit than that complexity.  If you ever plan on merging submodules into the main repository, this is possible but its probably better to not use submodules in the first place.</p><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Git Submodules are a great way to distribute several repositories all as one.  Each Submodule should be treated as a completely seperate repository to get the most sence out of using Git Submodules.  Take the time to learn how to use Submodules and you will find them easy to use and very helpful in the right situations.</p><ul><li><a href="http://git-scm.com/book/en/Git-Tools-Submodules" target="_blank" rel="noopener">Git-scm: Git tools - submodules</a></li><li><a href="http://git-scm.com/docs/git-submodule" target="_blank" rel="noopener">Git-scm: Git Submodules man page</a></li><li><a href="http://blogs.atlassian.com/2013/03/git-submodules-workflows-tips/" target="_blank" rel="noopener">Atlassian: Git Submodule workflow tips</a></li><li><a href="http://git-scm.com/docs/git-submodule" target="_blank" rel="noopener">Git Submodules onlne man pages</a></li></ul><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/git-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Git is the version control system of choice by most developers, however when it comes to Git Submodules there is some contention as to their value.  I have used them successfully and when you understand where they fit in you can use them to benefit your own projects too.&lt;/p&gt;
&lt;p&gt;I’ll explain what Git Submodules as well as why some developers are using them and some developers warn you not to.&lt;/p&gt;
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Migrating From Blogger.com to Hexo.io Static Site Generator</title>
    <link href="http://jr0cket.co.uk/2014/04/migrating-articles-to-hexo-from-bloggercom.html"/>
    <id>http://jr0cket.co.uk/2014/04/migrating-articles-to-hexo-from-bloggercom.html</id>
    <published>2014-04-20T16:27:21.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p>I found writing articles with <a href="http://blogger.com" target="_blank" rel="noopener">Blogger.com</a> had become slow and a little frustrating.  So I decided to switch to Hexo.io as I can write articles anywhere I have a text editor (usually Emacs).  Hexo also creates a responsive and fast static website, so when people want to read the articles (including myself when I have forgotten something) then they can do so quickly and across multiple devices.  As its a static site, I can deploy it anywhere.</p><p>So how do I get all of that content I created out of Blogger and into Hexo.  Luckily Hexo has a migration tool to make things easier</p><a id="more"></a><h2 id="Hexo-migration-package"><a href="#Hexo-migration-package" class="headerlink" title="Hexo migration package"></a>Hexo migration package</h2><p>Hexo has a seperate tool called <code>hexo-migrator</code> to pull in content from an RSS feed and there is a more specific migrator for Wordpress.  These migrators are installed as an npm package just like any other: </p><pre><code>npm install hexo-migrator -g</code></pre><p>Unforntunatley the npm packaged version of hexo-migrator failed when I tried to import from blogger, regardless of whether I used the blog URL or by downloading the XML file generated by the RSS feed.  The error I got was already reported as <a href="https://github.com/hexojs/hexo-migrator-rss/issues" target="_blank" rel="noopener">an issue on the hexo-migrator Github site</a> and a fix already applied.  This fix had not yet been packaged up as a new npm version at the time of writing.</p><h3 id="Hexo-migration-from-Github"><a href="#Hexo-migration-from-Github" class="headerlink" title="Hexo migration from Github"></a>Hexo migration from Github</h3><p>As a fix for the Blogger import problem exists in the Github repository, I installed the hexo migration tool directly from there.  Node package manager allows you to install directly from a Github repository (handy when someone has not patch an npm package yet).  So to install the latest version of hexo-migrator, I used the command:</p><pre><code>npm install &quot;git+https://github.com/hexojs/hexo-migrator-rss.git&quot;</code></pre><p>I used the https address for the Github repository as I dont have SSH access.  However, to work you also have to put <strong>git+</strong> infront of the repository address for npm to work.  I am assuming <strong>git+</strong> tells npm that we are pulling from a github repository rather than a regular file system.</p><h2 id="Running-the-migration"><a href="#Running-the-migration" class="headerlink" title="Running the migration"></a>Running the migration</h2><p>The migration to is very simple to use, simply run <code>hexo migrate</code> specifiying the type of input, <code>rss</code> and the location of your content.  In my case I just pulled the Blogger content directly from the website, although you could download the XML code generated by the RSS feed links and save them as a file for importing. following command and point it at the RSS feed of your website.  </p><p>I created a new hexo site specifically to import blogger posts, so I would not interfeir whith the posts that I had already written using Hexo.  So if everything went wrong I could easily delete the new site and still have my new posts running. </p><p>To import content directly from my blogger site into a new hexo project I used the following commands:</p><pre><code>hexo init hexo-blogger-importcd hexo-blogger-importhexo migrate rss http://blog.jr0cket.co.uk/default?alt=rsshexo server</code></pre><p>It worked, brilliant.  I have a whole bunch of migrated articles in <strong>source/_posts/</strong> folder.  Running the <code>hexo server</code> allowed my to quickly see the results.</p><h2 id="Oh-not-everything-is-there"><a href="#Oh-not-everything-is-there" class="headerlink" title="Oh not everything is there"></a>Oh not everything is there</h2><p>Whilst the hexo migration tool successfully grabbed articles from my blog, it only got the first 25 posts.  I have about 200 posts so my excitement was short lived.  It turns out that this is not a problem with the hexo migration tool, but a problem with the RSS feed from blogger.</p><p>I clicked the RSS link on the blogger website and looking at the XML (a horible thing to do) I saw that it was only giving me the first 25 posts.  </p><h2 id="Migration-by-labels"><a href="#Migration-by-labels" class="headerlink" title="Migration by labels"></a>Migration by labels</h2><p>Checking on the sites I syndicate some of my blogs too, I noticed a different form for the RSS web address (URL).  I share selective posts with <a href="http://planet.clojure.in/" target="_blank" rel="noopener">Planet Clojure</a> and <a href="http://planet.emacsen.org/" target="_blank" rel="noopener">Planet Emacsen</a>. this is done using specific blogger labels (aka tags) (i.e. PlanetClojure, PlanetEmacsen).  These RSS syndication sites were given the following RSS URL’s</p><pre><code>http://blog.jr0cket.co.uk/feeds/posts/default/-/PlanetClojurehttp://blog.jr0cket.co.uk/feeds/posts/default/-/PlanetEmacsen</code></pre><p>So by using the different labels (Blogger calls tags labels) I could pull out more posts from blogger, even though each request would only return a maximum of 25 posts.  So instead of the default rss feed used in the first hexo migration, I used the following commands:</p><pre><code>hexo migrate rss http://blog.jr0cket.co.uk/-/Clojurehexo migrate rss http://blog.jr0cket.co.uk/-/Emacshexo migrate rss http://blog.jr0cket.co.uk/-/Ubuntuhexo migrate rss http://blog.jr0cket.co.uk/-/Agilehexo migrate rss http://blog.jr0cket.co.uk/-/Kanban</code></pre><p>So I carried on for each blogger label I had defined on my post until I thought I had most of the posts migrated.  Not perfect, but until I know how to get blogger to give me more than 25 posts from its RSS feed that will have to do.</p><h2 id="Testing-the-migrated-content"><a href="#Testing-the-migrated-content" class="headerlink" title="Testing the migrated content"></a>Testing the migrated content</h2><p>As I was already running <code>hexo server</code> then I could see the results as I was importing each posts from a partiular blogger lable.  All I needed to do was refresh the browser each time and click on the relevant tag in the tag cloud sidebar.  </p><p>If you are not running the server during the migration, you can start it by using the following command in the root of your hexo project:</p><pre><code>hexo server </code></pre><p>Now open your browser at <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> and see the results of the migration.</p><p>Each of the posts I migrated is in my blog, although the tags need tidying up (I wasnt very consistent in blogger).  The great thing is that all the posts are in date order, as the published date of each blog was put into each markdown file generated by the migration.</p><h2 id="Migration-isnt-perfect"><a href="#Migration-isnt-perfect" class="headerlink" title="Migration isnt perfect"></a>Migration isnt perfect</h2><p>Whist my articles were copied over to markdown files okay, some of my post brought along with them additional styles (div’s, class styles, non-breaking spaces, etc) and other artefacts that messed up the styles that Hexo applies.  </p><p>Some of the styling for headers and subheaders is using the markdown notation for bold, rather than heading.  Headers in particular are a good thing to correct, as search engines base some of the articles relevance on those headers.</p><p>With some of the migrated posts I open them up in an editor and delete any offending styling that came with them.  To tell which ones to open, I use the Unix command <code>grep</code> to find which of my posts have <strong>&lt;div</strong> in their text:</p><pre><code>grep &quot;&lt;div&quot; source/_posts/* </code></pre><p>It turns out that most of my posts do, so if I want to see which ones I really need to fix then it probably easiest to look at the locally running website created by <code>hexo server</code>.  So I opened my browser at <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> and had a look at the posts to see which ones needed the most attention.</p><p>My basic strategy was to work from the most recent blog post, working backwards until I didnt care about any older posts.</p><h2 id="Updating-Categories-and-Tags"><a href="#Updating-Categories-and-Tags" class="headerlink" title="Updating Categories and Tags"></a>Updating Categories and Tags</h2><p>The Hexo rss migrator pulled in all the tags (labels) form my posts on Blogger and listed them correctly in the frontmatter of each post.  </p><p>Whilst editing the posts to remove the rogue style code, it was a chance to refine the tags I used and select a category for each post.  Using the local hexo server, it was quite quick to refine the tags I used by looking all all the words in the tag cloud sidebar.  Where I had used similar tags I could just pick one to make it easier and simpler to find the most relevant content on the site.</p><h2 id="Adding-Summary-breaks"><a href="#Adding-Summary-breaks" class="headerlink" title="Adding Summary breaks"></a>Adding Summary breaks</h2><p>A nice feature of Hexo is that you can define how much of a summary view you want to have with each article.  The summary view is the main view of the blog and shows the title and the first part of your article.</p><p>You define where the summary view ends by using the following syntax in the article markdown file:</p><pre><code>&lt;!-- more --&gt;</code></pre><p>This is something you need to add manually to each article [TODO: check if there is a tool to do this], so if you have a lot of posts it may take a little while.  However it does help your audience (and yourself) scan through your content quickly.  </p><p>If you have a lot of older posts you are importing, then its not going to be a big problem as they will be many pages into your blog summary view. </p><h2 id="Images-still-on-Blogger"><a href="#Images-still-on-Blogger" class="headerlink" title="Images still on Blogger"></a>Images still on Blogger</h2><img src="https://lh5.googleusercontent.com/-2r7nkB71SpM/AAAAAAAAAAI/AAAAAAAAqOk/ea27J5tj5Mc/photo.jpg" class="img-thumbnail"><p>The migration is not yet finished, even after I tidy up my posts.  Many of the images in my posts are stored in Blogger, which is actually Google picasa and now Google Plus photos.  Again there is another hexo tool called <a href="https://github.com/akfish/hexo-migrator-image" target="_blank" rel="noopener">hexo-migrator-image</a> which will copy all the remote images to your local filesystem and fix your links (hopefully).</p><p>Install hexo-migrator-image using the following command:</p><pre><code>npm install hexo-migrator-image</code></pre><p>Then run the hexo-migrator-image command and wait for all the images to download.</p><h3 id="Imaging-importing-was-not-so-successful"><a href="#Imaging-importing-was-not-so-successful" class="headerlink" title="Imaging importing was not so successful"></a>Imaging importing was not so successful</h3><p>The image migrator does not like https links and I had quite a lot of them.  When the image migrator hits an https link it just crashes too.</p><p>Even after changing all the https links to http the results were not as expected.  Whilst images had been copied to the local filespace, the names were all changed to long numbers rather than being the original descriptive filenames.  To compound the issue, the links in the posts were not updated with to point to the local images.</p><blockquote><p>I wonder if the hexo image migrator failed because the images were all within hypertext ancor links (a href’s).</p></blockquote><p>Rather than wrestle with the hexo image migrator, I decided to leave the images where they were on Google Plus.  </p><h2 id="Github-is-not-great-for-images"><a href="#Github-is-not-great-for-images" class="headerlink" title="Github is not great for images"></a>Github is not great for images</h2><img src="https://assets-cdn.github.com/images/modules/logos_page/Octocat.png" class="img-topic"><p>There is not a lot of advantage putting your images in Github, except that they are right there where the rest of your website is.  However, using a good image repository that acts like a Content Delivery Network (CDN) should give you the same amount of speed and not waste space in the Github repository.</p><p>By keeping images out it also makes your Git repository quicker to fork and clone</p><p>So I will keep all my images on Google Plus.  Any photos I take with my Android phone end up on Google Plus anyway, so it makes sense to keep all my images there.</p><h2 id="Final-migration-check"><a href="#Final-migration-check" class="headerlink" title="Final migration check"></a>Final migration check</h2><p>As a final sanity check that everything has been migrated correctly, I ran the <a href="https://github.com/sergiolepore/hexo-broken-link-checker" target="_blank" rel="noopener">hexo-broken-link-checker</a>.  This Hexo plugin detects links that don’t work, missing images and redirects.</p><p>As I occasionally link to my own posts, it was good to check that these still links still worked.</p><h2 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h2><p>Although I had a bit of editing of my blog posts after the migration, it was worth it to have all my blog content in markdown.  Now I can manage my posts much easier and do any updates easily in my favourite editor, Emacs.</p><p>Thank you<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;I found writing articles with &lt;a href=&quot;http://blogger.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Blogger.com&lt;/a&gt; had become slow and a little frustrating.  So I decided to switch to Hexo.io as I can write articles anywhere I have a text editor (usually Emacs).  Hexo also creates a responsive and fast static website, so when people want to read the articles (including myself when I have forgotten something) then they can do so quickly and across multiple devices.  As its a static site, I can deploy it anywhere.&lt;/p&gt;
&lt;p&gt;So how do I get all of that content I created out of Blogger and into Hexo.  Luckily Hexo has a migration tool to make things easier&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="migration" scheme="http://jr0cket.co.uk/tags/migration/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Theme Tweaks - Showing Articles as Titles Only</title>
    <link href="http://jr0cket.co.uk/2014/04/hexo-theme-tweaks---showing-articles-as-titles-only.html"/>
    <id>http://jr0cket.co.uk/2014/04/hexo-theme-tweaks---showing-articles-as-titles-only.html</id>
    <published>2014-04-16T08:59:33.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p>Hexo displays posts in a summary format by default, showing the title and content of the article up to the point where the <code>more</code> marker is used:</p><a id="more"></a><p>I like this summary format for the main page as its where people tend to browse a little more and usually want a little more information to help them decide if they want to read the whole article.  </p><p>[TODO: Insert picture of summary layout]</p><p>However when someone selects the archive, category or tags section, they are most likely looking for something specific and so just showing the titles of the posts helps them scan the articles quickly.</p><p>So this article we will cover how to modify the default Hexo theme, landscape, to show summar and title only views.</p><!-- more --><h2 id="Understanding-the-layout"><a href="#Understanding-the-layout" class="headerlink" title="Understanding the layout"></a>Understanding the layout</h2><p>Layout of the page is defined mainly in <a href="https://github.com/visionmedia/ejs" target="_blank" rel="noopener">EJS</a> format and then imported via the <code>theme/landscape/source/css/style.styl</code> file that is used to pull together a single <code>style.css</code> file for the whole site (once the site is generated).</p><p>All pages use the default <code>index.ejs</code> [is it index or layout - check the hexo docs] as a base template, over-riding it where desired.  For the front page of the blog this is fine.</p><p>The archive, categories and tag pages all use the same code, however these are the files we are going to change</p><pre><code>theme/landscape/layouts/_partial/archive.ejstheme/landscape/layouts/_partial/category.ejstheme/landscape/layouts/_partial/tag.ejs</code></pre><p>Lets first find out what changes need to be made and in what file.</p><h2 id="Using-Chrome-developer-tools"><a href="#Using-Chrome-developer-tools" class="headerlink" title="Using Chrome developer tools"></a>Using Chrome developer tools</h2><p>You can use the Chrome developer tools to find out the secion of CSS that controls the displaying of the summary part of the article.</p><p>It turns out this summary part of the content is managed by a section called <code>article-entry</code>.  This is included in the file <code>theme/landscape/layouts/_partial/article.ejs</code>:</p><pre><code>&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;  &lt;% if (post.excerpt &amp;&amp; index){ %&gt;    &lt;%- post.excerpt %&gt;    &lt;% if (theme.excerpt_link){ %&gt;      &lt;p class=&quot;article-more-link&quot;&gt;        &lt;a href=&quot;&lt;%- config.root %&gt;&lt;%- post.path %&gt;#more&quot;&gt;&lt;%= theme.excerpt_link %&gt;&lt;/a&gt;      &lt;/p&gt;    &lt;% } %&gt;</code></pre><p>I tested that this was the code rendering the article summary using the Chrome developer tools.  I right-clicked on the first line of the code, the opening <strong>div</strong> tag, and selected <code>delete node</code><br><img src="/hexo-themes-test/images/hexo-theme-tweak-devtools-delete-node.png"></p><h2 id="Making-the-changes-to-the-theme"><a href="#Making-the-changes-to-the-theme" class="headerlink" title="Making the changes to the theme"></a>Making the changes to the theme</h2><p>There may be better approaches than I have taken, however mine is fairly straight formward.  I simply take a copy of the archive.ejs file and called it archive-titles.ejs.</p><p>I then remove the above code completely from the <code>articles-titles.ejs</code> file and call that file instead from the <code>archive.ejs</code>, <code>category.ejs</code> and <code>tag.ejs</code> files.</p><p>So the archive, catagory and tag files are changed calling the archive.ejs:</p><pre><code>&lt;%- partial(&apos;_partial/archive&apos;, {pagination: 2, index: true}) %&gt;</code></pre><p>and now call <code>archive-titles.ejs</code>:</p><pre><code>&lt;%- partial(&apos;_partial/archive-titles&apos;, {pagination: config.archive, index: true}) %&gt;</code></pre><p>With <code>hexo server</code> running these changes are picked up straight away, so we can easily see if the changes worked as expected</p><p>[TODO: image of changed archive]</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Hexo displays posts in a summary format by default, showing the title and content of the article up to the point where the &lt;code&gt;more&lt;/code&gt; marker is used:&lt;/p&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Getting Started With Hexo - a Modern Static Site Generator</title>
    <link href="http://jr0cket.co.uk/2014/04/getting-started-with-hexo---a-modern-static-site-generator.html"/>
    <id>http://jr0cket.co.uk/2014/04/getting-started-with-hexo---a-modern-static-site-generator.html</id>
    <published>2014-04-12T14:13:19.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p>Hexo is a modern static website generator &amp; bloging platform written in Node.js.  It is a great way to create a blog or other content driven websites as all the content is written in markdown and can therefore be versioned with Git. </p><p>I am using Hexo for my developer blog (using blogger became very slow) and am also using Hexo for a series of online tutorials on developer tools.</p><p>Here is a quick guide to get going with Hexo.</p><a id="more"></a><h1 id="Install-Node-js"><a href="#Install-Node-js" class="headerlink" title="Install Node.js"></a>Install Node.js</h1><p>If you havent already got node, go to <a href="http://nodejs.org/" target="_blank" rel="noopener">nodejs.org</a> and follow the instructions.  My own preference is to install node into a directory called <strong>app</strong> in the root of my home directory.</p><h1 id="Install-Emacs-optional"><a href="#Install-Emacs-optional" class="headerlink" title="Install Emacs (optional)"></a>Install Emacs (optional)</h1><p>This is not a requirement for Hexo, although Emacs and Emacs Live gives a fantastic experience when writing markdown content.  Emacs is a very lightweight and full screen editor.  Emacs Live syntactically highlights your markdown content, so headings, links, bold and italic styles are shown in as you type your content.  Italic style content even displays in italic.</p><img src="/images/emacs-live-markdown-screenshot.png" class="img-code"><h1 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h1><p>There is really good documentation on the <a href="http://hexo.io" target="_blank" rel="noopener">hexo.io</a> website, althought all you need to do to install is:</p><pre><code>npm install hexo -g</code></pre><blockquote><p>If you install nodejs on the system path, you need to use the above command with sudo - i.e <code>sudo npm install hexo -g</code></p></blockquote><h1 id="Create-a-Hexo-projects"><a href="#Create-a-Hexo-projects" class="headerlink" title="Create a Hexo projects"></a>Create a Hexo projects</h1><img src="/images/hexo-workflow-commands.png" class="img-topic"><p>Create a new hexo project, I usually do this in a folder called projects in my home folder:</p><pre><code>hexo init my-project-namecd my-project-namenpm install </code></pre><p>This creates a new hexo project in a folder called <code>my-project-name</code>, so use what ever name you wish here.</p><p>The <code>npm install</code> command adds tools for processing different content sources and languages used in the Hexo themes.</p><h1 id="Configure-Hexo-to-your-will"><a href="#Configure-Hexo-to-your-will" class="headerlink" title="Configure Hexo to your will"></a>Configure Hexo to your will</h1><p>Your new hexo project is configured using a file called <code>_config.yml</code>.  In this configuration file you can set the basics of your website, eg title, authour, language, etc.  You can also set the public address of your website (URL).</p><h2 id="Blog-specific-configuration"><a href="#Blog-specific-configuration" class="headerlink" title="Blog specific configuration"></a>Blog specific configuration</h2><p>If you are creating a blog website, then you can define the structure used for your blog posts.  Your posts can use any combination of year, month, day and title.  By default the posts will use all 4 combined.  I prefer to just use the year, month and title.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink: :year/:month/:title/</span><br></pre></td></tr></table></figure><p>You can also set the default filename, layout template (scafold) for new blog posts, when created with the command <code>hexo new</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br></pre></td></tr></table></figure><h2 id="Version-your-Hexo-project"><a href="#Version-your-Hexo-project" class="headerlink" title="Version your Hexo project"></a>Version your Hexo project</h2><p>If you are deploying your website to Github pages then the generated content is versioned by Github.  However, the markdown content for your websites and any configuration changes you make will not be versioned.</p><p>If you are going to use this site for any important content, I’d recommend putting the Hexo project into a github repository (or similar service).  Using version control for your content helps you track changes effectively and gives an easy way for people to correct your content using Github pull reuests.</p><p>The directories and files to add to the version control system include:</p><ul><li><code>_config.yml</code> for your project configuration</li><li><code>source</code> directory for all the content in markdown </li><li>packages.json so the tools you use to generate the Hexo website will be installed when you run <code>npm install</code></li></ul><h2 id="Versioning-the-Hexo-theme"><a href="#Versioning-the-Hexo-theme" class="headerlink" title="Versioning the Hexo theme"></a>Versioning the Hexo theme</h2><p>You could also version the <code>theme</code> folder assuming you were going to make changes to the default hexo them.  However, it is better to create a new theme which is a copy of the Hexo default change with your changes added.  Then you can update the hexo project <code>_config.yml</code> to use this new theme.</p><p>If you decide to make a lot of theme changes then it may be better to version the theme as a seperate project.  This new theme can then be copied (cloned) in from the repository you are managing the theme with, or even set up the theme repository as a git submodule.</p><h1 id="Running-a-local-Hexo-server"><a href="#Running-a-local-Hexo-server" class="headerlink" title="Running a local Hexo server"></a>Running a local Hexo server</h1><p>Although you wont have much content at this stage, you can still see what the website looks like by running Hexo server locally:</p><pre><code>hexo server </code></pre><p>By default this runs a node application on port 4000, so open your browser at: <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><h1 id="Adding-blog-posts-to-your-Hexo-projects"><a href="#Adding-blog-posts-to-your-Hexo-projects" class="headerlink" title="Adding blog posts to your Hexo projects"></a>Adding blog posts to your Hexo projects</h1><p>The easiest way to add a new blog post is to let Hexo generate it for you from its template, this will ensure your post picks up the current them and any blog specific styling:</p><pre><code>hexo new &quot;name of my blog post with full on SEO&quot;</code></pre><p>Hexo will return with the full path to the file it has created for you.  Edit this file in your favourite editor (surely this is Emacs).  Becareful to add your content after the <strong>frontmatter</strong>, this is the first few lines that define the title, date, style and tags used for the post.  Add your markdown </p><h1 id="Adding-images-to-your-posts"><a href="#Adding-images-to-your-posts" class="headerlink" title="Adding images to your posts"></a>Adding images to your posts</h1><p>If you are only going to have a few images in the Hexo project (a few hundred or so), then the easiest way is to keep them in a <code>source/images</code> directory.  Github pages has a content delivery network (CDN) that will help deliver you images quickly around the world.  You can include these image files as you version the rest of your content for the project.</p><p>If you are going to use a great many images on your website (1,000’s), you may be better off keeping those images in some kind of image service (Google+ photos) or content delivery network(CDN).</p><p>Using a CDN will incure a small cost, but unless are using terrabytes of bandwidth to serve up your images this will only a few dollars a year.  Examples of CDNs <a href="http://aws.amazon.com/cloudfront/" target="_blank" rel="noopener">Amazon CloudFront</a>, <a href="http://www.edgecast.com/" target="_blank" rel="noopener">EdgeCast</a>, or <a href="http://www.level3.com/" target="_blank" rel="noopener">level3</a>.  Alternatively you could use an <a href="http://aws.amazon.com/s3/" target="_blank" rel="noopener">Amazon S3 bucket</a>, but I suggest you find a good client for that service.</p><h1 id="Adding-pages-to-your-Hexo-website"><a href="#Adding-pages-to-your-Hexo-website" class="headerlink" title="Adding pages to your Hexo website"></a>Adding pages to your Hexo website</h1><p>Just like with blog posts, you can create pages using the <code>hexo new</code> command, simply by specifying the page template (scaffold).</p><pre><code>hexo new page &quot;page-name&quot;</code></pre><p>If you want a hierachy of pages then you would have to create them manually.  It seems <code>hexo new</code> does not know how to create pages underneath other pages.  However, as its only simple markup it is generating then it is easy to copy out your own page structure using the command line or a graphical file manager.</p><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Hexo is a lightweight and fun to use platform for bloggind and similar kinds of content driven sites.  I am currently also building out developer workshop materials using Hexo.</p><p>To discover more about Hexo, visit the <a href="/hexo/">Hexo area of this site</a> and the <a href="http://hexo.io" target="_blank" rel="noopener">Hexo.io</a> website.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Hexo is a modern static website generator &amp;amp; bloging platform written in Node.js.  It is a great way to create a blog or other content driven websites as all the content is written in markdown and can therefore be versioned with Git. &lt;/p&gt;
&lt;p&gt;I am using Hexo for my developer blog (using blogger became very slow) and am also using Hexo for a series of online tutorials on developer tools.&lt;/p&gt;
&lt;p&gt;Here is a quick guide to get going with Hexo.&lt;/p&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Theme Building With Chrome Developer Tools</title>
    <link href="http://jr0cket.co.uk/2014/04/hexo-theme-building-with-chrome-developer-tools.html"/>
    <id>http://jr0cket.co.uk/2014/04/hexo-theme-building-with-chrome-developer-tools.html</id>
    <published>2014-04-10T18:27:33.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p>I’m using Hexo as my blogging platform and wanted to customise the theme, which is broken down into many different parts to make it easier to manage and customise.  In order to understand what the different parts did I fired up Google Chrome deverloper tools to quickly explore the styles of Hexo’s default theme.</p><a id="more"></a><h1 id="Google-Chrome-browser-developer-tools"><a href="#Google-Chrome-browser-developer-tools" class="headerlink" title="Google Chrome browser developer tools"></a>Google Chrome browser developer tools</h1><p>With Chrome developer tools you can explore the source code (HTML, CSS and JavaScript) of any web page and see which part of the page each line of code is responsible for.  This is a great way for quickly seeing which CSS classes and ID’s are used to control styles, as well as seeing which block of JavaScript is providng dynamic behaviour on the page. </p><h2 id="Running-the-Chrome-developer-tools"><a href="#Running-the-Chrome-developer-tools" class="headerlink" title="Running the Chrome developer tools"></a>Running the Chrome developer tools</h2><p>Right-click and select “Inspect Element” on any page you are browsing to bring up the developer tools console.  You can navigate through </p><h1 id="Chrome-developer-tool-Resources"><a href="#Chrome-developer-tool-Resources" class="headerlink" title="Chrome developer tool Resources"></a>Chrome developer tool Resources</h1><blockquote><p>TODO: List any follow on tutorials &amp; videos that help you make the most out of these developer tools.</p></blockquote><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Using the Chrome developer tools is a fast way to explore the elements that make up your web page and should help speed up testing and bug fixing.  So get familiar with these tools and get even more productive.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;I’m using Hexo as my blogging platform and wanted to customise the theme, which is broken down into many different parts to make it easier to manage and customise.  In order to understand what the different parts did I fired up Google Chrome deverloper tools to quickly explore the styles of Hexo’s default theme.&lt;/p&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo - Why I Prefer It Over Octopress</title>
    <link href="http://jr0cket.co.uk/2014/04/hexo---why-i-prefer-it-over-octopress.html"/>
    <id>http://jr0cket.co.uk/2014/04/hexo---why-i-prefer-it-over-octopress.html</id>
    <published>2014-04-02T12:55:29.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p>There are several <a href="http://www.staticgen.com/" target="_blank" rel="noopener">static website &amp; blogging platforms available</a>, so why did I choose <a href="http://hexo.io" target="_blank" rel="noopener">Hexo</a> over things like Jekyll, Octopress, DocPad or writing my own?  Let me elaborate.</p><a id="more"></a><h1 id="I-write-more-JavaScript-than-Ruby"><a href="#I-write-more-JavaScript-than-Ruby" class="headerlink" title="I write more JavaScript than Ruby"></a>I write more JavaScript than Ruby</h1><p>Ruby is a great language but one I rarely use it for development anymore.  </p><p>The languages I use the most are Clojure and JavaScript, so ideally the tools I use should be written in one of those languages.  Why, well I already have the environment set up to support tools in those languages and if I need to extend the tool then I have the skills to do so relatively quickly.</p><h1 id="Ruby-is-a-pain-to-install"><a href="#Ruby-is-a-pain-to-install" class="headerlink" title="Ruby is a pain to install"></a>Ruby is a pain to install</h1><p>I have had a lot of problems with Ruby on MacOSX and Ubuntu, with only compilation from source code being successful.  This takes a bit of time and requires extra packages to be installed I otherwise wouldnt need.  RVM did strange things to my bash resource files last time I tried it out and the install failed on both MacOSX and Ubuntu.</p><h1 id="New-is-often-Better"><a href="#New-is-often-Better" class="headerlink" title="New is often Better"></a>New is often Better</h1><p>Hexo is relatively new and yet has learnt a lot from Octopres.  So has the advantage of not baking in any technical debt or having language specific quirks.  One example of why I like Hexo better is its simplicity.  To create a new file for a blog post in Hexo you use the command:</p><pre><code>hexo new &quot;title of blog post&quot;</code></pre><p>With Octopress the command is similar but not as easy to remember and trickier to type:</p><pre><code>rake new_post[&quot;Title of blog post&quot;]</code></pre><p>The differeces are relatively small, but in terms of usabiltity I feel a big difference especially as I write several blog posts a week. </p><p>Rather than using the command <code>octopress</code> you have to remember that you are using the command <code>rake</code>.  This is fine if you are used to Ruby every day, but I am not.  The form of the command also makes it difficult to rember (eg, that you have to use brackets and which ones were they again) and its actually harder to type, especially for a touch typist.</p><h1 id="Great-feedback-process"><a href="#Great-feedback-process" class="headerlink" title="Great feedback process"></a>Great feedback process</h1><p>If you run the Hexo server then any changes you make, either to the content of your site or the design (CSS, theme, etc) is automatically picked up and rendered.  So if you are curious about how your changes look, then you just need to point your browser to the hexo server, usually running on port 4000.</p><p>So to run the hexo server you use the command:</p><pre><code>hexo server</code></pre><p>Then to see the results you open the link <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p>When you make a change you get output in the console that is currently running the Hexo server, for example</p><img src="/images/hexo-server-example-output-on-changes.png"><p>This allows me to work locally on my laptop and see the results instantaineously.  Only when I am ready to share my changes with the world do I need to generate the static content and push it to Github pages.</p><p>This simple process should support me event when I have hundereds of blog posts and pages of content.  I wont have to wait for the generation of the site (although Hexo is pretty quick anyway, generating the site as it is in about 5 seconds).</p><h1 id="Responsive-community"><a href="#Responsive-community" class="headerlink" title="Responsive community"></a>Responsive community</h1><p>There is a healthy community around Hexo.  There are already lots of articles about configuring Hexo and creating your own themes.  I have found the project itself very responsive to issues and I even had several pull requests accepted.</p><h1 id="Multi-threaded-processing"><a href="#Multi-threaded-processing" class="headerlink" title="Multi-threaded processing"></a>Multi-threaded processing</h1><p>As I plan to use one platform for all my static web content, blogging, tutorials, slides and technology micro-sites, then I need something that works pretty quick.</p><p>Hexo has also added a cache system to speed up the generation time even further.  The cache can be used with headers, footers or anywhere where the same content is generated repeatedly.</p><h1 id="Customisation"><a href="#Customisation" class="headerlink" title="Customisation"></a>Customisation</h1><p>I also want to be able to put my own look onto my websites.  Most tools of this kind provide some nice sites, but I dont want something that just looks exactly like every other site out there.</p><p>However, I dont want to spend a long time configuring themes, so it should be really easy to tweak exiting themes.  </p><p>So far I have found Hexo easier to understand the theme structure from reading the default landscape theme.  Although I dont believe there is a vast difference between Hexo and Octopress themes.  It just seems a little easier to work with than the Octopress themes, but I guess it depends which themes you work with in the end.</p><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Hexo is a great choice for any blog or static website you want to create, I highly recommend switching to it and deploying your websites on Github pages.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;There are several &lt;a href=&quot;http://www.staticgen.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;static website &amp;amp; blogging platforms available&lt;/a&gt;, so why did I choose &lt;a href=&quot;http://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; over things like Jekyll, Octopress, DocPad or writing my own?  Let me elaborate.&lt;/p&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://jr0cket.co.uk/2014/04/hello-world.html"/>
    <id>http://jr0cket.co.uk/2014/04/hello-world.html</id>
    <published>2014-04-02T11:00:00.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p>Welcome to <a href="http://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">trobuleshooting</a> or you can ask me on <a href="https://github.com/tommy351/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><h2 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h2 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h2 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h2 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;http://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;trobuleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/tommy351/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Static Site Generator - Modifying Existing Themes</title>
    <link href="http://jr0cket.co.uk/2014/04/hexo-static-site-generator---modifying-exiting-themes.html"/>
    <id>http://jr0cket.co.uk/2014/04/hexo-static-site-generator---modifying-exiting-themes.html</id>
    <published>2014-04-02T06:45:21.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p>Hexo is a great way to create a blog or static website and comes with some responsive and great looking themes.  However, so your site doesnt look like everyone elses, you may want to customise the look and the easiest way is to modify an existing theme.</p><a id="more"></a><h2 id="Landscape-the-default-theme"><a href="#Landscape-the-default-theme" class="headerlink" title="Landscape - the default theme"></a>Landscape - the default theme</h2><p>There are a wide range of themes to choose from, althought Landscape is one of the newest and is also the default so you dont need to instal it.</p><h3 id="Location-of-themes"><a href="#Location-of-themes" class="headerlink" title="Location of themes"></a>Location of themes</h3><p>In the themes folder of your hexo project </p><pre><code>hexo init new-projectcd new-project</code></pre><p>You will now see a <code>themes/landscape</code> directory structure in your new hexo project.  Inside this landscape directory are a collection of files that generate the theme when you run ethier <code>hexo server</code> or <code>hexo generate</code>.</p><h2 id="Making-your-changes-work"><a href="#Making-your-changes-work" class="headerlink" title="Making your changes work"></a>Making your changes work</h2><p>If you have already generated or deployed your site with a theme and then you modify it. it seems hexo does not pick up those changes.  First you need to run the command</p><pre><code>hexo clean </code></pre><p>This will remove the cache and the .deploy folders.  So now when you do</p><pre><code>hexo generate</code></pre><p>all new files are added to public.</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Hexo is a great way to create a blog or static website and comes with some responsive and great looking themes.  However, so your site doesnt look like everyone elses, you may want to customise the look and the easiest way is to modify an existing theme.&lt;/p&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Codeblock Highlighting Verses Markdown</title>
    <link href="http://jr0cket.co.uk/2014/03/hexo-codeblock-highlighting-vs-markdown.html"/>
    <id>http://jr0cket.co.uk/2014/03/hexo-codeblock-highlighting-vs-markdown.html</id>
    <published>2014-03-29T01:02:50.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p>This is a simple post to see if there are any differences in the style of code when defined in a <code>{ % codeblock % }</code> or using markdown notation (tripple backticks / indentation).  In this case I am just using some simple Clojure code.</p><a id="more"></a><h2 id="Showing-code-by-indentation"><a href="#Showing-code-by-indentation" class="headerlink" title="Showing code by indentation"></a>Showing code by indentation</h2><p>I have wrapped the following lines by three backtick characters on the line before and line after the code.  These tripple backtick characters to instruct the Hexo markdown processor that the containing lines should be rendered as a code block.</p><figure class="highlight clojure"><figcaption><span>really-simple-example.clj</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> clojure-function [paramter]</span><br><span class="line">  (<span class="name"><span class="builtin-name">str</span></span> <span class="string">"Lets do something simple using Clojure and "</span> parameter))</span><br></pre></td></tr></table></figure><p>That should be a simple Clojure example using markdown indentation.  </p><h2 id="Using-Hexo-Codeblock"><a href="#Using-Hexo-Codeblock" class="headerlink" title="Using Hexo Codeblock"></a>Using Hexo Codeblock</h2><p>Hexo has several plugin types from Swig that you can use in your post.  Lets try out <code>codeblock</code> to see if there is any difference in how it renders compared to the above markdown.</p><figure class="highlight clojure"><figcaption><span>basic-clojure-example.clj</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> authors [<span class="symbol">:name</span> <span class="string">"John Stevenson"</span>])</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> show-author [authors]</span><br><span class="line">  (<span class="name"><span class="builtin-name">str</span></span> authors))</span><br><span class="line">  </span><br><span class="line">(<span class="name">show-author</span> authors)</span><br></pre></td></tr></table></figure><p>The rendering of both pieces of code is pretty much the same, except with the code block I added language and a title.  If I use three backticks then I can specify the language and a filename that contains the code.  If I just use indentation, specifying a language and filename is not possible (as far as I know).</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;This is a simple post to see if there are any differences in the style of code when defined in a &lt;code&gt;{ % codeblock % }&lt;/code&gt; or using markdown notation (tripple backticks / indentation).  In this case I am just using some simple Clojure code.&lt;/p&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Deploying Hexo Sites to Github Pages</title>
    <link href="http://jr0cket.co.uk/2014/03/deploying-hexo-sites-to-github-pages.html"/>
    <id>http://jr0cket.co.uk/2014/03/deploying-hexo-sites-to-github-pages.html</id>
    <published>2014-03-27T09:32:32.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p>Hexo is a great way to easily generate content and publish it use Github pages. </p><blockquote><p>See my previous articles on setting up <a href="/tags/hexo">Hexo</a> and creating content</p></blockquote><a id="more"></a><h2 id="Configuring-your-site-name"><a href="#Configuring-your-site-name" class="headerlink" title="Configuring your site name"></a>Configuring your site name</h2><p>Its important to add the URL of your github pages site to the Hexo configuraiton </p><figure class="highlight plain"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://jr0cket.github.io/hexo-blog-test</span><br><span class="line">root: /hexo-blog-test/</span><br></pre></td></tr></table></figure><p>If your project uses a sub-folder, Make sure that the root line has a trailing forward slash, otherwise your URL paths will not be correct.</p><p>Projects use a sub-folder if they are deployed to the gh-pages branch of a repo.  When you are using the main repo for a user or org (username.github.io or org-name.github.io) then these repos run the Github pages from the master branch, so no root should be required (except for a single forward slash which is set by default in hexo)</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root: /hexo-blog-test</span><br></pre></td></tr></table></figure><p>This will give /hexo-blog-test2014-name-of-blog-post and wont show the page up or if it does then probably wont include the CSS styles</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Hexo is a great way to easily generate content and publish it use Github pages. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;See my previous articles on setting up &lt;a href=&quot;/tags/hexo&quot;&gt;Hexo&lt;/a&gt; and creating content&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Creating Your First Post With Hexo.io</title>
    <link href="http://jr0cket.co.uk/2014/03/creating-your-first-post-with-hexo.html"/>
    <id>http://jr0cket.co.uk/2014/03/creating-your-first-post-with-hexo.html</id>
    <published>2014-03-27T01:36:58.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail"><p>So you have installed Hexo (and nodejs), so now you are ready to start blogging.  Use the following command to create a new blog post entry (blog posts are the default type of content, although this can be changed in _config.yml):</p><pre><code>hexo new &quot;Meaningful blog post title with a hint of SEO&quot;</code></pre><p>Hexo will create a new file under source/_posts using the name provided.  You can then edit this file and start creating your content using Markdown.</p><a id="more"></a><h1 id="Generating-and-viewing-your-blog"><a href="#Generating-and-viewing-your-blog" class="headerlink" title="Generating and viewing your blog"></a>Generating and viewing your blog</h1><p>When you have finished writing your content, you can generate your blog posts using the command:</p><pre><code>hexo generate </code></pre><p>This will convert your markdown content into a static website.  Then you can view the site by running it on a server that Hexo provides:</p><pre><code>hexo server </code></pre><p>If everything looks good then you may want to publish the generated website somewhere it can be more readily accessed via the Internet.  Once such place is Github Pages (cover this later).</p><p>Later on you may want to tweak your theme and general configurations for the website.</p><h1 id="Tweaking-the-Hexo-site-configurations"><a href="#Tweaking-the-Hexo-site-configurations" class="headerlink" title="Tweaking the Hexo site configurations"></a>Tweaking the Hexo site configurations</h1><p>Just like with Octopress, you edit the _config.yml file and add your name, URL and any other details and settings you want to apply to the general blog.</p><h1 id="Quick-summary-Seting-up-Hexo"><a href="#Quick-summary-Seting-up-Hexo" class="headerlink" title="Quick summary: Seting up Hexo"></a>Quick summary: Seting up Hexo</h1><p>In case you forgot how to set Hexo up, then it is basically:</p><ul><li>Download the nodejs binaries (or compile from source if you have time to kill)</li><li>Add nodejs to the path (a setting in your shell rc file - eg. ~/.bashrc or ~/.zshrc)</li><li>Install hexo using: npm install hexo -g (wait for npm to download all the node packages)</li><li>Create a new website using: hexo init website-name (where website-name is just the folder name for your website project)</li></ul><p>Thank you<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/hexo-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;So you have installed Hexo (and nodejs), so now you are ready to start blogging.  Use the following command to create a new blog post entry (blog posts are the default type of content, although this can be changed in _config.yml):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo new &amp;quot;Meaningful blog post title with a hint of SEO&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hexo will create a new file under source/_posts using the name provided.  You can then edit this file and start creating your content using Markdown.&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Heroku Deploy - a Lot Happens in 1 Minute</title>
    <link href="http://jr0cket.co.uk/2014/03/heroku-deploy-a-lot-happens-in-1-minute.html"/>
    <id>http://jr0cket.co.uk/2014/03/heroku-deploy-a-lot-happens-in-1-minute.html</id>
    <published>2014-03-26T19:36:33.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<p>As technology progresses then taking a few minutes to deploy your app can seem like a long time, but when you consider everything Heroku is doing during that time then its quite amazing</p><a id="more"></a><h2 id="Provision-server-resources-amp-managing-traffic"><a href="#Provision-server-resources-amp-managing-traffic" class="headerlink" title="Provision server resources &amp; managing traffic"></a>Provision server resources &amp; managing traffic</h2><p>Heroku creates a new “server” each time you deploy, so that the currently live application can still handle reuests until the new version is ready.  Rather than a whole bloated server, Heroku actually creates a new Linux container with a running OS.  This Linux container usually takes a second or less to create with a running operating system.</p><h2 id="The-environment-is-then-established"><a href="#The-environment-is-then-established" class="headerlink" title="The environment is then established"></a>The environment is then established</h2><p>Every language you use to write your application needs some kind of runtime, eg. if you need Java you need the JVM, Ruby apps need a particular version of Ruby, Javascript probably needs nodejs and PHP needs a webserver.  As part of the Heroku buildpack used during the deployment, the relevant libraries and platforms are brought in.  Unless you change the configuration of your build or the buildfile you use, Heroku will always bring in the same version of the environment you need to run your app each time you deploy.</p><h2 id="Compilation-of-code"><a href="#Compilation-of-code" class="headerlink" title="Compilation of code"></a>Compilation of code</h2><p>If your app is compiled, then the build process is run so you have a deployment made from your standard production build.</p><p>Environment variables are set for the applications and any services (caching, logging, monitoring, etc) or datastores (postgres, redis, mongodb) are therefore automatically connected too.</p><p>All the relevant processes are run and scalled (can you scale your app to a certain level when you deploy)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As technology progresses then taking a few minutes to deploy your app can seem like a long time, but when you consider everything Heroku is doing during that time then its quite amazing&lt;/p&gt;
    
    </summary>
    
      <category term="cloud" scheme="http://jr0cket.co.uk/categories/cloud/"/>
    
    
      <category term="heroku" scheme="http://jr0cket.co.uk/tags/heroku/"/>
    
  </entry>
  
  <entry>
    <title>Emacs Org-Mode for All Your Content</title>
    <link href="http://jr0cket.co.uk/2014/03/emacs-org-mode-for-all-your-content.html"/>
    <id>http://jr0cket.co.uk/2014/03/emacs-org-mode-for-all-your-content.html</id>
    <published>2014-03-16T12:35:37.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail"><p>Emacs is a tool that just keeps on giving and Org-mode is a fantantastic way to create text based content and manage it effectively.  As Org-mode is just a text format then it can be easily converted by Emacs into other formats (markdown, pdf, html, etc).  I’ll show you how to create other formats from Org-mode, so you can confidently write everything in Org-mode and generate any format you need.</p><a id="more"></a><blockquote><p>In previous articles I have covered generating presentations from Org-mode using Reveal.js.</p></blockquote><h1 id="Why-write-in-Org-mode"><a href="#Why-write-in-Org-mode" class="headerlink" title="Why write in Org-mode"></a>Why write in Org-mode</h1><p>If you are writing anything more than a few paragraphs of text then it gets quite easy to become lost in your own writing.  Having to scroll around to see what you covered earlier can slow down your creative process.</p><p>With Org-mode you can structure you content easily, as your “topics or table of contents” are your structure.  Every heading and sub-heading can fold away the content underneath it, unfolding the only the parts of your writing you want to see.</p><p>Another useful aspect of Org-mode is that it hides the link part of the URL, so you only see the text part of the link.  This helps keep your text easy to read.</p><p>As with many other languages supported by Emacs you also get colour highlighting for different styles along with spell checking and suggested words as you type.</p><p>[TODO: Insert picture of Org-mode - or maybe even a video]</p><h1 id="Reasons-I-need-to-use-Markdown"><a href="#Reasons-I-need-to-use-Markdown" class="headerlink" title="Reasons I need to use Markdown"></a>Reasons I need to use Markdown</h1><p>I use markdown for my Jekyll based blog and website and as these are relativley small I often just write them directly in Markdown.  However, if its a series of posts on the same topic then I can easily structure that series using Org-mode and generate the markdown content when I am ready to add it to my blog.</p><p>I also need to use markdown for the self-publishing book website, <a href="LeanPub">https://leanpub.com/</a>.  I write the whole book in Org-mode, again so I can structure it sensibly and jump to specific parts of the content easily.  I can also see topics (headings) I have written about in each chapter of the book very easily by open and closing sections of the Org-mode file.</p><h1 id="Generating-Markdown-from-Org-mode"><a href="#Generating-Markdown-from-Org-mode" class="headerlink" title="Generating Markdown from Org-mode"></a>Generating Markdown from Org-mode</h1><p>In Emacs, open your Org-mode file (or switch to the buffer containing it).  Then export a copy of then content into markdown with one of the following commands</p><pre><code>M-x org-md-export-to-markdownC-c C-e m m</code></pre><p>Exports the current Org-mode file as a new text file of the same name but with the .md extension rather than .org.  </p><p>When you export again, the .md file will be overwritten without warning, so if you want to make changes you edit the Org-mode file and re-generate the markdown file.</p><p>If you want to see the markdown file as soon as it is created, use the following command to open it in Emacs:</p><pre><code>C-c C-e m o</code></pre><p>If you do not wish to create a file from the export, the following command generated markdown and places it inside a tempory Emacs buffer:</p><pre><code>M-x org-md-export-as-markdownC-c C-e m M </code></pre><p>[TODO: what does this command do?]<br>    M-x org-md-convert-region-to-markdown</p><p>The Markdown export is build on top of the <a href="HTML export">http://orgmode.org/manual/HTML-export.html#HTML-export</a> and anything not supported by the markdown syntax will be converted by that HTML export process.  See the Org-mode website for more details on <a href="exporting markdown">http://orgmode.org/manual/Markdown-export.html#Markdown-export</a> and other formats.</p><blockquote><p>For the header and sectioning structure the Markdown export can generate both atx and setext types for headlines, according to org-md-headline-style. ATX introduces a hard limit of two levels of headings, whereas Setext pushes it to six. Headings below that limit are exported as lists. You can also set a soft limit before that one (see <a href="Export settings">http://orgmode.org/manual/Export-settings.html#Export-settings</a>).</p></blockquote><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/emacs-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Emacs is a tool that just keeps on giving and Org-mode is a fantantastic way to create text based content and manage it effectively.  As Org-mode is just a text format then it can be easily converted by Emacs into other formats (markdown, pdf, html, etc).  I’ll show you how to create other formats from Org-mode, so you can confidently write everything in Org-mode and generate any format you need.&lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/tags/dev-tools/"/>
    
      <category term="org-mode" scheme="http://jr0cket.co.uk/tags/org-mode/"/>
    
  </entry>
  
  <entry>
    <title>Updating Octopress With Bug Fixes and Enhancments</title>
    <link href="http://jr0cket.co.uk/2014/03/updating-octopress-with-bug-fixes-and-enhancments.html"/>
    <id>http://jr0cket.co.uk/2014/03/updating-octopress-with-bug-fixes-and-enhancments.html</id>
    <published>2014-03-13T19:32:54.000Z</published>
    <updated>2022-01-02T20:20:15.310Z</updated>
    
    <content type="html"><![CDATA[<p>For each Octopress project you have created (ie. for each blog / website you created with Octopress) you need to pull some code from Github remote (octopress master) and run a few rake tasks.</p><p>Before you start with an update, check you Octopress projects files have been added to the Git repository or Stashed out of the way - as Octopress will try and overwrite them (although as its using git it will fail and warn you about a merge conflict).</p><pre><code>git pull octopress master     # Get the latest Octopressbundle install                # Keep gems updatedrake update_source            # update the template&apos;s sourcerake update_style             # update the template&apos;s style</code></pre><p><a href="http://octopress.org/docs/updating/" target="_blank" rel="noopener">http://octopress.org/docs/updating/</a></p><p>Thank you<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;For each Octopress project you have created (ie. for each blog / website you created with Octopress) you need to pull some code from Gith
      
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="octopress" scheme="http://jr0cket.co.uk/tags/octopress/"/>
    
  </entry>
  
  <entry>
    <title>Creating Content in Markdown for Your Octopress Blog</title>
    <link href="http://jr0cket.co.uk/2014/03/creating-content-in-markdown-for-your-octopress-blog.html"/>
    <id>http://jr0cket.co.uk/2014/03/creating-content-in-markdown-for-your-octopress-blog.html</id>
    <published>2014-03-13T19:32:20.000Z</published>
    <updated>2022-04-30T20:46:21.667Z</updated>
    
    <content type="html"><![CDATA[<p>Octopress enables the creation of great looking blog post using simple markdown text.  This gives you a no-fuss way of writing your blogs without getting distracted.  Here I will cover how to add formatting to you text and embedding code and other useful media into your blog posts.</p><blockquote><p>In my previous blog on Octopress I covered the blogging workflow and the handful of rake commands that help you create and deploy your blog posts consistently.</p></blockquote><a id="more"></a><h2 id="Adding-styles-to-text"><a href="#Adding-styles-to-text" class="headerlink" title="Adding styles to text"></a>Adding styles to text</h2><p>Headings<br>Bold, italic</p><h2 id="Adding-images"><a href="#Adding-images" class="headerlink" title="Adding images"></a>Adding images</h2><p>Images are always a good way to explain concepts or to just get attendtion for your writing.</p><p>To add an image to your post, you add the following code</p><figure class="highlight plain"><figcaption><span>[Insert an image in your post]</span><a href="http://octopress.org/docs/plugins/image-tag/" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;/path/to/image&quot; class=&quot;[class names]&quot; title=&quot;[width] [height] [title text [alt text]]&quot;&gt;</span><br></pre></td></tr></table></figure><p>Here is an example with my two cute cats:</p><img src="/images/kittens-snuggled.png"><h3 id="More-examples"><a href="#More-examples" class="headerlink" title="More examples"></a>More examples</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://placekitten.com/890/280&quot;&gt;</span><br><span class="line">&lt;img src=&quot;http://placekitten.com/320/250&quot; class=&quot;left&quot; title=&quot;Place Kitten #2&quot;&gt;</span><br><span class="line">&lt;img src=&quot;http://placekitten.com/300/500&quot; class=&quot;right&quot; width=&quot;150&quot; height=&quot;250&quot; title=&quot;Place Kitten #3&quot;&gt;</span><br><span class="line">&lt;img src=&quot;http://placekitten.com/300/500&quot; class=&quot;right&quot; width=&quot;150&quot; height=&quot;250&quot; title=&quot;Place Kitten #4 An image of a very cute kitten&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="Showing-code"><a href="#Showing-code" class="headerlink" title="Showing code"></a>Showing code</h2><h3 id="Code-blocks"><a href="#Code-blocks" class="headerlink" title="Code blocks"></a>Code blocks</h3><p>You can embed code snippets directly in the markup of the blog posts you write using the codeblock directive.<br><a href="http://octopress.org/docs/plugins/codeblock/" target="_blank" rel="noopener">http://octopress.org/docs/plugins/codeblock/</a></p><p>These are okay but I have not figured out a way to stop Octopress examples from rendering incorrectly (unless there is an Octopress update that fixes this)</p><p>[TODO - figure out how to show code snippets that are also liquid calls]</p><h3 id="Github-Gists"><a href="#Github-Gists" class="headerlink" title="Github Gists"></a>Github Gists</h3><p>I am used to using Github and Gists for sharing and collaborating around code, so as Octopress can use Gits then I have started using the gist directive.</p><script src="//gist.github.com/9532424.js"></script><p>See the <a href="Octopress article on Github gists">http://octopress.org/docs/plugins/gist-tag/</a> for a few more examples.</p><h2 id="Adding-Video"><a href="#Adding-Video" class="headerlink" title="Adding Video"></a>Adding Video</h2><p>You can add embedded videos from YouTube and Vimeo very easily, you just need to know the id of the video which is the last characters of the</p><p>For example, there is a great video by Lindsey Stirling at <a href="https://www.youtube.com/watch?v=DHdkRvEzW84" target="_blank" rel="noopener">https://www.youtube.com/watch?v=DHdkRvEzW84</a>, so to include this video in a post I would use the video id at the end of that web address (after the watch?v=).  So I would add the following code to my code</p>  youtube DHdkRvEzW84<p>You can use either YouTube or Vimeo for your video souce using the following syntax:</p>   youtube video-id   vimeo video-id<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>A beautiful video with amazing music from Lindsey Stirling:</p> <div class="video-container"><iframe src="//www.youtube.com/embed/DHdkRvEzW84" frameborder="0" allowfullscreen></iframe></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Octopress enables the creation of great looking blog post using simple markdown text.  This gives you a no-fuss way of writing your blogs without getting distracted.  Here I will cover how to add formatting to you text and embedding code and other useful media into your blog posts.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;In my previous blog on Octopress I covered the blogging workflow and the handful of rake commands that help you create and deploy your blog posts consistently.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="octopress" scheme="http://jr0cket.co.uk/tags/octopress/"/>
    
  </entry>
  
  <entry>
    <title>Customise Octopress Themes for Fun and Your Profit</title>
    <link href="http://jr0cket.co.uk/2014/03/customise-octopress-themes-for-fun-and-your-profit.html"/>
    <id>http://jr0cket.co.uk/2014/03/customise-octopress-themes-for-fun-and-your-profit.html</id>
    <published>2014-03-12T16:28:28.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<p>Octopress themes are stored in the the root folder of your project in a folder called .themes.  If you installed one of the custom themes for Octopress [link], the .themes folder is where the instructions tell you to clone the theme git repository.</p><p>Themes can also be installed by passing a parameter to the rake install command. the default theme being “classic”.</p><p>Using the .theme folder for your themes helps ensure that your customisations do not get over-written by Octopress updates .</p><a id="more"></a><h2 id="Including-font-families"><a href="#Including-font-families" class="headerlink" title="Including font families"></a>Including font families</h2><p>You can add hosted fonts just like you do with HTML pages using a link reference.  There are a large number of fonts from Google.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&apos;http://fonts.googleapis.com/css?family=Lato&apos; rel=&apos;stylesheet&apos; type=&apos;text/css&apos;&gt;</span><br></pre></td></tr></table></figure><p>I like the Ubuntu font so I add the Ubutu and Ubunto Mono font families using the following code:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&apos;http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu&apos; rel=&apos;stylesheet&apos; type=&apos;text/css&apos;&gt;</span><br></pre></td></tr></table></figure><p>You can select your own fonts to use by visiting <a href="Google fonts">http://www.google.com/fonts/</a> and adding the font families you like to your collection and Google Fonts will generate the line of code you need to add.</p><p>To add Ubuntu fonts directly to your CSS you would use the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">font-family: &apos;Ubuntu Mono&apos;, sans-serif;</span><br><span class="line">font-family: &apos;Ubuntu&apos;, sans-serif;</span><br></pre></td></tr></table></figure><h2 id="Changing-Colours"><a href="#Changing-Colours" class="headerlink" title="Changing Colours"></a>Changing Colours</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass/custom/_colors.scss</span><br></pre></td></tr></table></figure><h2 id="Example-light-colour-scheme"><a href="#Example-light-colour-scheme" class="headerlink" title="Example - light colour scheme"></a>Example - light colour scheme</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$header-title-font-family:</span><br><span class="line">&quot;Lato&quot;,</span><br><span class="line">&quot;Fontdiner Swanky&quot;,</span><br><span class="line">&quot;Germania One&quot;,</span><br><span class="line">&quot;Poller One&quot;,</span><br><span class="line">&quot;Georgia&quot;,</span><br><span class="line">&quot;Helvetica Neue&quot;,</span><br><span class="line">Arial,</span><br><span class="line">sans-serif !default;</span><br></pre></td></tr></table></figure><h2 id="Chainging-Style"><a href="#Chainging-Style" class="headerlink" title="Chainging Style"></a>Chainging Style</h2><p>Change width of the body, the size of the dates and article titles as well as the codeblocks in </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass/custom/_styles.scss</span><br></pre></td></tr></table></figure><p>Example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  max-width: 1100px;</span><br><span class="line">&#125;</span><br><span class="line">time &#123;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">h1 &#123;</span><br><span class="line">  font-size: 2.2em;</span><br><span class="line">&#125;</span><br><span class="line">section &#123;</span><br><span class="line">  &gt; h1 &#123;</span><br><span class="line">    font-size: 1.5em;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">codeblock &#123;</span><br><span class="line">    font-size: 1.1em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Icons"><a href="#Icons" class="headerlink" title="Icons"></a>Icons</h2><p><a href="Social media">http://www.elegantthemes.com/blog/resources/free-social-media-icon-set</a></p><h2 id="Header-images"><a href="#Header-images" class="headerlink" title="Header images"></a>Header images</h2><p>adding a CSS-styled header image isn’t immediately obvious—at least, not to web-tards like me. My first inclination was to do a bunch of surgery on ~/octopress/source/_includes/custom/header.html and stuff an image in there; that worked, but it didn’t take more than a glance at the CSS behind the Octopress default site to see that the method used there didn’t involve any additional code going into the header section. Plus, just adding an image in there didn’t really fit with the HTML5 fanciness of Octopress and Jekyll—it didn’t resize or reflow as the page was changed.</p><p>The key ended up being the realization that the header styling and its reflowing was coded in ~/octopress/sass/base/_layout.scss. True to form, that file has an override in ~/octopress/sass/custom/_layout.scss, and to that I made the following changes:</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">body &gt; header h1 &#123;</span><br><span class="line">      padding-left:2.5em;</span><br><span class="line">      text-align:right;</span><br><span class="line">      @media only screen and (min-width: 432px) &#123;</span><br><span class="line">              text-align:left;</span><br><span class="line">      &#125;</span><br><span class="line">      @media only screen and (min-width: 768px) &#123;</span><br><span class="line">              padding-left:3em;</span><br><span class="line">      &#125;</span><br><span class="line">      @media only screen and (min-width: 992px) &#123;</span><br><span class="line">              padding-left:2em;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &gt; header h2 &#123;</span><br><span class="line">      padding-left:5.62em;</span><br><span class="line">      text-align:right;</span><br><span class="line">      @media only screen and (min-width: 432px) &#123;</span><br><span class="line">              text-align:left;</span><br><span class="line">              padding-left:3.9em;</span><br><span class="line">      &#125;</span><br><span class="line">      @media only screen and (min-width: 768px) &#123;</span><br><span class="line">              padding-left:5em;</span><br><span class="line">      &#125;</span><br><span class="line">      @media only screen and (min-width: 992px) &#123;</span><br><span class="line">              padding-left:2.9em;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &gt; header h1:before &#123;</span><br><span class="line">      content:&quot;&quot;;</span><br><span class="line">      position:absolute;</span><br><span class="line">      left:0em;</span><br><span class="line">      right:0;</span><br><span class="line">      top:1.5em;</span><br><span class="line">      height:110px;</span><br><span class="line">      width:110px;</span><br><span class="line">      overflow:hidden;</span><br><span class="line">      text-align:right;</span><br><span class="line">      background-image:url(&apos;/images/bigdino-blog-head3.png&apos;);</span><br><span class="line">      background-repeat:no-repeat;</span><br><span class="line">      @media only screen and (min-width: 432px) &#123;</span><br><span class="line">              top:.32em;</span><br><span class="line">      &#125;</span><br><span class="line">      @media only screen and (min-width: 768px) &#123;</span><br><span class="line">              left:.75em;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The changes are divided up into three sections: the first part styles the main title (“Bigdinosaur Blog”), the second styles the subtitle (“Tales of hacking and stomping on things”), and the third places and styles the background image. Each section also contains instructions on how the styles should change as the browser window’s width changes (the lines beginning with @media only).</p><p>The most important thing, and the thing that wasn’t obvious to me at first but is actually really obvious in hindsight, is that the initial parameters for each section describe how the thing should look at its smallest, and then each min-width section describes how the thing should look starting at when the browser window is that wide or wider. So, look at header h1. This is the styling applied to the main title in the header. When the browser window is anywhere from 0 to 431 pixels wide, the title should be right-aligned with a bit of padding on its left to keep it from overlapping with the background dinosaur (more on overlapping in a bit). This is how things get displayed on, say, an iPhone.</p><p>The instant the browser window is 432 pixels wide—which is the point at which the “Bigdinosaur Blog” text wraps to a single line—the text switches to left-aligned and the amount of padding changes, again to keep it from overlapping with the background dino. Another shift comes again at 768 pixels of width, and then final shift to the title’s most sprawling layout happens at 992 pixels.</p><p>The subtitle, styled in the header h2 section, has similar directives—it starts out right-aligned, shifts to left-aligned at a certain point, and the amount of padding around it shifts as the browser window moves. The challenge with the subtitle is that I wanted it to maintain a consistent position relative to the main title, and since I’m doing my spacing using em values (which are themselves relative units), each new width setting required tuning by hand.</p><p>The last section places the background image itself. In order to have the most control about where the image appears and where it reflows to, I’ve given it a position:absolute tag, which means that other styled elements ignore the background when figuring out their own layouts—hence all the fiddling about with padding for the header text. Instead of standard image floating behavior, an absolutely positioned image can sit on top of other page elements. This can be used to creative effect, like on the Octopress home page titlebar, but you do have to be mindful with the spacing and padding of your other elements so that they don’t get eaten.</p><p>In its most narrow configuration, the background image sits on the far left of the page, with 1.5 ems of space from the top of its section to ensure that it doesn’t poke up past the main title, and with background-repeat:no-repeat set so that it only displays once rather than tiling or repeating itself. I also found that if I didn’t explicitly declare the height and width of the image, it wouldn’t display at all. Finally, there are two width settings that reposition the image as the page widens so that it maintains a visually pleasing position relative to the title.</p><p>I mentioned it above, but it’s worth repeating: the values above are what work for my typeface choice and image size, and you will have to tweak your own to taste. Once I had decided exactly what I wanted to do and figured out what files to edit, it took probably an hour of making small changes and previewing and making small changes and previewing over and over again before I was happy with the way things lined up. I spent so much time fiddling, in fact, that I elected to abandon the idea of having the dino pic resize itself. Dinosaurs, I suppose, are meant to be displayed as large as possible, all the time, and would never consent to any funny-business resizing.</p><p><a href="http://blog.bigdinosaur.org/changing-octopresss-header/" target="_blank" rel="noopener">http://blog.bigdinosaur.org/changing-octopresss-header/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Octopress themes are stored in the the root folder of your project in a folder called .themes.  If you installed one of the custom themes for Octopress [link], the .themes folder is where the instructions tell you to clone the theme git repository.&lt;/p&gt;
&lt;p&gt;Themes can also be installed by passing a parameter to the rake install command. the default theme being “classic”.&lt;/p&gt;
&lt;p&gt;Using the .theme folder for your themes helps ensure that your customisations do not get over-written by Octopress updates .&lt;/p&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="octopress" scheme="http://jr0cket.co.uk/tags/octopress/"/>
    
      <category term="themes" scheme="http://jr0cket.co.uk/tags/themes/"/>
    
  </entry>
  
  <entry>
    <title>Why Go to a Conference</title>
    <link href="http://jr0cket.co.uk/2014/03/why-go-to-a-conference.html"/>
    <id>http://jr0cket.co.uk/2014/03/why-go-to-a-conference.html</id>
    <published>2014-03-08T16:07:47.000Z</published>
    <updated>2022-01-02T20:20:15.310Z</updated>
    
    <content type="html"><![CDATA[<p>There are a great many developer and tech conferences to got to and the numbers are increasing.  Some of these conferences are free or free if you speak or volunteer, some are relativley cheap and some you may be able to persuade your company to pay for.  But why should you even consider going to a conference in the first place?</p><a id="more"></a><h1 id="As-a-speaker"><a href="#As-a-speaker" class="headerlink" title="As a speaker"></a>As a speaker</h1><p>So why go to a conference as a speaker?</p><p>Well the most obvious benefit is that you will probably get into the whole conferences for free.  If you are speaking about something relevant to the company you work for, they may also pay for your travel &amp; hotel expenses (if required).</p><p>Speakers can sometimes invite a friend along to the conference too.</p><p>Being a speaker at an event is a good way to get to network with the other speakers at the event.  The organisers some times arrange a speakers dinner the evening before, so as well as getting wined and dined by the organisers you get more of a chance to talk with the other speakers and build good relationships.</p><h2 id="Explaining-something-verifies-your-understanding"><a href="#Explaining-something-verifies-your-understanding" class="headerlink" title="Explaining something verifies your understanding"></a>Explaining something verifies your understanding</h2><p>In fact, presenters are usually the ones that get the most from a conference, they present there ideas and then have some one in the crowd as for “a real world example”.  Putting yourself on the spot like that and learning how to deal with it puts you in a good place when you go back to work and have to deal with all sorts of other less than plesant situations.</p><p>Its fun being a speaker, you get respect for just standing up in front of a crowd and speaking.</p><p>Its a great way to develop your career.  Are you tired of boring interview questions or dumb tests that only test your memory rather than your understanding?  A reputation of speaking at conferences goes a long way to cut through the crap that you often get at interview time.</p><p>Working a crowd at a presetation helps inmprove you team skills and helps you understand how you can inspire and influence people.  It is good training for real leadership.</p><p>I dont know of any speakers who ended up on the IT scrap-heap…</p><h1 id="As-an-attendee"><a href="#As-an-attendee" class="headerlink" title="As an attendee"></a>As an attendee</h1><p>Attending a conference is a chance to get away from work for a few days and actually step back and think about things.  It can be hard to see the big picture in terms of what you are trying to achieve at work when you are head down getting things done (or fire fighting).</p><p>Its good to find out what is happening in technology and see how others are applying the same tools and languages you use to great value.  Even some small change in approach can make you more effective.</p><p>There is an opportunity to meet a lot of new people and discuss conserns and ideas with each other.  Its a great chance to meet people in your situation and do some venting, talk about how you face your challenges, swap ideas and </p><p>Find out what people are doing and what they are excited about, why they get out of bed in the morning</p><p>Its good to put conferences on your CV - shows initiative, shows you are interested in learing and developing yourself</p><p>Its a great way to learn new things, or at least learn what things you should be looking at for the next 6 months - unless you like turning up to work and doing the same old crap week in week out !!!</p><p>It gives you something to talk about with your team when you get back to work, something other than what was on TV last night.</p><p>How boring is it to just work with someone who just turns up 9-5 and does nothing else.  I want to work with people who are inspired, passionate and enthusiastic about what they do.  As an employer, why would you ever hire someone who wasnt like this ??  Oh yes, because that employer has either no respect for thier staff or just wants them to do some grunt work - the IT factory in its worse sense.</p><p>Most employeers have no idea about IT and many do not need to know that much, except that they should respect the knowledge workers they hire and empower them to deliver the best possible service they can.  Unfortunately managment has been trained to measure and manage people like a time and cost study, rather than considering the value that their staff can bring them.</p><blockquote><p>Blinkered Manager: “What happens if I train my staff and they all leave”<br>Enlightened developer: “What happens if you dont train your staff and they all stay”</p></blockquote><p>If you want a successful business then you need successful people, people who will help you drive the business forward and not be a blocker to the delivery of your ideas. </p><p>There have been quite a few organisations that are now able to deliver at the speed of thought, deploying hundereds of ideas a day and getting the best feedback you can in the world - the customers recieving your service.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There are a great many developer and tech conferences to got to and the numbers are increasing.  Some of these conferences are free or free if you speak or volunteer, some are relativley cheap and some you may be able to persuade your company to pay for.  But why should you even consider going to a conference in the first place?&lt;/p&gt;
    
    </summary>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
    
      <category term="presenting" scheme="http://jr0cket.co.uk/tags/presenting/"/>
    
  </entry>
  
  <entry>
    <title>Create Great Looking Website Content With Twitter Bootstrap</title>
    <link href="http://jr0cket.co.uk/2014/03/create-great-looking-website-content-with-twitter-bootstrap.html"/>
    <id>http://jr0cket.co.uk/2014/03/create-great-looking-website-content-with-twitter-bootstrap.html</id>
    <published>2014-03-08T08:16:30.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-Twitter-bootstrap"><a href="#What-is-Twitter-bootstrap" class="headerlink" title="What is Twitter bootstrap?"></a>What is Twitter bootstrap?</h2><p>Bootstrap is an HTML5 toolkit from Twitter to help kickstart webapps and web content sites.  It includes a base Cascading Style Sheet (CSS) and HTML for forms, buttons, typography, tables, grids, navigation and much more.</p><p>Bootstrap stylesheet provides an easy-to-implement 960 grid for efficient layout, as well as expertly crafted styles for typography, navigation, tables, forms, buttons, and more. To take care of everyday JavaScript touches, Bootstrap provides a well built set of jQuery plugins for drop-down menus, tabs, modal boxes, tooltips, alert messages, and more.</p><p>This helps you create a standards compliant, responsive, user-friendly, professionally built HTML5 website, right out of the box. </p><a id="more"></a><h2 id="Licencing"><a href="#Licencing" class="headerlink" title="Licencing"></a>Licencing</h2><p>Bootstrap is under the Apache 2.0 license, provide a great deal of creative freedom. So long as you give the good folks at Twitter due credit for their work, you’re free to take, tweak, and customize everything to your heart’s content.</p><h2 id="Getting-started-with-Bootstrap"><a href="#Getting-started-with-Bootstrap" class="headerlink" title="Getting started with Bootstrap"></a>Getting started with Bootstrap</h2><p>If you just want to use Bootstrap for your project you can simply include the minified libraries from a content delivery network </p><figure class="highlight html"><figcaption><span>Use Bootstrap from a Content Delivery Network (CDN)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hack the Tower - London hackday<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span>     </span><br><span class="line">   <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://netdna.bootstrapcdn.com/bootswatch/3.1.1/united/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/hackthetower.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In the example, lines 8 &amp; 9 include minified bootstrap using the <strong>netdna</strong> content delivery network (CDN), so where ever people view your site from around the world it should not slow down due to loading these styleheets.</p><p>You can now use elements from Bootstrap in your project and view the results anywhere you have an internet connection.  To learn what these are, take a look at <a href="http://getbootstrap.com/" target="_blank" rel="noopener">Get Bootstrap</a> or Google for some of the very many examples out there.</p><h2 id="Working-with-Bootstrap"><a href="#Working-with-Bootstrap" class="headerlink" title="Working with Bootstrap"></a>Working with Bootstrap</h2><p>If you want to see the styles that bootstrap uses or carry out some significant customisations, you can also download bootstrap to your laptop as normal CSS files.  Its common practice to put cascading stylesheets into a folder called CSS and JavaScript in a folder called javascript.</p><p>If you are doing significant customisation then you could edit the twitter bootstrap files directly.  Alternativley you can create your own CSS and JavaScript files that over-ride the bootstrap styles and scripts.</p><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><p>The following links will give you ideas on how to make the most out of Bootstrap:</p><ul><li><a href="http://getbootstrap.com/getting-started/" target="_blank" rel="noopener">Get Bootstrap - Getting Started</a></li><li>Tutorial: <a href="http://www.revillweb.com/tutorials/twitter-bootstrap-tutorial/" target="_blank" rel="noopener">Up and running with Twitter Bootstrap in 20 minutes</a></li><li>Tutorial: <a href="http://www.w3resource.com/twitter-bootstrap/tutorial.php" target="_blank" rel="noopener">w3resource: Twitter Bootstrap 3 tutorial</a></li><li>Video: <a href="https://www.youtube.com/watch?v=no-Ntkc836w" target="_blank" rel="noopener">Bootstrap Tutorial For Beginners - Responsive Design with Bootstrap</a></li><li><a href="http://blog.getbootstrap.com/" target="_blank" rel="noopener">Official Bootstrap blog</a></li><li><a href="http://stackoverflow.com/questions/tagged/twitter-bootstrap-3" target="_blank" rel="noopener">StackOverflow - Twitter-Bootstrap-3</a></li><li><a href="https://twitter.com/twbootstrap" target="_blank" rel="noopener">@twbootstrap</a></li></ul><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What-is-Twitter-bootstrap&quot;&gt;&lt;a href=&quot;#What-is-Twitter-bootstrap&quot; class=&quot;headerlink&quot; title=&quot;What is Twitter bootstrap?&quot;&gt;&lt;/a&gt;What is Twitter bootstrap?&lt;/h2&gt;&lt;p&gt;Bootstrap is an HTML5 toolkit from Twitter to help kickstart webapps and web content sites.  It includes a base Cascading Style Sheet (CSS) and HTML for forms, buttons, typography, tables, grids, navigation and much more.&lt;/p&gt;
&lt;p&gt;Bootstrap stylesheet provides an easy-to-implement 960 grid for efficient layout, as well as expertly crafted styles for typography, navigation, tables, forms, buttons, and more. To take care of everyday JavaScript touches, Bootstrap provides a well built set of jQuery plugins for drop-down menus, tabs, modal boxes, tooltips, alert messages, and more.&lt;/p&gt;
&lt;p&gt;This helps you create a standards compliant, responsive, user-friendly, professionally built HTML5 website, right out of the box. &lt;/p&gt;
    
    </summary>
    
    
      <category term="bootstrap" scheme="http://jr0cket.co.uk/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Creating Blog Posts With Octopress</title>
    <link href="http://jr0cket.co.uk/2014/03/creating-blog-posts-with-octopress.html"/>
    <id>http://jr0cket.co.uk/2014/03/creating-blog-posts-with-octopress.html</id>
    <published>2014-03-04T15:46:14.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<p>Octopress provides an easy way to create blog posts by proving a task that will automatically place and name your markdown file.  This helps manage your blog posts in a sensible structure and avoids conflicts.</p><p>To create a new post, use the following command inside your Octopress project folder:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake new_post[&quot;Title of your blog post&quot;]</span><br></pre></td></tr></table></figure><p>This will create a markdown file including frontmatter to apply the blog post style.  The task creates the file under the _source folder and included the date at the start of the filename.</p><a id="more"></a><p>Now you can edit the file and simply add your content.  Once you have written your blog post you can ask Octopress to generate the html for your new post.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake generate </span><br></pre></td></tr></table></figure><p>You can view the results locally, or simply deploy up to your chosen location (eg. github pages)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rake preview</span><br><span class="line">rake deploy  </span><br></pre></td></tr></table></figure><p>If you are confident about the changes you are making, or have a test website you are deploying to, then you can use a single command to generate the new version of the site and publish it directly.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake gen_deploy</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>This covers the bloggine workflow for Octopress.  Next we will cover adding content in your blog post markdown files, inlcuding text formatting, images, code snippets, embedded video, etc</p><p>Thank you</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Octopress provides an easy way to create blog posts by proving a task that will automatically place and name your markdown file.  This helps manage your blog posts in a sensible structure and avoids conflicts.&lt;/p&gt;
&lt;p&gt;To create a new post, use the following command inside your Octopress project folder:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rake new_post[&amp;quot;Title of your blog post&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This will create a markdown file including frontmatter to apply the blog post style.  The task creates the file under the _source folder and included the date at the start of the filename.&lt;/p&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="octopress" scheme="http://jr0cket.co.uk/tags/octopress/"/>
    
  </entry>
  
  <entry>
    <title>First Blog Post Ever - Awesome</title>
    <link href="http://jr0cket.co.uk/2014/03/octopress-first-blog-post-ever-awesome.html"/>
    <id>http://jr0cket.co.uk/2014/03/octopress-first-blog-post-ever-awesome.html</id>
    <published>2014-03-03T00:08:42.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<p>This is the first blog post of many in my adventures in learning how to publish a blog using Octopress.  </p><p>As a developer I want a lightweight tool to create and easily publish content interesting to other developers in the community.  Although I can write HTML, CSS and JavaScript for webapps, I dont want to be slowed down writing these things when I am doing creative writing.</p><p>Using Octopress, which is a blogging framework on top of Jekyll, I can write my content using Markdown.  As Markdown is just simple text with a few characters and indents used for formating, I can focus on the writing and make it as appealing as I can.  I dont get distracted by the visual layout of the content and a standard design for the blog is consistently applied.<br><a id="more"></a></p><p>The only challenge I had intially was to get a working copy of Ruby running on my Ubuntu laptop.  Jekyll and therefore Octopress requires Ruby version 1.9.3 or greater and Unfortunately I seemed to have a mix of 1.9.1 and 1.9.3.  In Ubuntu 13.10 there is a strange stiuation where the 1.9.3 version of ruby was installed along side version 1.9.1 and therefore errors arrose when trying to generate the site.</p><p>To fix Ruby on Ubuntu, I loaded up Synaptic package manager and removed all Ruby packages and anything related, such as gem and bundler.  Then I installed the package ruby2.0 along with the docs and dev packages for that version.  With only the latest version of Ruby installed, Octopress worked perfectly.</p><p>I look forward to sharing my further experiences blogging with Octopress</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is the first blog post of many in my adventures in learning how to publish a blog using Octopress.  &lt;/p&gt;
&lt;p&gt;As a developer I want a lightweight tool to create and easily publish content interesting to other developers in the community.  Although I can write HTML, CSS and JavaScript for webapps, I dont want to be slowed down writing these things when I am doing creative writing.&lt;/p&gt;
&lt;p&gt;Using Octopress, which is a blogging framework on top of Jekyll, I can write my content using Markdown.  As Markdown is just simple text with a few characters and indents used for formating, I can focus on the writing and make it as appealing as I can.  I dont get distracted by the visual layout of the content and a standard design for the blog is consistently applied.&lt;br&gt;
    
    </summary>
    
      <category term="blogging" scheme="http://jr0cket.co.uk/categories/blogging/"/>
    
    
      <category term="octopress" scheme="http://jr0cket.co.uk/tags/octopress/"/>
    
  </entry>
  
  <entry>
    <title>Share Your Revealjs Slides on Github Pages</title>
    <link href="http://jr0cket.co.uk/2014/01/share-your-revealjs-slides-on-github-pages.html"/>
    <id>http://jr0cket.co.uk/2014/01/share-your-revealjs-slides-on-github-pages.html</id>
    <published>2014-01-03T23:50:00.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<p>In previous articles I showed how to <a href="http://jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html">setup Emacs Org-reveal &amp; Reveal.js</a> to <a href="http://jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html">generate your own presentations</a> from Emacs Org-mode files.  This time I’ll show you how to publish those presentations on <a href="http://pages.github.com/" target="_blank" rel="noopener">Github Pages</a> as I have done for <a href="http://jr0cket.github.io/slides" target="_blank" rel="noopener">my own presentations</a>.</p><a id="more"></a><p><a href="http://pages.github.com/" target="_blank" rel="noopener">Github Pages</a> are a great place for publishing your <a href="http://lab.hakim.se/reveal-js/" target="_blank" rel="noopener">Reveal.js</a> presentations or any static web content.  For existing repositories you simply commit your content to a <code>gh-pages</code> branch or you can create a specific user or organisation repository and commit to the <code>master</code> branch.</p><blockquote><p>Github Pages are great for any websites that is self-contained, in that there is no reliance on a database or other services running locally.  You can even create great looking pages without any coding by using the Github authoring tool, as I have done with my Github user home page.</p></blockquote><h2 id="How-to-use-Github-pages"><a href="#How-to-use-Github-pages" class="headerlink" title="How to use Github pages"></a>How to use Github pages</h2><p><strong>Existing code repositories</strong><br>If you already have a repository for your code and want to add web page documentation, then you can simply add a <code>gh-pages</code> branch and commit all your documentation to that branch.</p><p><strong>Content only repositories</strong><br>If you only have content then you can create a user or organisation repository.  This is a specifically named repository in the form of <code>name.github.io</code>  where name is the exact name of your Github user account or the Github organisation you are part of.</p><p>As my Github user account name is jr0cket I created an repository named <code>jr0cket.github.io</code>.</p><p>Once created, you can type in the name of this repository into your browser and it will display any content you have committed into the repository (and pushed it to Github).</p><p><strong>Separating slide content into their own repository</strong><br>As I planed to create a number of presentations, I use both an account repository as the home page and created a new repository called slides to host all my presentations.  This allows all my presentations to be easily cloned or forked by others easily without getting content that is only relevant to me on my Github pages home page. </p><p>Keeping the presentations all in one repository keeps things simple should I define my own Reveal.js themes or if there are Reveal.js updates.</p><p>I added  everything to the gh-pages branch (reveal.js, images, org &amp; generated html files).  Then I generate the Reveal.js slides locally using org-reveal in Emacs, so I can check they look okay.  Once I am happy with the slides I commit the html and .org files to Git and push them up to Github.</p><h2 id="Setting-up-a-Github-Pages-account-repository"><a href="#Setting-up-a-Github-Pages-account-repository" class="headerlink" title="Setting up a Github Pages account repository"></a>Setting up a Github Pages account repository</h2><p>Creating an user repository on Github is just the same as for any other repository, except that the name must match the form name.github.io - where name is exactly the same as you Github user name.</p><p>I created a new repository called <code>jr0cket.github.io</code>, this has a web address (URL) of <a href="http://jr0cket.github.io" target="_blank" rel="noopener">http://jr0cket.github.io</a></p><p>I used the Automatic Page Generator from Github to create the site without coding and with a handful of nice templates to choose from.  You can of course add your own HTML, CSS &amp; JavaScript if you wish.  The Automatic Page Generator is in on the Settings page of your repository, under the Github pages section.  This section shows you the repository URL and a button to generate a page for you.</p><p>If you are going to use your user or org repository for your slides, then jump to the secion on “Adding Reveal.js to your repository”<br>Creating a repository for your Reveal.js slides</p><p>If you don’t already have a Github repository for your slides (and are not using your user or org repository), go to your account on Github and create a new repository.</p><p>Then clone your Github repository locally (substituting the address of your repository)<br>git clone <a href="https://github.com/user/repository.git" target="_blank" rel="noopener">https://github.com/user/repository.git</a></p><h2 id="Create-an-orphaned-gh-pages-branch"><a href="#Create-an-orphaned-gh-pages-branch" class="headerlink" title="Create an orphaned gh-pages branch"></a>Create an orphaned gh-pages branch</h2><p>Github pages publishes content only from the branch gh-pages (unless you are using a user or org repository).  In your local repository, create a new branch called gh-pages.  According to Github, the gh-pages branch should be an orphaned branch.</p><pre><code>cd repositorygit checkout --orphan gh-pages</code></pre><p>An orphaned branch is one that is not connected to another branch, in this case its not attached to master.  Technically I don’t think gh-pages branch needs to be orphaned to publish your content, but this is the approach that Github recommends.</p><p>Once you have the gh-pages branch you can commit your files to that branch as normal. </p><pre><code>git add .git commit -m &quot;First pages commit&quot;git push origin gh-pages</code></pre><p>Pushing your Reveal.js slides at this point will not give you the desired results, as we haven’t added the Reveal.js files to the repository.  So lets do that next.</p><h2 id="Adding-Reveal-js-to-your-repository"><a href="#Adding-Reveal-js-to-your-repository" class="headerlink" title="Adding Reveal.js to your repository"></a>Adding Reveal.js to your repository</h2><p>You need to provide the JavaScript and CSS files from Reveal.js to make your slides display correctly.  I copy the following folders from within the reveal.js folder into the root of my slides project</p><pre><code>cp /path/to/revealjs/css    ~/my-slidescp /path/to/revealjs/js     ~/my-slidescp /path/to/revealjs/lib    ~/my-slidescp /path/to/revealjs/plugin ~/my-slides</code></pre><p>You also need to check that the HTML for your web pages references Reveal.js files correctly.  The best way to do this is in the configuration for Emacs Org-reveal.</p><p>In my Org-reveal setup, I have defined the root for the Reveal.js files in my live-pack init.el file as follows:</p><pre><code>(setq org-reveal-root &quot;&quot;)</code></pre><p>So long at this org-reveal setting is loaded, it shouldn’t matter which file you add it to in your Emacs configuration.</p><p>The HTML you generate with Org-reveal in Emacs should have references to the Reveal.js includes in the <head><meta name="generator" content="Hexo 3.9.0"> section.  Here is an example:</head></p><pre><code>&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;title&gt;(My presentation title)&lt;/title&gt;&lt;meta name=&quot;author&quot; content=&quot;(John Stevenson)&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;./css/reveal.min.css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;./css/theme/jr0cket.css&quot; id=&quot;theme&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;./css/print/pdf.css&quot; type=&quot;text/css&quot; media=&quot;print&quot;/&gt;  &lt;meta name=&quot;description&quot; content=&quot;My presentation title&quot;&gt;&lt;/head&gt;</code></pre><h2 id="The-final-push"><a href="#The-final-push" class="headerlink" title="The final push"></a>The final push</h2><p>Then push the Reveal.js files to your Github repository (and any updated to your Org &amp; html files)</p><pre><code>git add .git commit -m &quot;Adding Reveal.js files for presentation&quot;git push origin gh-pages</code></pre><h2 id="Browsing-your-Slides"><a href="#Browsing-your-Slides" class="headerlink" title="Browsing your Slides"></a>Browsing your Slides</h2><p>If you added your slides to a user or org repository, then you should be able to browse to <a href="http://name.github.io" target="_blank" rel="noopener">http://name.github.io</a> where name is your Github user or org name (eg. <a href="http://jr0cket.github.io)" target="_blank" rel="noopener">http://jr0cket.github.io)</a>.</p><p>If, like me, you created a seperate repository for all your slides, you can brows them by going to <a href="http://name.github.io/repo-name" target="_blank" rel="noopener">http://name.github.io/repo-name</a> where name is your Github user name and repo-name is the name of the repository you added Reveal.js and your slides to (eg. <a href="http://jr0cket.github.io/slides)" target="_blank" rel="noopener">http://jr0cket.github.io/slides)</a>.</p><p>Note that you need to add the html filename to the URL to browse your presentation, or as I have done add links to the page on jr0cket.github.io</p><h2 id="Using-Hub-as-an-alternative-way-to-create-your-Github-pages-repository"><a href="#Using-Hub-as-an-alternative-way-to-create-your-Github-pages-repository" class="headerlink" title="Using Hub as an alternative way to create your Github pages repository"></a>Using Hub as an alternative way to create your Github pages repository</h2><ul><li>Install <a href="http://hub.github.com/" target="_blank" rel="noopener">Hub</a></li><li>Create a folder called <code>name.github.io</code> on your laptop, where <em>name</em> is your Github user name or organisation name</li><li>Inside that folder, initialise a git repository - <code>git init</code></li><li>Rename the master branch to gh-pages - <code>git branch -m gh-pages</code></li><li>Use hub to to create the repository on github - <code>hub create -d &quot;optional description of the repository&quot;</code></li></ul><p>If you want to specify the repository name using hub, use the command form - <code>hub create account-name.github.io -d &quot;optional description of the repository&quot;</code></p><ul><li>Create and commit your content in the local repository on the gh-branch, then push the <code>gh-pages branch to github - github push -u origin gh-pages</code></li></ul><p>The <code>-u</code> option sets github to be the default remote repository to and the gh-pages the default branch.  So when you do a push or pull you dont need to specify remote repository or branch you can just do git push and git pull</p><h2 id="Example-Reveal-js-presentations-on-Github-pages"><a href="#Example-Reveal-js-presentations-on-Github-pages" class="headerlink" title="Example Reveal.js presentations on Github pages"></a>Example Reveal.js presentations on Github pages</h2><p>See my <a href="http://jr0cket.github.io/slides" target="_blank" rel="noopener">Github page</a> for a list of my presentations created with Emacs Org-mode and Reveal.js.</p><p>Thank you.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In previous articles I showed how to &lt;a href=&quot;http://jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html&quot;&gt;setup Emacs Org-reveal &amp;amp; Reveal.js&lt;/a&gt; to &lt;a href=&quot;http://jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html&quot;&gt;generate your own presentations&lt;/a&gt; from Emacs Org-mode files.  This time I’ll show you how to publish those presentations on &lt;a href=&quot;http://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Pages&lt;/a&gt; as I have done for &lt;a href=&quot;http://jr0cket.github.io/slides&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;my own presentations&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="presenting" scheme="http://jr0cket.co.uk/categories/presenting/"/>
    
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="revealjs" scheme="http://jr0cket.co.uk/tags/revealjs/"/>
    
  </entry>
  
  <entry>
    <title>Github Pages for Reveal.js Slides Created With Emacs Org-Mode</title>
    <link href="http://jr0cket.co.uk/2014/01/github-pages-for-revealjs-slides-via-emacs-org-mode.html.html"/>
    <id>http://jr0cket.co.uk/2014/01/github-pages-for-revealjs-slides-via-emacs-org-mode.html.html</id>
    <published>2014-01-03T13:34:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-thumbnail"><p>In previous articles I showed how to <a href="http://blog.jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html" target="_blank" rel="noopener">setup Emacs Org-reveal &amp; Reveal.js</a> to <a href="http://blog.jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html" target="_blank" rel="noopener">generate your own presentations</a> from Emacs Org-mode files.  This time I’ll show you how to publish those presentations on <a href="http://pages.github.com/" target="_blank" rel="noopener">Github Pages</a> as I have done for <a href="http://jr0cket.github.io/slides" target="_blank" rel="noopener">my own presentations</a>.</p><a id="more"></a><p><a href="http://pages.github.com/" target="_blank" rel="noopener">Github Pages</a> are a great place for publishing your <a href="http://lab.hakim.se/reveal-js/" target="_blank" rel="noopener">Reveal.js</a> presentations or any static web content. For existing repositories you simply commit your content to a <em>gh-pages branch</em> or to the <em>master branch</em> of a user or organisation repository.</p><blockquote><p><a href="http://pages.github.com/" target="_blank" rel="noopener">Github Pages</a> are great for websites that is self-contained, in that there is no reliance on a database or other services running locally.  You can even create great looking pages without any coding by using the Github authoring tool.</p></blockquote><h1 id="Existing-code-repositories"><a href="#Existing-code-repositories" class="headerlink" title="Existing code repositories"></a>Existing code repositories</h1><p>If you already have a repository for your code and want to add web page documentation, then you can simply add a <em>gh-pages branch</em> and commit your web content to that branch.</p><img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-code"><h1 id="Content-only-repositories"><a href="#Content-only-repositories" class="headerlink" title="Content only repositories"></a>Content only repositories</h1><p>If you only have content then you can use a <em>user</em> or <em>organisation</em> repository.  This is a specifically named repository in the form of <code>name.github.io</code> where <code>name</code> is the exact name of your Github account or Github organisation you are part of.</p><p>In my case I <a href="https://github.com/new" target="_blank" rel="noopener">created a repository</a> named <code>jr0cket.github.io</code>, as my Github user account name is jr0cket. </p><p>Once created, you can type in the name of this repository into your browser and it will display any content you have committed into the repository and pushed it to Github.  </p><p>Your user or org repository also forms the entry point for other project, so if you have a project called <em>slides</em> with web content in its <em>gh-pages</em> branch, you can see that content using the address: <a href="http://jr0cket.github.io/slides" target="_blank" rel="noopener">http://jr0cket.github.io/slides</a></p><h1 id="Separating-slide-content-into-their-own-repository"><a href="#Separating-slide-content-into-their-own-repository" class="headerlink" title="Separating slide content into their own repository"></a>Separating slide content into their own repository</h1><p>As I planed to create a number of presentations, I use both an account repository as the home page and created a new repository called slides to host all my presentations. &nbsp;This allows all my presentations to be easily cloned or forked by others easily without getting content that is only relevant to me on my Github pages home page. </p><p>Keeping the presentations all in one repository keeps things simple should I define my own Reveal.js themes or if there are Reveal.js updates.</p><p>I added &nbsp;everything to the <em>gh-pages</em> branch (reveal.js, images, org &amp; generated html files). &nbsp;Then I generate the Reveal.js slides locally using org-reveal in Emacs, so I can check they look okay. &nbsp;Once I am happy with the slides I commit the html and .org files to Git and push them up to Github.</p><h1 id="Setting-up-a-Github-Pages-user-account-repository"><a href="#Setting-up-a-Github-Pages-user-account-repository" class="headerlink" title="Setting up a Github Pages user account repository"></a>Setting up a Github Pages user account repository</h1><p>Creating an user repository on Github is just the same as for any other repository, except that the name must match the form name.github.io - where name is exactly the same as you Github user name.</p><p>I created a new repository called <code>jr0cket.github.io</code>, this has a web address (URL) of <a href="http://jr0cket.github.io/" target="_blank" rel="noopener">http://jr0cket.github.io</a></p><p>I used the Automatic Page Generator from Github to create the site without coding and with a handful of nice templates to choose from. &nbsp;You can of course add your own HTML, CSS &amp; JavaScript if you wish. &nbsp;The Automatic Page Generator is in on the Settings page of your repository, under the Github pages section. &nbsp;This section shows you the repository URL and a button to generate a page for you.</p><p>If you are going to use your user or org repository for your slides, then jump to the secion on “Adding Reveal.js to your repository”</p><h1 id="Creating-a-repository-for-your-Reveal-js-slides"><a href="#Creating-a-repository-for-your-Reveal-js-slides" class="headerlink" title="Creating a repository for your Reveal.js slides"></a>Creating a repository for your Reveal.js slides</h1><p>If you don’t already have a Github repository for your slides (and are not using your user or org repository), go to your account on Github and <a href="https://github.com/new" target="_blank" rel="noopener">create a new repository</a>.</p><pre><code>git clone https://github.com/username/repository.git</code></pre><h1 id="Create-an-orphaned-gh-pages-branch"><a href="#Create-an-orphaned-gh-pages-branch" class="headerlink" title="Create an orphaned gh-pages branch"></a>Create an orphaned gh-pages branch</h1><p>Github pages publishes content only from the branch gh-pages (unless you are using a user or org repository). In your local repository, create a new branch called gh-pages. According to Github, the gh-pages branch should be an orphaned branch.</p><pre><code>cd your-local-repositorygit checkout --orphan gh-pages</code></pre><blockquote><p>An orphaned branch is one that is not connected to another branch, in this case its not attached to master. Technically I don’t think gh-pages branch needs to be orphaned to publish your content, especially if there is nothing in the master branch, but this is <a href="https://help.github.com/articles/creating-project-pages-manually" target="_blank" rel="noopener">the approach that Github recommends</a>.</p></blockquote><p>Once you have the gh-pages branch you can commit your files to that branch as normal. </p><pre><code>git add .git commit -m &quot;Adding Reveal.js files for presentation&quot;git push origin gh-pages</code></pre><p>Pushing your Reveal.js slides at this point will not give you the desired results, as we haven’t added the Reveal.js files to the repository. &nbsp;So lets do that next.</p><h1 id="Adding-Reveal-js-to-your-repository"><a href="#Adding-Reveal-js-to-your-repository" class="headerlink" title="Adding Reveal.js to your repository"></a>Adding Reveal.js to your repository</h1><p>You need to provide the JavaScript and CSS files from Reveal.js to make your slides display correctly. &nbsp;I copy the following folders from within the reveal.js folder into the root of my slides project</p><pre><code>cd  /path/to/revealjs/css    ~/my-slidescd  /path/to/revealjs/js     ~/my-slidescd  /path/to/revealjs/lib    ~/my-slidescd  /path/to/revealjs/plugin ~/my-slides</code></pre><p>You also need to check that the HTML for your web pages references Reveal.js files correctly. &nbsp;The best way to do this is in the configuration for Emacs Org-reveal.</p><p>In my Org-reveal setup, I have defined the root for the Reveal.js files in my live-pack <code>init.el</code> file as follows:</p><pre><code>(setq org-reveal-root &quot;&quot;)</code></pre><p>So long at this org-reveal setting is loaded, it shouldn’t matter which file you add it to in your Emacs configuration.</p><p>The HTML you generate with Org-reveal in Emacs should have references to the Reveal.js includes in the <code>&lt;head&gt;</code> section. Here is an example:</p><pre><code>&lt;html lang=”en”&gt;&lt;head&gt;  &lt;meta charset=”utf-8”/&gt;  &lt;title&gt;(My presentation title)&lt;/title&gt;  &lt;meta name=”author” content=”(John Stevenson)”/&gt;  &lt;link rel=”stylesheet” href=”./css/reveal.min.css”/&gt;  &lt;link rel=”stylesheet” href=”./css/theme/jr0cket.css” id=”theme”/&gt;  &lt;link rel=”stylesheet” href=”./css/print/pdf.css” type=”text/css” media=”print”/&gt;  &lt;meta name=”description” content=”My presentation title“&gt;&lt;/head&gt;</code></pre><h1 id="The-final-push"><a href="#The-final-push" class="headerlink" title="The final push"></a>The final push</h1><p>Then push the Reveal.js files to your Github repository (and any updated to your Org &amp; html files)</p><pre><code>git add .git commit -m &quot;Adding Reveal.js files for presentation&quot;git push origin gh-pages</code></pre><h1 id="Browsing-your-Slides"><a href="#Browsing-your-Slides" class="headerlink" title="Browsing your Slides"></a>Browsing your Slides</h1><p>If you added your slides to a user or org repository, then you should be able to browse to <a href="http://name.github.io" target="_blank" rel="noopener">http://name.github.io</a> where name is your Github user or org name (eg. <a href="http://jr0cket.github.io)" target="_blank" rel="noopener">http://jr0cket.github.io)</a>.</p><p>If, like me, you created a seperate repository for all your slides, you can brows them by going to <a href="http://name.github.io/repo-name" target="_blank" rel="noopener">http://name.github.io/repo-name</a> where name is your Github user name and repo-name is the name of the repository you added Reveal.js and your slides to (eg. <a href="http://jr0cket.github.io/slides)" target="_blank" rel="noopener">http://jr0cket.github.io/slides)</a>.</p><p>Note that you need to add the html filename to the URL to browse your presentation, or as I have done add links to the page on <a href="http://jr0cket.github.io/slides" target="_blank" rel="noopener">jr0cket.github.io</a></p><h1 id="Using-Hub-as-an-alternative-way-to-create-your-Github-pages-repository"><a href="#Using-Hub-as-an-alternative-way-to-create-your-Github-pages-repository" class="headerlink" title="Using Hub as an alternative way to create your Github pages repository"></a>Using Hub as an alternative way to create your Github pages repository</h1><p>Hub is a command line tool for working with git repositories and Github.  Hub makes it easy to create and fork repositories on Github without having to visit the Github website.</p><ul><li>Install <a href="http://hub.github.com/" target="_blank" rel="noopener"><strong>Hub</strong></a></li><li>Create a folder called <code>name.github.io</code> on your laptop, where name is your Github user name or organisation name</li><li>Inside that folder, initialise a git repository - <code>git init</code></li><li>Rename the master branch to gh-pages - <code>git branch -m gh-pages</code></li><li><p>Use hub to to create the repository on github - <code>hub create -d &quot;optional description of the repository&quot;</code><br>– If you want to specify the repository name using hub, use the command form - <code>hub create account-name.github.io -d &quot;optional description of the repository&quot;</code></p></li><li><p>Create and commit your content in the local repository on the gh-branch, then push the gh-pages branch to github <code>github push -u origin gh-pages</code></p></li></ul><p>– The -u option sets origin to be the default remote repository to and the gh-pages the default branch.  So next time you do a push or pull you dont need to specify the remote repository or branch, you can simply do <code>git push</code> and <code>git pull</code></p><h1 id="Example-Reveal-js-presentations-on-Github-pages"><a href="#Example-Reveal-js-presentations-on-Github-pages" class="headerlink" title="Example Reveal.js presentations on Github pages"></a>Example Reveal.js presentations on Github pages</h1><p>See <a href="http://jr0cket.github.io/slides" target="_blank" rel="noopener">my Github page</a> for my published presentations, created with Emacs Org-mode, Org-reveal and Reveal.js.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;In previous articles I showed how to &lt;a href=&quot;http://blog.jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;setup Emacs Org-reveal &amp;amp; Reveal.js&lt;/a&gt; to &lt;a href=&quot;http://blog.jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;generate your own presentations&lt;/a&gt; from Emacs Org-mode files.  This time I’ll show you how to publish those presentations on &lt;a href=&quot;http://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Pages&lt;/a&gt; as I have done for &lt;a href=&quot;http://jr0cket.github.io/slides&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;my own presentations&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/tags/dev-tools/"/>
    
      <category term="org-mode" scheme="http://jr0cket.co.uk/tags/org-mode/"/>
    
      <category term="github-pages" scheme="http://jr0cket.co.uk/tags/github-pages/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu Gnome - Is It Better Than Ubuntu?</title>
    <link href="http://jr0cket.co.uk/2013/10/ubuntu-gnome-is-it-better-than-ubuntu.html.html"/>
    <id>http://jr0cket.co.uk/2013/10/ubuntu-gnome-is-it-better-than-ubuntu.html.html</id>
    <published>2013-10-14T22:17:00.000Z</published>
    <updated>2022-01-02T20:20:15.310Z</updated>
    
    <content type="html"><![CDATA[<img src="http://www.gnome.org/wp-content/themes/gnome-grass/images/gnome-logo.png" class="img-thumbnail"><p>With a new version of <a href="http://www.ubuntu.com/" target="_blank" rel="noopener">Ubuntu</a> this month, I asked myself if I would get more out of one of the many other Linux distributions.  Here is what I learnt.</p><a id="more"></a><p>I’ve used Ubuntu as my main Linux distribution since I changed from <a href="http://www.debian.org/" target="_blank" rel="noopener">Debian</a> in 2005.  I started using Debian in 1995, so if I did change distributions I wanted to stay with the <em>.deb</em> packaging system which I value so much.  </p><p>Although I am weary of the reductions of features the Gnome team have made recently, <a href="http://ubuntugnome.org/" target="_blank" rel="noopener"><strong>Ubuntu Gnome</strong></a> was the first alternative distribution I tried and was surprised to find I quite like it.</p><img src="http://3.bp.blogspot.com/-jRj631yZJzY/UlsS3eLBbrI/AAAAAAAAL3U/FKLSLdKGn_I/s1600/ubuntu-gnome-my-basic-desktop.png" class="img-code"><p>My Ubuntu Gnome desktop using Gnome Shell and a few extensions</p><h2 id="Installing-Ubuntu-Gnome"><a href="#Installing-Ubuntu-Gnome" class="headerlink" title="Installing Ubuntu Gnome"></a>Installing Ubuntu Gnome</h2><p>This is not any different from the normal Ubuntu install and everything went well on my Lenovo x201T.</p><p>I selected to install Ubuntu Gnome over the entire hard drive (SSD) and use an encrypted disk and LVM (just in case I want to re-organise partitions at a later date).  I chose to get updates and multi-media codecs (for playing music and videos) during the installation too.</p><p>After about 20-30 minutes I had a new OS for my laptop, all ready to use.  A quick reboot and within 10 seconds I am logging in to Ubuntu Gnome.</p><h2 id="First-Impressions"><a href="#First-Impressions" class="headerlink" title="First Impressions"></a>First Impressions</h2><p>Ubuntu Gnome uses Gnome shell and there is a lot of commonality between it and Ubuntu Unity desktop.  To my surprise though I found I quickly started liking Ubuntu Gnome for lots of little reasons.  It helped that I had a quick look at the <a href="https://wiki.gnome.org/GnomeShell/CheatSheet" target="_blank" rel="noopener">Gnome Shell cheat sheet</a> which gives a great overview of the main features.</p><h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><p>Gnome shell is really fast and responsive and I haven’t had any slow-downs as I increase the amount of apps running. As Ubuntu Unity is pretty quick too, then I don’t see any speed advantage.</p><p>Ubuntu Unity seems to use just a little bit more memory, but that may be due to more packages installed and extra services running (eg. UbuntuOne). Its not a significant difference.</p><h3 id="Automatic-Virtual-Desktops"><a href="#Automatic-Virtual-Desktops" class="headerlink" title="Automatic Virtual Desktops"></a>Automatic Virtual Desktops</h3><p>Gnome shell automatically creates new virtual desktops as you add applications and deletes desktops when you close all apps on that desktop.  I like to keep one app per desktop, so its great that you can launch an app from the dash with the middle mouse button (the Lenovo laptops have 3 buttons) and it opens in a new desktop. When I close the app, Gnome shell tidies away my desktop, helping me keep more organised.  This is a feature I would love to have in Ubuntu.</p><p>Gnome Shell has vertically arranged desktops, so each desktop is stacked one on top of the other.     I quickly came to prefer this over the default grid of Ubuntu Unity.  Although you can change Unity’s grid layout with Ubuntu Tweak, I haven’t seen the ability to automatically create an delete desktops.</p><h2 id="The-Dash"><a href="#The-Dash" class="headerlink" title="The Dash"></a>The Dash</h2><p>The Gnome Shell launcher similar to Ubuntu Unity, however in Gnome Shell its attached to the overlay rather than being their on the desktop.  So with Gnome shell I only see the launcher when I press the Super key (as I always run my apps maximised).  This keeps my desktop very simple.</p><p>Whilst the launcher in Ubuntu Unity has lots of great features to help you launch and switch to your apps, I found I didn’t really use them.  I just set Unity to auto-hide the launcher </p><h2 id="Notifications"><a href="#Notifications" class="headerlink" title="Notifications"></a>Notifications</h2><p>Gnome shell displays notifications on the bottom of the desktop rather than the top right corner in Ubuntu Unity. I prefer the placement in Ubuntu Unity, although they both could be smaller so they are less intrusive.</p><h2 id="Unwanted-software"><a href="#Unwanted-software" class="headerlink" title="Unwanted software"></a>Unwanted software</h2><p>There were a few packages and services that came with Ubuntu Gnome I didnt require, but not many.  The main packages I removed were:</p><ul><li>epiphany - an messaging client (I use Google for that)</li><li>spamassassin - email spam service (again I use Google)</li></ul><p>To remove the packages I just used the command line, as I knew the specific package names it was quicker than launching the Ubuntu software center</p><pre><code>apt-get remove --purge package-name</code></pre><p>To find out if there were any services running that I didnt need I use the command line again to list the status of all services currently installed:</p><pre><code>sudo service --status-all</code></pre><p>From this command I discovered spam assassin and removed it as above.</p><h2 id="Gnome-Shell-Extensions"><a href="#Gnome-Shell-Extensions" class="headerlink" title="Gnome Shell Extensions"></a><a href="https://extensions.gnome.org/" target="_blank" rel="noopener">Gnome Shell Extensions</a></h2><p>Gnome Shell allows customisations via extensions (written in JavaScript and possibly other languages) and there is <a href="https://extensions.gnome.org/" target="_blank" rel="noopener">a website full of them</a>.  The Gnome Shell extensions are really easy to use, its just like using the Chrome or Firefox extensions.</p><p>Each extension on the website has an on/off switch.  Switching on prompts you to accept that the package will be installed.  For some extensions there is also a tool icon that you can press to configure the extensions once installed.  You can manage your installed extensions from <a href="https://extensions.gnome.org/local/" target="_blank" rel="noopener">https://extensions.gnome.org/local/</a>.</p><p>These extensions give a really easy way to add features and Gnome Shell and without them it would have diminished the experience amd I would have stopped using Gnome Shell then and there.</p><p>The only issue with these extensions is that they can become outdated and break, with each release of Gnome Shell.</p><h3 id="Extensions-added"><a href="#Extensions-added" class="headerlink" title="Extensions added"></a>Extensions added</h3><p><strong>AppIndicator Status</strong></p><p>I use Dropbox to sync important files between different laptops (Linux, Mac) and although its easy to install Dropbox in Ubuntu Gnome, the status panel indicator for dropbox does not display.  By adding AppIndicator extension then the dropbox icon appears and I can control syncing of my files again.</p><p><strong><a href="https://extensions.gnome.org/extension/55/media-player-indicator/" target="_blank" rel="noopener">Media Player Indicator</a></strong></p><p>In Ubuntu Unity you can start and control the default music player (Rhythmbox) from the volume indicator.  The Media Player Indicator adds that functionality in Gnome Shell.  It worked for Rhythmbox although the Playlists didnt show up in the volume indicator.</p><p><strong> <a href="https://extensions.gnome.org/extension/545/hide-top-bar/" target="_blank" rel="noopener">Hide Top bar</a></strong></p><p>The biggest thing that put me off Gnome Shell at first was the wasted space at the top of the screen.  First there is the Gnome Shell menu bar, then the window decoration for the application, then the application menu and then the content of the app. From what I have read (cheat sheet) Gnome Shell will go the same route as Ubuntu Unity and put app menus in the top panel, making better use of the space.  Until then, I find <a href="https://extensions.gnome.org/extension/545/hide-top-bar/" target="_blank" rel="noopener">Hide Tob Bar</a> very welcome.  I have it set to auto hide and only show when the mouse approaches it.</p><p><strong><a href="https://extensions.gnome.org/extension/690/easyscreencast/" target="_blank" rel="noopener">EasyScreenCast</a></strong></p><p>Gnome Shell as screen casting software built in so you can record your desktop using <code>Control+Shift+Alt+R</code>.  Rather than have to remember that keyboard combo, EasyScreenCast gives you and indicator to control the recording.</p><p>EasyScreenCast seems to work really well and uses the <a href="http://www.webmproject.org/" target="_blank" rel="noopener">webm codec</a> by default, so you can just upload that straight to YouTube.</p><h3 id="Extensions-to-look-at-later"><a href="#Extensions-to-look-at-later" class="headerlink" title="Extensions to look at later"></a>Extensions to look at later</h3><p><a href="https://extensions.gnome.org/extension/719/fast-user-switch/" target="_blank" rel="noopener">Fast user switch</a> - enables you to switch users without having to go via gdm</p><p><a href="https://extensions.gnome.org/extension/584/taskbar/" target="_blank" rel="noopener">Task bar</a> - displays icons of running applications on the top panel.  If I run more than one app per desktop this may be useful.</p><p><a href="https://extensions.gnome.org/extension/508/uptime-indicator/" target="_blank" rel="noopener">Uptime indicator</a> - shows how long in minutes it has been since the last boot.  Clicking on the indicator shows you the time Ubuntu Gnome was started.</p><p><a href="https://extensions.gnome.org/extension/53/pomodoro/" target="_blank" rel="noopener">Pomodoro time</a> - gives you a countdown to timebox work into 25 minute sessions. This pomodoro technique helps you concentrate on one task and get it done well.</p><p><a href="https://extensions.gnome.org/extension/11/monitor-status-indicator/" target="_blank" rel="noopener">Monitor status indicator</a> - a short-cut for the display controls to quickly manage your display settings.  I had a few problems with a second monitor, not sure if its this extension of Gnome Shell.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>I like Ubuntu Gnome and Gnome Shell enough to give it a try for a few more weeks until the final versions of <a href="http://www.ubuntu.com/" target="_blank" rel="noopener">Ubuntu</a> and <a href="http://ubuntugnome.org/" target="_blank" rel="noopener">Ubuntu Gnome</a> are released. My Lenovo X201T is my spare laptop, so it doesn’t matter if something breaks, I can still do work on my my Lenovo X1 carbon, running Ubuntu.</p><p>Things in Ubuntu Gnome are changing quite a bit and there is a tendency for Gnome Shell extensions to break with new releases.  To see what is coming next have a look at the <a href="http://www.omgubuntu.co.uk/2013/09/10-best-features-gnome-3-10" target="_blank" rel="noopener">Gnome 3.10 features and changes</a>.</p><p>One thing that may make a difference is that both distributions will be replacing X windows.  Ubuntu has created <a href="https://wiki.ubuntu.com/Mir/" target="_blank" rel="noopener">Mir</a> and the Gnome project is behind <a href="https://wiki.gnome.org/Wayland" target="_blank" rel="noopener">Wayland</a>.  Its going to be interesting to see which approach works out best over the next few releases.</p><blockquote><p>I did try <a href="https://www.archlinux.org/" target="_blank" rel="noopener">Arch Linux</a> for a weekend and although there are some great things with the distribution, for now it just seems to eat too much time in setting everything up and learning the different tooling.  Although there is a lot of documentation, I found myself having to read pages and pages of content and not always finding the answers I was looking for.</p></blockquote><h2 id="6-month-later"><a href="#6-month-later" class="headerlink" title="6 month later"></a>6 month later</h2><p>I am still using Ubuntu as my prefered Linux distribution.  Gnome Shell has still a long way to come to offer the features I need and the extensions I want to use break to often to be fun fixing.</p><p>When Gnome Shell becomes more evolved and incorporates Wayland, then it will be time to give it another try and see how it stacks up to Ubuntu, Unity and Mir.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://www.gnome.org/wp-content/themes/gnome-grass/images/gnome-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;With a new version of &lt;a href=&quot;http://www.ubuntu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ubuntu&lt;/a&gt; this month, I asked myself if I would get more out of one of the many other Linux distributions.  Here is what I learnt.&lt;/p&gt;
    
    </summary>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/categories/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Creating Cool Slides With Emacs Org-Mode and Revealjs</title>
    <link href="http://jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html.html"/>
    <id>http://jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html.html</id>
    <published>2013-10-03T14:55:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail"><p><a href="http://lab.hakim.se/reveal-js" target="_blank" rel="noopener">Reveal.js</a> has a whole bag of tricks to help you highlight the concepts in your presentations. I’ll show you how to write presentations with Emacs &amp; Org-mode that make use of these features, whilest keeping your content as markdown text.  I use a <a href="https://raw.github.com/jr0cket/slides/gh-pages/template-jr0cket.org" target="_blank" rel="noopener">simple template</a> with all the common features there as examples I can copy-n-paste.</p><p>I also have a <a href="http://jr0cket.github.io/slides" target="_blank" rel="noopener">Github pages site with example slides</a> I have created.</p><a id="more"></a><blockquote><p>In a previous article I showed you <a href="http://blog.jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html" target="_blank" rel="noopener">how to configure Emacs, Org-reveal and Reveal.js</a> to create HTML5 presentations.</p></blockquote><h1 id="Creating-your-presentation"><a href="#Creating-your-presentation" class="headerlink" title="Creating your presentation"></a>Creating your presentation</h1><p>Using Emacs, create a file for your presentation and ensure that the filename has the .org extension.</p><pre><code>C-x C f my-presentation.org</code></pre><blockquote><p>You can create a new file in Emacs just by opening a file with the new filename.</p></blockquote><h1 id="Defining-the-Title-Slide"><a href="#Defining-the-Title-Slide" class="headerlink" title="Defining the Title Slide"></a>Defining the Title Slide</h1><p>There is a special set of tags you can use to define the title slide, including the theme and style of the overall presentation.</p><p>At the top of the <code>my-presentation.org</code> file, add <code>Title</code>, <code>Author</code> and <code>Email</code> tags to create the tile slide.</p><pre><code>#+Title: Presenting with Emacs#+Author: John Stevenson#+Email: @jr0cket</code></pre><blockquote><p>At first I could not figure out how to add a twitter handle rather than an email address, then I realised I could put anytihng for the email address.  So I just put @jr0cket as the email address and it displays just fine on the rendered slides.</p></blockquote><h1 id="Setting-the-Presentation-Theme-and-Slide-behaviour"><a href="#Setting-the-Presentation-Theme-and-Slide-behaviour" class="headerlink" title="Setting the Presentation Theme and Slide behaviour"></a>Setting the Presentation Theme and Slide behaviour</h1><p>Once you have defined the overall configuration of the presentation, you can add a table of contents or include special formatting libraries like mathjax. </p><p>I never use the table of contents as unless you have a short presentation it will run off the bottom of the screen.  Here is an example of not having a table of contents, but having mathjax available:</p><pre><code>#+OPTIONS: toc:nil reveal_mathjax:t</code></pre><h2 id="Choosing-Themes"><a href="#Choosing-Themes" class="headerlink" title="Choosing Themes"></a>Choosing Themes</h2><p>You can choose from several built in presentations, including <strong>default</strong>, <strong>beige</strong>, <strong>sky</strong>, <strong>night</strong> (my favorite), <strong>serif</strong>, <strong>simple</strong>, <strong>moon</strong></p><p>You can also make your own theme by creating a new CSS file and defining styles to for that theme.</p><p>Define which theme you want using the code:</p><pre><code>#+REVEAL_THEME: night</code></pre><h2 id="Transitions"><a href="#Transitions" class="headerlink" title="Transitions"></a>Transitions</h2><p>There are several built in styles of transition effects to move from one slide to another.  I find linear the most pleasing, as it simply slides the content in from the right or bottom to.  Cube is quite a nice rotating cube in the middle of the screen, so you may not get the full benefit of a wide screen display. Zoom is a bit to much for my delicate eyes.</p><p>The available tranistions include: <strong>default, cube, page, concave, zoom, linear, fade, none</strong></p><p>Define a transition before any of the slide content (before the first heading) using the code:</p><pre><code>#+REVEAL_TRANS: linear    </code></pre><h1 id="Defining-Slides"><a href="#Defining-Slides" class="headerlink" title="Defining Slides"></a>Defining Slides</h1><p>Each slide is defined by using a <code>*</code> character in front of the title.  * is the top-level header for an Org-mode file, so you can collapse each slides content using the TAB key to make it easy to navigate whist creating that content.</p><img src="http://github.com/yjwen/org-reveal/raw/master/images/hlevel.png" class="img-code"><p>Using a single <code>*</code> for a number of slide titles will create a series of slides you navigate horizontally.  If you define a slide with two <code>*</code> characters, then you create slides underneath the slide above.  These slides underneath are navigated vertically, giving a 2 dimensional effect to your presentation.</p><pre><code>* title 1* title 2** sub-title 2.1** sub-title 2.2* title 3</code></pre><p>Each title is a seperate slide, however sub-title 2.1 and 2.1 are slides underneath title 2.  If you are on the title 2 slide and you press the left arrow, you will got to title 3 slide.  If you are on title 2 slide and press the down arrow, you will go to slide heading 2.1.</p><p>So with this simple notation you can create a 2-dimentional presentation.</p><h1 id="Adding-Slide-Content"><a href="#Adding-Slide-Content" class="headerlink" title="Adding Slide Content"></a>Adding Slide Content</h1><p>You can place what ever text you want underneath the heading to for the slide content</p><pre><code>* A very interesting slide**This slide is interesting because I am a geek :)  - bullet points can be added in moderation  - dont get too carried away with them</code></pre><h1 id="Adding-Links"><a href="#Adding-Links" class="headerlink" title="Adding Links"></a>Adding Links</h1><p>Links to other web pages and resources can be added by simply including a web address in double square brackets:</p><pre><code>[[web address]]   [[http://www.google.com]]   </code></pre><p>You can also mark text to be a link by placing the link text inside double square brackets as follows:</p><pre><code>[[web address][clickable text]][[http://www.google.co.uk] [Google search engine]]</code></pre><p>Any links defined will use the slide style for their colour, font and any animation styles.</p><h1 id="Including-Images"><a href="#Including-Images" class="headerlink" title="Including Images"></a>Including Images</h1><p>You can include images in the presentation using the same kind of syntax for links.  Simply add the relative path of your image within double brackets</p><pre><code>[[./images/org-reveal.png]]</code></pre><p>This will display an image from the file org-reveal.png in the images folder.  The same form is also used if you want to include images from web</p><pre><code>[[http://web-address/image-name.png]]</code></pre><h1 id="Slide-Colours-and-Background-Images"><a href="#Slide-Colours-and-Background-Images" class="headerlink" title="Slide Colours and Background Images"></a>Slide Colours and Background Images</h1><p>You can set a different colour or image background for each slide, over-riding the presentation them chosen.  This is set by defining properties for each slide using the <code>:PROPERTIES:</code> notation.</p><p>To define the colour of the slide background you can use an RGB coluor value or any supported CSS colour format. Here is a simple example of a slide with a red background </p><pre><code>:PROPERTIES::reveal_background: #FF0000:END:</code></pre><p>When setting a background image simply provide the relative path to that image. You can also make the background image slide in rather than fade in.</p><p>This slide has a background image</p><pre><code>:PROPERTIES::reveal_background: ./logos/github-octopus.png:reveal_background_trans: slide:END:</code></pre><h2 id="Effects-within-Slides"><a href="#Effects-within-Slides" class="headerlink" title="Effects within Slides"></a>Effects within Slides</h2><p>You can animate specific parts of each slide using Fragment Options.  You can make your content <strong>grow</strong>, <strong>shrink</strong>, <strong>roll-in</strong> and <strong>fade-out</strong>.  You can also highlight the text in red, green and blue.</p><ul><li>This slide rolls in text line by line:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#+ATTR_REVEAL: :frag roll-in</span><br><span class="line">- show bullet-points</span><br><span class="line">- one by one</span><br></pre></td></tr></table></figure><ul><li>Highlight the last bulletpoint in red</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- all these bullet-points</span><br><span class="line">- show up on the page</span><br><span class="line">- as soon as its shown</span><br><span class="line"></span><br><span class="line">#+ATTR_REVEAL: :frag highlight-red</span><br><span class="line">- this last one is then highlighted in red</span><br></pre></td></tr></table></figure><h1 id="Generating-your-Reveal-js-presentation"><a href="#Generating-your-Reveal-js-presentation" class="headerlink" title="Generating your Reveal.js presentation"></a>Generating your Reveal.js presentation</h1><p>Once you have your presentation written you can generate the presentation with the command</p><pre><code>M-x org-reveal-export-to-html</code></pre><p>This command creates a single index.html file that contains your whole presentation, except for any images you have used.  The <code>.html</code> file will be have the same name as your org-mode file, so if you created your content in <code>my-presentation.org</code> then you will generate <code>my-presentation.html</code>.</p><p>If your links and images are all correctly referenced in your presentation, then simply opening my-presentation.html file in a browser will show you the end result.</p><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>I really liked the presentations generated by Reveal.js and Org-reveal makes is easy to create presentations without having to hand code any JavaScript.  As my presentations are written in plain text then its easy to manage them with Git and collaborate with others via Github.</p><p>The next step is to get these presentations in the Cloud.  I could use Heroku, although as this is just a static website and then <a href="http://pages.github.com/" target="_blank" rel="noopener"><strong>Github pages</strong></a> makes more sense.  I will cover deploying your presentations to Github pages in a follow-on article.</p><p>I may also create my own theme by customising one of the existing cascading style sheets (CSS files) should I have issues with projectors but at the moment the night theme works well for me.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://lab.hakim.se/reveal-js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Reveal.js&lt;/a&gt; has a whole bag of tricks to help you highlight the concepts in your presentations. I’ll show you how to write presentations with Emacs &amp;amp; Org-mode that make use of these features, whilest keeping your content as markdown text.  I use a &lt;a href=&quot;https://raw.github.com/jr0cket/slides/gh-pages/template-jr0cket.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;simple template&lt;/a&gt; with all the common features there as examples I can copy-n-paste.&lt;/p&gt;
&lt;p&gt;I also have a &lt;a href=&quot;http://jr0cket.github.io/slides&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github pages site with example slides&lt;/a&gt; I have created.&lt;/p&gt;
    
    </summary>
    
      <category term="presenting" scheme="http://jr0cket.co.uk/categories/presenting/"/>
    
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="revealjs" scheme="http://jr0cket.co.uk/tags/revealjs/"/>
    
      <category term="orgmode" scheme="http://jr0cket.co.uk/tags/orgmode/"/>
    
  </entry>
  
  <entry>
    <title>Create HTML5 Presentations Easily With Emacs and Reveal.js</title>
    <link href="http://jr0cket.co.uk/2013/10/create-html5-presentations-emacs-revealjs.html.html"/>
    <id>http://jr0cket.co.uk/2013/10/create-html5-presentations-emacs-revealjs.html.html</id>
    <published>2013-10-03T11:00:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail"><p>Creating presentations with <a href="http://www.gnu.org/software/emacs/" target="_blank" rel="noopener"><strong>Emacs</strong></a> is quick and more collaborative than with other tools I have used.  Using Emacs <a href="http://orgmode.org/" target="_blank" rel="noopener"><strong>Org-mode</strong></a> you can easily structure and navigate your content.  Using  <a href="https://github.com/yjwen/org-reveal" target="_blank" rel="noopener">Org-Reveal</a> you can generate a great looking HTML5 presentation using <a href="https://github.com/hakimel/reveal.js/" target="_blank" rel="noopener"><strong>Reveal.js</strong></a> from your org-mode content.</p><p>I’ll show you how to configure Emacs, <a href="https://github.com/yjwen/org-reveal" target="_blank" rel="noopener">Org-Reveal</a> and Reveal.js so you can create content in plain text and generate a themed, animated slide-deck that supports <a href="http://softwaremaniacs.org/soft/highlight/en/" target="_blank" rel="noopener">syntax highlighting</a> for lots of languages.  As your content is in plan text its easy to collaborate around it with Github.</p><a id="more"></a><blockquote><p>I use <a href="http://overtone.github.io/emacs-live/" target="_blank" rel="noopener">Emacs Live</a> as a base configuration, although there is no dependency on anything in Emacs Live to make this setup work.</p></blockquote><h1 id="What-is-Reveal-js"><a href="#What-is-Reveal-js" class="headerlink" title="What is Reveal.js"></a>What is Reveal.js</h1><p><a href="https://github.com/hakimel/reveal.js/" target="_blank" rel="noopener">Reveal.js</a> is a JavaScript library for creating slides for viewing in a browser, using CSS and JavaScript.  You can write your presentations in HTML or use <a href="http://slid.es/" target="_blank" rel="noopener">Slid.es</a> to live edit and host your presentation in cloud.  There are a whole list of <a href="https://github.com/hakimel/reveal.js/wiki/Example-Presentations" target="_blank" rel="noopener">Example presentations</a> to get an idea of what it Reveljs can do.  I recommend looking at the <a href="http://lab.hakim.se/reveal-js/" target="_blank" rel="noopener">Reveal.js presentation</a> first.  There is also a <a href="http://htmlcheats.com/reveal-js/reveal-js-tutorial-reveal-js-for-beginners/" target="_blank" rel="noopener">beginners tutorial for Reveal.js</a> to help you get going.</p><p>Using Emacs we don’t need to write directly in HTML as we will generate it from our text file using Org-mode.  There is a dependency on Reveal.js library with this approach.</p><h2 id="Installing-Reveal-js"><a href="#Installing-Reveal-js" class="headerlink" title="Installing Reveal.js"></a>Installing Reveal.js</h2><p>1)  Download the <a href="https://github.com/hakimel/reveal.js/releases" target="_blank" rel="noopener">latest version of reveal.js</a></p><p>2)  Extract somewhere sutitable, eg, ~/apps/revealjs if its just for your account or /opt/javascript/revealjs if you have multiple operating system accounts.</p><p>To see an example presentation, open the index.html from the extracted Reveal.js download in a browser.</p><h1 id="Why-use-Emacs-and-Org-mode-for-presentations"><a href="#Why-use-Emacs-and-Org-mode-for-presentations" class="headerlink" title="Why use Emacs and Org-mode for presentations"></a>Why use Emacs and Org-mode for presentations</h1><p>Org-mode is <a href="http://blog.jr0cket.co.uk/2013/08/manage-dev-life-with-emacs-org-mode.html" target="_blank" rel="noopener">a great way to write notes, make presentations and organise tasks</a>.  It is built into Emacs so you don’t need to do any configuration to use it.  Simply create a file with a .org extension (eg. <code>my-presentation.org</code>) and when you open that file in Emacs it will automatically switch on org-mode.</p><p>Org-mode allow you to structure information simply and quickly.  The headings and sub-headings can expand and collapse using the tab key, so you only see the level of detail you need.</p><p>The content is always a text file so you don’t have to worry about any proprietary formatting and as its text its easy to collaborate around using developer tools like Git and Github.</p><h1 id="Configuring-Emacs-Org-mode-and-Org-reveal"><a href="#Configuring-Emacs-Org-mode-and-Org-reveal" class="headerlink" title="Configuring Emacs, Org-mode and Org-reveal"></a>Configuring Emacs, Org-mode and Org-reveal</h1><p>Org-reveal is a feature you add to Emacs to generate presentations using Reveal.js.  I am using Emacs Live as a base configuration, so I simply added the org-reveal file to my own customisations of Emacs Live in my live-pack.</p><p>I download the <a href="https://github.com/yjwen/org-reveal" target="_blank" rel="noopener">Org-Reveal file from Github </a> and placed it in my live pack config folder <code>~/.live-packs/jr0cket-pack/config/ox-reveal.el</code></p><p>Then I edited my live-pack <code>init.el</code> file to load org-reveal at Emacs start-up</p><pre><code>emacs ~/.live-packs/jr0cket-pack/init.el</code></pre><p>Add a line to call the org-reveal script download from Github, with a path relative to the config folder of the live-pack</p><pre><code>(live-load-config-file &quot;ox-reveal.el&quot;)</code></pre><h2 id="Location-of-Reveal-js"><a href="#Location-of-Reveal-js" class="headerlink" title="Location of Reveal.js"></a>Location of Reveal.js</h2><p>If you are publishing your presentation on the web then you should include a copy of the css, js and plugin folders from the Reveal.js project.</p><p>My current approach is to fork the Reveal.js project on Github (so I can keep track of updates) and create my presentations inside the reveal.js folder created when I cloned the my fork from github. </p><pre><code>;; Fork reveal.js project on Github;; Copy the URL from my forked repogit clone git@github.com:jr0cket/reveal.js.gitcd reveal.jsemacs my-presentation.org</code></pre><p>I then set the org reveal root to be relative to my presentation.  In this case my generated HTML presentation will look for css, js and plugin folders in the same parent folder as my presentation (reveal.js).  In my live-pack init.el file I add the following to set the reveal root to be relative.</p><pre><code>(setq org-reveal-root &quot;&quot;)</code></pre><blockquote><p>If you don’t set this variable to any value (empty string is considered a value here), then the stylesheet and JavaScript includes in your generated presentation will look for CSS and JavaScript resources in a folder called <code>./reveal.js</code>.</p></blockquote><p>Alternatively, you can set the location of Reveal.js to a specific file location.  The location should be the full path to top level of the Reveal.js folder, this is also defined in my live-pack init.el file</p><pre><code>(setq org-reveal-root &quot;file:///var/www/revealjs/current&quot;)</code></pre><p>If you set a global path then this is the path that will appear in your CSS and JavaScript includes in the generated HTML file.</p><h1 id="Writing-presentations-with-Emacs-and-Org-mod"><a href="#Writing-presentations-with-Emacs-and-Org-mod" class="headerlink" title="Writing presentations with Emacs and Org-mod"></a>Writing presentations with Emacs and Org-mod</h1><p>Create a file for your presentation with a .org extension. </p><blockquote><p>You can create a new file in Emacs just by opening a file with a new filename.</p></blockquote><pre><code>C-x C f my-presentation.org</code></pre><p>In your new file you define slide titles using the <code>*</code> notation.  One <code>*</code> for the slide heading (level 1 heading) and two <code>*</code>‘s for slide bullet points (level 2 heading). </p><p>You can put anything you want under the slide heading and you dont have to use bullet points :). </p><h1 id="Generating-your-Reveal-js-presentation"><a href="#Generating-your-Reveal-js-presentation" class="headerlink" title="Generating your Reveal.js presentation"></a>Generating your Reveal.js presentation</h1><p>Once you have your presentation written you can generate the presentation with the command</p><pre><code>M-x org-reveal-export-to-html</code></pre><p>This command creates a single <code>.html</code> file that contains the generated presentation, except for any images you have used.  The <code>.html</code> file will be have the same name as your org-mode file, so if you created your content in <code>my-presentation.org</code> then you will generate <code>my-presentation.html</code></p><p>If your links and images are all correctly referenced in your presentation, then simply opening <code>my-presentation.html</code> file in a browser will show you the end result.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>You have seen how to set up Emacs, Org-reveal and Reveal.js so you can create great presentation without having to code in HTML.  The next article in the series will cover <a href="http://blog.jr0cket.co.uk/2013/09/create-html5-presentations-emacs-revealjs.html" target="_blank" rel="noopener">how to write presentations with Emacs and Org-mode</a> to make use of all the graphics options in Reveal.js, whilst keeping your content as simple text.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Creating presentations with &lt;a href=&quot;http://www.gnu.org/software/emacs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Emacs&lt;/strong&gt;&lt;/a&gt; is quick and more collaborative than with other tools I have used.  Using Emacs &lt;a href=&quot;http://orgmode.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Org-mode&lt;/strong&gt;&lt;/a&gt; you can easily structure and navigate your content.  Using  &lt;a href=&quot;https://github.com/yjwen/org-reveal&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Org-Reveal&lt;/a&gt; you can generate a great looking HTML5 presentation using &lt;a href=&quot;https://github.com/hakimel/reveal.js/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Reveal.js&lt;/strong&gt;&lt;/a&gt; from your org-mode content.&lt;/p&gt;
&lt;p&gt;I’ll show you how to configure Emacs, &lt;a href=&quot;https://github.com/yjwen/org-reveal&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Org-Reveal&lt;/a&gt; and Reveal.js so you can create content in plain text and generate a themed, animated slide-deck that supports &lt;a href=&quot;http://softwaremaniacs.org/soft/highlight/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;syntax highlighting&lt;/a&gt; for lots of languages.  As your content is in plan text its easy to collaborate around it with Github.&lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="revealjs" scheme="http://jr0cket.co.uk/tags/revealjs/"/>
    
      <category term="presenting" scheme="http://jr0cket.co.uk/tags/presenting/"/>
    
  </entry>
  
  <entry>
    <title>Hackference Aftermath - Hacking the Weekend for Fun &amp; Prizes</title>
    <link href="http://jr0cket.co.uk/2013/09/hackference-aftermath-hacking-weekend.html.html"/>
    <id>http://jr0cket.co.uk/2013/09/hackference-aftermath-hacking-weekend.html.html</id>
    <published>2013-09-25T01:03:00.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="http://2013.hackference.co.uk/img/hackference_logo.png" class="img-thumbnail"><p>I’ve added a new work to my vocabulary: <strong>Hacklag</strong>.  Hackference Birmingham left me totally exhausted and yet once I had recovered I was highly motivated to try the things I had experienced there.  So I am sharing my experiences from the weekend hackathon of fun, discovery and glorious food.</p><blockquote><p>Previously I <a href="http://jr0cket.co.uk/2013/09/hackference-aftermath-amazing-polyglot.html">shared my experiences of the Hackference polyglot conference</a>, detailing what I learnt from the great talks there.</p></blockquote><a id="more"></a><h1 id="The-Hackathon-weekend"><a href="#The-Hackathon-weekend" class="headerlink" title="The Hackathon weekend"></a>The Hackathon weekend</h1><img src="http://bean2bed.com/skin/frontend/default/bean/images/slide/4.jpg" class="img-thumbnail"><p>The venue at Boxxed had a great open space that encouraged people to collaborate and provide an open and friendly workspace.  There was plenty of table space, huge bean bags that turned into beds and sofas to lounge in, not that many of us took the time to lounge until the early hours of Sunday morning!</p><p>We started Saturday with some overviews of API’s and developer tools from the sponsors of the Hackathon, including <a href="http://pusher.com/" target="_blank" rel="noopener">Pusher</a>, <a href="http://www.heroku.com/" target="_blank" rel="noopener">Heroku</a>, <a href="https://www.twilio.com/" target="_blank" rel="noopener">Twillio</a>, PayPal, Paymill, CloudFoundry and a few others.  Each sponsor also described what prizes they had on offer.  With a trip to their offices in Berlin, <a href="https://soundcloud.com/" target="_blank" rel="noopener">SoundCloud</a> had arguably the best prize on offer.</p><h1 id="Food-glorious-food"><a href="#Food-glorious-food" class="headerlink" title="Food glorious food"></a>Food glorious food</h1><img src="http://1.bp.blogspot.com/-ph9Hh_m30S0/UkIcY1ioJWI/AAAAAAAALo4/0OGMV8JqrM8/s1600/20130901_122932.jpg" class="img-topic"> <p>During the day there was delicious food on offer and plenty for everyone.  A good job as I didn’t get round to eating anything on conference day, unless you count a pint of Guinness as food :)  I really enjoyed the curry of the Saturday evening and I also had a few cups of curry to keep me going through the night as there was a bit left over. </p><h1 id="Friendly-collaborative-developer-crowd"><a href="#Friendly-collaborative-developer-crowd" class="headerlink" title="Friendly, collaborative developer crowd"></a>Friendly, collaborative developer crowd</h1><p>I met lots of great people at the event and I think I spoke to everyone there, it was a very friendly event.  Some of the developers were quite experienced and some were relatively new and some were quite young and will become the future of our developer communities.  Everyone got involved and seemed to have learnt a lot over the weekend.</p><h1 id="My-favourite-hacks-from-the-event"><a href="#My-favourite-hacks-from-the-event" class="headerlink" title="My favourite hacks from the event"></a>My favourite hacks from the event</h1><img src="http://2.bp.blogspot.com/-D5BN3ESCXNA/UkIf2EzBQ1I/AAAAAAAALq8/HwZZJdXtU0I/s1600/20130831_164207.jpg" class="img-code"> <p>There were some great ideas on the go during the hackathon, some that were perhaps a little too ambitious but great to see anyway.  There were over 20 hacks on show at the end and as Mike asked me to be one of the judges, it was a challenge to choose the most deserving hacks after everyone had put so much effort into them.</p><p>This is a top 5 of my own favourites from the hack, not the actual winners (although there is some crossover).</p><h2 id="5-HackSocNotts"><a href="#5-HackSocNotts" class="headerlink" title="5 - HackSocNotts"></a>5 - HackSocNotts</h2><p>I’ve met the team from HackSocNotts at a few hackathons now and they are a really enthusiastic and creative bunch.  This time they were building a visual hack that would be a light-show at this years freshers fair, demonstrating how much fun you can have if you join in.</p><p>The team assembled a strip of 32 LEDs all wired up to an <a href="http://www.arduino.cc/" target="_blank" rel="noopener">Arduino</a> board and controlled by a Raspberry Pi.  The aim was to allow anyone to set up a pattern with the lights via a simple website, making it very interactive.  The hack consisted of two node programs communicating over web-sockets, firing codes into the register of the strip.  The website was a simple Twitter bootstrap affair.  The biggest technical challenge was working with node and the LED hardware, but eventually they got it working some time in the middle of the night.</p><h2 id="4-Uber-hack"><a href="#4-Uber-hack" class="headerlink" title="4 - Uber hack"></a>4 - Uber hack</h2><img src="http://blog.uber.com/wp-content/uploads/2011/12/New-Logo-Vertical-Dark.jpg" class="img-topic"><p>Uber is a taxi ordering service which you can use from your mobile phone.  You can see where the available cars are in your area.  What the Uber team managed to do is reverse engineer the Uber API so they could track their fleet of cars from anywhere in the world.  By entering a location in their web app, the Uber cars were shown on a Google map.  It was a great app and a very slick presentation, very surprising since the team consisted of a 19 year old and a 16 year old.</p><h2 id="3-Code-Tennis"><a href="#3-Code-Tennis" class="headerlink" title="3 - Code Tennis"></a>3 - Code Tennis</h2><p>Created by <a href="https://twitter.com/teabass" target="_blank" rel="noopener">Andrew Nesbitt</a>, <a href="http://code-tennis.herokuapp.com/" target="_blank" rel="noopener">Code tennis</a> is a fun way to improve your skills with Git, especially when it comes to working with Git as a team.  In the game you can be as Machiavellian as you like, thinking of commits that will actively cause your opponent more of a challenge when merging your commits to their local repository and pushing those commits to the shared Github repository.</p><img src="http://3.bp.blogspot.com/-dM2mTiykXzA/UkIWKc_eVyI/AAAAAAAALks/vZBSA1YB-jY/s1600/code-tennis.png" class="img-code"><p>The game involves each developer taking it in turns to push code to a shared repository on Github.  A <code>git push</code> flips the access to the Github repository to the other player, so you have to take it in turns.</p><p>However, whist waiting for your turn to push you can make local commits.  Deciding on what to commit and how much of a challenge you can make for your opponent will help you understand how much you really know about the power of Git.</p><p>All changes pushed to the shared Github repository get automatically published onto Github pages.</p><p>The name “Code Tennis” comes from the gamification of image creation by graphic designers.  They play Layer Tennis where each graphic designer takes it in turn to create a graphic on one layer of an image.  Each turn adds another layer to the image by those playing the game to get an interesting mix of styles and very different end results.</p><p>As with graphic designers, playing code tennis get helps you discover different ways of using Git repositories in a fun way.  Hopefully you will use these new skills for the benefit of your team :)</p><h1 id="2-Distributed-speakers"><a href="#2-Distributed-speakers" class="headerlink" title="2 - Distributed speakers"></a>2 - Distributed speakers</h1><img src="http://www.iainclaridge.co.uk/blog/wp-content/uploads/munny_speakers.jpg" class="img-thumbnail"> <p>Using Twillio, <a href="http://sydlawrence.com/" target="_blank" rel="noopener">Syd Lawrence</a> set up a simple website that that streamed sound to any mobile that called a particular telephone number.  Syd got a whole bunch of use to call the number and within a few seconds we had all become a distributed speaker system, blasting out Rick Askley!</p><p>It was a simple idea that made good use of an API to get the hack done.  It also reminded me of fun things done by seb.ly with graphics and audience interaction.</p><p>As Syd was also judging then we couldn’t give him a prize (he wouldn’t accept one anyway).  I hope that if he takes it forward then it is used for other songs that Rick Askley</p><h1 id="1-Super-pirate-battleships"><a href="#1-Super-pirate-battleships" class="headerlink" title="1 - Super pirate battleships"></a>1 - Super pirate battleships</h1><p>This was an amazing hack.  The team built a fully working game that looked really good and worked very well, they also made the game environment dynamic.  Their game pulled a music track from SoundCloud and as it played the track was analysed and the pattern of the soundwave was used to determine where obstacles and power-ups should be placed during game-play.</p><div class="video-container"><iframe src="//www.youtube.com/embed/6rJqpdJffac" frameborder="0" allowfullscreen></iframe></div><p>Top prize winner: Super Pirate Battleships video cortesy of <a href="https://twitter.com/J0lley" target="_blank" rel="noopener">Mark Jolley</a>)</p><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>There were lots of really great hacks I havent mentioned and so would just like to thank everyone for there hacks and making it a really entertaining and enlightening weekend.</p><p>You can see more of the hacks by looking at some of the <a href="http://www.youtube.com/playlist?list=PLsTreukqJm95hm0VQD4QWITpFKISaX_l_" target="_blank" rel="noopener">videos from Mark Jolley</a> of the hack showcase, or visiting the <a href="https://www.hackerleague.org/hackathons/hackference/hacks" target="_blank" rel="noopener">Hackference page on Hacker league</a>.  If you are not at work and feeling brave you can even check out <a href="https://www.dropbox.com/s/obbsb367qorijw0/syd-twerkin.mov" target="_blank" rel="noopener">Syd Lawrences’ twerking Video</a> or the great photos from <a href="http://www.flickr.com/photos/andypiper/with/9628126743/" target="_blank" rel="noopener">Andy Piper</a> and <a href="https://plus.google.com/u/0/photos/117080433375668558463/albums/5927331270432594721" target="_blank" rel="noopener">myself</a>.</p><p>I really hope Mike runs Hackference Birmingham again as I had such a great time.  Hopefully he will get more volunteers to help him next time as he did a huge amount of work to make this all happen.  Thanks Mike, you did a fantastic job.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://2013.hackference.co.uk/img/hackference_logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;I’ve added a new work to my vocabulary: &lt;strong&gt;Hacklag&lt;/strong&gt;.  Hackference Birmingham left me totally exhausted and yet once I had recovered I was highly motivated to try the things I had experienced there.  So I am sharing my experiences from the weekend hackathon of fun, discovery and glorious food.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Previously I &lt;a href=&quot;http://jr0cket.co.uk/2013/09/hackference-aftermath-amazing-polyglot.html&quot;&gt;shared my experiences of the Hackference polyglot conference&lt;/a&gt;, detailing what I learnt from the great talks there.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
    
  </entry>
  
  <entry>
    <title>Hackference Aftermath - Amazing Polyglot Conference</title>
    <link href="http://jr0cket.co.uk/2013/09/hackference-aftermath-amazing-polyglot.html.html"/>
    <id>http://jr0cket.co.uk/2013/09/hackference-aftermath-amazing-polyglot.html.html</id>
    <published>2013-09-17T09:36:00.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="http://2013.hackference.co.uk/img/hackference_logo.png" class="img-thumbnail"><p><a href="http://hackference.co.uk/" target="_blank" rel="noopener">Hackference</a> Birmingham was the first event I had been to that was both a conference and a hackathon.  Both parts excelled my expectations.  Its also the first big event I’ve been to in Birmingham outside the national exhibition centre (NEC) and the developers in Birmingham made me feel very welcome. </p><p>This is a reflection of what happened at the conference part of <a href="http://hackference.co.uk/" target="_blank" rel="noopener">Hackference Birmingham</a>.</p><a id="more"></a><h1 id="The-Speaker-line-up"><a href="#The-Speaker-line-up" class="headerlink" title="The Speaker line up"></a>The Speaker line up</h1><p>I described this as a polyglot developer conference as there were great talks from developers with backgrounds in PHP, Clojure, Javascript, Node, Java and Ruby.  There are many things that are common between languages, like good design, so its great to see ideas from such a broad spectrum.</p><blockquote><p>I may have taken some poetic license with my description of these talks.  This represents my interpretation of those talks and not necessarily what the speakers were actually saying!  Hopefully its close enough…</p></blockquote><h1 id="Why-don’t-you-go-out-and-do-something-less-boring-instead"><a href="#Why-don’t-you-go-out-and-do-something-less-boring-instead" class="headerlink" title="Why don’t you go out and do something less boring instead?"></a>Why don’t you go out and do something less boring instead?</h1><p>The opening talk by <a href="http://sydlawrence.com/" target="_blank" rel="noopener">Syd Lawrence</a> was very inspiring and a great way to wake up sleepy developers.  Syd encouraged us to <em>stop watching Coronation Street and try tech stuff out instead</em>.  Its easier than you think and there are lots of API’s, tools and frameworks that make it even easier.  (the amount of hardware hacking in hackthons demonstrates how easy it is to get something working).</p><p>Its easy to make excuses not to try something new but every day it is getting easier and easier to try things out.  Over the last decade software development has truly become soft and malleable, so code is easy to change and using tools like Git its easy to change that code without hanging yourself.</p><p>In the last few years the same level of tinkering and malleability also applies to hardware.  With arduino &amp; raspberry pi kits along with tonnes of components its easy to build something with hardware and then pull it apart and build something else.  Electronics is after all a lego box of components for you to experiment with.</p><p>This encouragement from Syd reminded me of the BBC children’s TV show from the past, <a href="http://en.wikipedia.org/wiki/Why_Don" target="_blank" rel="noopener">Why dont you?</a> which inspired me to go out and do fun stuff when I was so much younger.  Now I am older, why shouldnt I have just as much fun :)</p><h1 id="API-Design-Give-developers-some-love"><a href="#API-Design-Give-developers-some-love" class="headerlink" title="API Design - Give developers some love!"></a>API Design - Give developers some love!</h1><p><a href="http://www.lornajane.net/" target="_blank" rel="noopener">Lorna Jane Mitchell</a> gave a run down of the do’s and don’t of API design. Having developed a number of API’s herself you could hear the experience dripping from her words.</p><p>I cant do justice to her talk so I suggest you take a look at some of the quotes I pulled from her talk and if you like what you read then go and <a href="http://shop.oreilly.com/product/0636920028291.do?cmp=af-code-book-product_cj_9781449365080_7049572" target="_blank" rel="noopener">buy her book</a>… you wont regret it.</p><ul><li>HTTP has status codes, so use them to understand what is going on</li><li>Content should be determined by header content type rather than URLs</li><li>SOAP is great for Java/C# devs as they have a button that generates a SOAP service, hainving to  type a lot of XML is not nice</li><li>REST is great but has “enthusiasts” that tell you your REST is wrong.  Taking a pragmatic approach to REST is better rather than trying to reach for perfection</li><li>Build a heartbeat into your API, this provides a simple self help mechanism to check API is being used correctly by developers</li><li>Consistence in experience will make a big difference when devs are choosing to use your API.  If your API is too erratic or unstable then you will loose your community. </li><li>Cache GET requests to help scale when you become popular.  Your API can use same principles as when caching static assets</li><li>Handling errors is a measure of how good your API is perceived developers</li><li>Tokens are so much nicer to use than a username/password combo for access control. OAuth2 is really nice to use now.</li></ul><p>To me, the main point that Lonra Jane was getting across is that API designers need to engage with the community of developers to gain adoption and have a successful API.</p><h1 id="Getting-Git-and-Github"><a href="#Getting-Git-and-Github" class="headerlink" title="Getting Git and Github"></a>Getting Git and Github</h1><p>Yours truly gave an impromptu talk about Git and Github, providing the audience a whole heap of tips and tricks to get the most out of these distributed version control tools.  For those just trying out Git for the first time, I created a <a href="http://jr0cket.github.io/developer-guides/git-quickstart-guide.png" target="_blank" rel="noopener"><strong>Git quickstart guide</strong></a>.</p><p>I also created a visual guide to Git and Github workflows:</p><img src="http://jr0cket.github.io/developer-guides/git-and-github-workflow.png" class="img-code"><p>The tips I shared included:</p><ul><li><p>using <code>git add</code> to help you be more selective in what you are committing without having to learn how to cherry pick</p></li><li><p>using <code>git stash</code> to keep your work when you fall behind a shared remote (which I am sure we never do, right)</p></li><li><p>configuring <code>git log</code> to be more valuable by showing a graph with repos, branches and tags (see my <a href="https://github.com/jr0cket/dot-files-ubuntu/blob/master/.gitconfig" target="_blank" rel="noopener">.gitconfig file</a> for examples of aliases used for git log and other useful short cuts)</p></li></ul><p>I also talked about the workflow around Git and Github and encouraged people to keep it simple.  You can always add more to your workflow when needed, but jumping straight into something as involved as git flow may not give you the best experience.  When you are comfortable with git and are working on team projects, then take a look at Git flow and see if its for you.  There is <a href="http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/" target="_blank" rel="noopener">a good overview of Git flow by Jeff Kreeftmeijer</a>.</p><h1 id="Boosting-your-JavaScript-projects-with-Yeoman-Bower-and-Grunt"><a href="#Boosting-your-JavaScript-projects-with-Yeoman-Bower-and-Grunt" class="headerlink" title="Boosting your JavaScript projects with Yeoman, Bower and Grunt"></a>Boosting your JavaScript projects with Yeoman, Bower and Grunt</h1><p>The ease in which a decent sized JavaScript project was created as part of the live demo in this talk by <a href="http://hackference.co.uk/speakers#martyn-davies" target="_blank" rel="noopener">Martyn Davies</a> has put this tool combo (<a href="http://yeoman.io/" target="_blank" rel="noopener">Yeoman, Bower and Grunt</a>) high on my list of new shiny things to try.  I had know about Yoman for a while although hadnt found the excuse to use it.  Now seeing all three tools working together (and me being a command line junkie) I will be using it for my <a href="http://www.heroku.com/" target="_blank" rel="noopener">Heroku</a> demos.  These tools give me a great way to go from scratch to continuous deployment of a live on the web app in less than 30 minutes</p><p>I can see Yoman, Bower and Grunt driving most if not all of my JavaScript app development, especially for <a href="http://angularjs.org/" target="_blank" rel="noopener">AngularJS</a>.</p><h1 id="All-the-other-great-talks"><a href="#All-the-other-great-talks" class="headerlink" title="All the other great talks"></a>All the other great talks</h1><p>I didn’t see everyone’s talk as I got into some great discussions with some of the speakers and developers attending the event.</p><p>I did managed to catch the <a href="http://clojure.org/" target="_blank" rel="noopener">Clojure</a> talk given by <a href="http://2013.hackference.co.uk/speakers#joe-littlejohn" target="_blank" rel="noopener">Joe Littlejohn</a> and <a href="http://2013.hackference.co.uk/speakers#mark-godfrey" target="_blank" rel="noopener">Mark Godfrey</a>, speaking on how beautiful and powerful the <a href="http://clojure.org/" target="_blank" rel="noopener">Clojure language</a> is.  Its hard to sum it up in 30 minutes and even harder to share the experience without getting the audience to try the language out.  The guys did a good job to get the assembled developers interested.  If you want to know if Clojure is for you, then you can check out my eBook <a href="http://developerpress.com/en/clojure-made-simple-introduction-clojure" target="_blank" rel="noopener">Clojure Made Simple</a>.</p><p>I talked to several other developers who were looking at Clojure too and I gave them ideas on <a href="http://jr0cket.co.uk/clojure">how to work with Clojure</a>.  I also helped out a few people with Clojure during the hackathon weekend.</p><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Overall this was a great event and I came away felling I learnt a lot more from this conference because of the diversity than I did from very focused conferences like jQuery UK.</p><p>In my next article about Hackference Birmingham I’ll <a href="http://jr0cket.co.uk/2013/09/25/hackference-aftermath-hacking-weekend.html/">share my experiences of the Hackathon part of Hackference</a> and tell you about a word I have added to my vocabulary: “Hacklag”.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://2013.hackference.co.uk/img/hackference_logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://hackference.co.uk/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hackference&lt;/a&gt; Birmingham was the first event I had been to that was both a conference and a hackathon.  Both parts excelled my expectations.  Its also the first big event I’ve been to in Birmingham outside the national exhibition centre (NEC) and the developers in Birmingham made me feel very welcome. &lt;/p&gt;
&lt;p&gt;This is a reflection of what happened at the conference part of &lt;a href=&quot;http://hackference.co.uk/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hackference Birmingham&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
    
  </entry>
  
  <entry>
    <title>Sublime Text on Ubuntu</title>
    <link href="http://jr0cket.co.uk/2013/09/sublime-text-on-ubuntu.html.html"/>
    <id>http://jr0cket.co.uk/2013/09/sublime-text-on-ubuntu.html.html</id>
    <published>2013-09-03T11:32:00.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-zZtRA_8X4Xg/UiXECID9V5I/AAAAAAAAK9s/ucg-FQrgWso/s1600/sublime-text-screenshot.png" class="img-thumbnail"><p><a href="http://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text</a>&nbsp;is a really popular text editor will great language support and a lot of plugin features that are geared towards software developers.</p><p>Although I’m usually in Emacs, lots of people have asked me how best to set Sublime Text on Ubuntu, so here is my prefered method.</p><a id="more"></a><h2 id="Download-Sublime-Text"><a href="#Download-Sublime-Text" class="headerlink" title="Download Sublime Text"></a>Download Sublime Text</h2><p>As Sublime is not part of the Ubuntu package management system (apt-get), it requires a manual download and install. &nbsp;Download the latest version from the <a href="http://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text front page</a> (it should give you a button specific to the OS you are currently using, i.e. Ubuntu). </p><p>The download will be an archive file like zip but using the Unix commands tar and bzip2.</p><h2 id="Extract-the-Sublime-Text-archive"><a href="#Extract-the-Sublime-Text-archive" class="headerlink" title="Extract the Sublime Text archive"></a>Extract the Sublime Text archive</h2><p>You can extract the whole archive by right-clicking on the file in the file browser (nautilus) and selecting <em>Extract here</em></p><blockquote><p>You can also double clicking and selecting the Extract button when the archive manager app opens or use the following command in a terminal: tar jvxf “Sublime Text 2.0.2 x64.tar.bz2”</p></blockquote><h2 id="Install-Sublime-Text-in-opt"><a href="#Install-Sublime-Text-in-opt" class="headerlink" title="Install Sublime Text in /opt"></a>Install Sublime Text in /opt</h2><p>I usually place 3rd party software in the folder <code>/opt</code> although you could use <code>/usr/local</code>.</p><blockquote><p>You just create an apps folder in your own home directory if you use only one login account with Ubuntu.</p></blockquote><p>Create a &nbsp;folder to contain the Sublime Text app using the following command in a terminal: </p><pre><code>sudo mkdir /opt/sublime</code></pre><blockquote><p>I am assuming that we will download new versions occasionally and have other apps installed in /opt.</p></blockquote><p>Move the folder and all its contents extracted from the sublime text archive file:</p><pre><code>sudo mv ~/Downloads/Sublime\ Text\ 2 &amp;nbsp;/opt/sublime</code></pre><p>Create a symbolic link called <code>current</code> that points to the folder you have just moved. </p><pre><code>ln -s /opt/sublime/Sublime\ Text\ 2 &amp;nbsp;/opt/sublime/current</code></pre><blockquote><p>If you do upgrade the version of Sublime, simply download the new version and extract it into the /opt/sublime folder, then just delete the symbolic link and create a new one to point to the new folder.</p></blockquote><h2 id="Add-Sublime-Text-to-path-to-run-it-from-anywhere"><a href="#Add-Sublime-Text-to-path-to-run-it-from-anywhere" class="headerlink" title="Add Sublime Text to path to run it from anywhere"></a>Add Sublime Text to path to run it from anywhere</h2><p>Rather than add the sublime folder to the path and making it messy, I create a little bash script that simply calls sublime. &nbsp;Create a new file by launching an editor, use <span style="font-family: Courier New, Courier, monospace;">gksudo</span> if you are launching a graphical editor as the file will be created in the protected part of the file system:</p><pre><code>gksudo gedit /usr/local/bin/sublime</code></pre><p>Add the following script to this file that will change to the folder where the sublime binaries live and then run its usual starup script. &nbsp;The <code>$*</code> ensures that any parameters such as file names you pass to the script are passed on to the sublime start-up script.</p><pre><code>#!/bin/shcd /opt/sublime/current./sublime_text $* &amp;</code></pre><p>Save the file and close the editor.  You have make a new script called sublime on the executable path. &nbsp;However, we still need to give this new script permission to be executed.</p><p>Use the following command in a terminal window to make the bash script file executable for every user:</p><pre><code>sudo chmod a+x /usr/local/bin/sublime</code></pre><p>You can now call sublime from anywhere and even call it with a file name or path/file name arguments.</p><p>Enjoy Sublime text and if you find its not for you there is always Emacs :)</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://4.bp.blogspot.com/-zZtRA_8X4Xg/UiXECID9V5I/AAAAAAAAK9s/ucg-FQrgWso/s1600/sublime-text-screenshot.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.sublimetext.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sublime Text&lt;/a&gt;&amp;nbsp;is a really popular text editor will great language support and a lot of plugin features that are geared towards software developers.&lt;/p&gt;
&lt;p&gt;Although I’m usually in Emacs, lots of people have asked me how best to set Sublime Text on Ubuntu, so here is my prefered method.&lt;/p&gt;
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="sublimetext" scheme="http://jr0cket.co.uk/tags/sublimetext/"/>
    
  </entry>
  
  <entry>
    <title>Hey Prezto - Zsh for Command Line Heaven</title>
    <link href="http://jr0cket.co.uk/2013/09/hey-prezto-zsh-for-command-line-heaven.html"/>
    <id>http://jr0cket.co.uk/2013/09/hey-prezto-zsh-for-command-line-heaven.html</id>
    <published>2013-09-02T15:11:00.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-OCKvFRcGPLk/UTUY7NXSS6I/AAAAAAAAJI0/RJT6XMB05I4/s1600/Zshell-silver-rotating.gif" class="img-thumbnail"><p>Using the command line is a powerful and quick way of doing many developer tasks.  The <a href="http://en.wikipedia.org/wiki/Shell_(computing" target="_blank" rel="noopener">command line shell</a>) for Linux &amp; MacOSX is a whole world apart from the very basic experience of DOS. Zsh (Z Shell) makes the Linux &amp; MacOSX shell experience even better.</p><p>I learnt to use the command line with bash, the default Linux shell.  Although as soon as you play with zsh for a few minutes, you quickly get hooked.  zsh gives you <a href="http://www.acm.uiuc.edu/workshops/zsh/why.html" target="_blank" rel="noopener">lots of features</a>, including:</p><ul><li>auto-completion on steroids</li><li>command relative completions</li><li>navigable completions list</li><li>amazingly fast completions</li><li>auto corrections for when your fingers slip</li><li>custom prompts, a right hand prompt and themes</li><li>shared history over all terminals</li><li>history sub-string search</li></ul><p>You can add libraries to bash and configure it to do these things as well, although I havent seen an projects to help you quickly do so.</p><p>Still not convinced, then take a look at Brendan Rapps presentation “<a href="http://www.slideshare.net/jaguardesignstudio/why-zsh-is-cooler-than-your-shell-16194692" target="_blank" rel="noopener">Why Zsh is cooler than your shell</a>“</p><h1 id="Get-going-with-Zsh"><a href="#Get-going-with-Zsh" class="headerlink" title="Get going with Zsh"></a>Get going with Zsh</h1><p>You can just install zsh and configure it yourself.  On the Mac, Zsh is installed by default.  On Ubuntu its available in the software center or via the command line:</p><pre><code>sudo apt-get install zsh</code></pre><p>Configuring Zsh yourself would take a bit of discovery, so I prefer to use something a bit more out of the box.  Luckily there are two projects to choose from that configure everything for you.</p><h1 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a></h1><p>This is a popular project that provides an out of the box zsh setup and its really easy to use.  However, something is making it a little slow when I tried it on the MacBook Pro and Linux.  Comments around this project suggest its written in more of a bash way than zsh, so that may be the reason for a performance slow down.</p><p>After a few days I decided to remove oh-my-zsh and try an alternative project.</p><h1 id="Prezto"><a href="#Prezto" class="headerlink" title="Prezto"></a><a href="https://github.com/sorin-ionescu/prezto" target="_blank" rel="noopener">Prezto</a></h1><p>Prezto has been rewritten by the author who wanted to achieve a good zsh setup by ensuring all the scripts are making use of zsh syntax.  It has a few more steps to install but should only take a few minutes extra.</p><h2 id="Installing-Prezto"><a href="#Installing-Prezto" class="headerlink" title="Installing Prezto"></a>Installing Prezto</h2><p>In the root of your home account, clone the prezto github project using any git client.</p><pre><code>git clone --recursive https://github.com/sorin-ionescu/prezto.git &quot;${ZDOTDIR:-$HOME}/.zprezto&quot;</code></pre><blockquote><p>If you don’t have a Git client either download it from the <a href="http://git-scm.com/" target="_blank" rel="noopener">git-scm website</a> or use the Ubuntu package manager to install the package called git (<code>sudo apt-get install git</code>).</p></blockquote><p>All prezto files are contained within a foloder called <code>.zprestorc</code> in the root of your home folder.  In order to use Prezto configuration for zsh, symlinks are used.</p><blockquote><p>The project gives you a script to run although this didn’t work for me and I just created the symlinks manually.</p></blockquote><h2 id="Create-the-symlinks-manually"><a href="#Create-the-symlinks-manually" class="headerlink" title="Create the symlinks manually"></a>Create the symlinks manually</h2><p>In the root of your home folder, create the sym-links using the Unix symbolic link command as follows:</p><pre><code>ln -s ~/.zprezto/runcoms/zlogin ~/.zloginln -s ~/.zprezto/runcoms/zlogout ~/.zlogoutln -s ~/.zprezto/runcoms/zpreztorc ~/.zpreztorcln -s ~/.zprezto/runcoms/zprofile ~/.zprofileln -s ~/.zprezto/runcoms/zshenv ~/.zshenvln -s ~/.zprezto/runcoms/zshrc ~/.zshrc</code></pre><p>Check that the links have all been created successfully.  Type the command ls -la and you should see the following in your terminal (although possibly without colour)</p><img src="http://3.bp.blogspot.com/-mdwsHb5FkGg/UiSqw8hI1mI/AAAAAAAAK7I/TYPgGmWWuBA/s1600/zsh-symlinks.png" class="img-code"><p>zprezto uses a series of symlinks to configure zsh with lots of nice defaults</p><blockquote><p>I have been thinking of changing the use of sym-links and just have the specific files include the Prezto files first, then add any customisations required.  This would help to keep my changes in place when I updated Prezto.</p></blockquote><h1 id="Run-zsh"><a href="#Run-zsh" class="headerlink" title="Run zsh"></a>Run zsh</h1><p>Now you have zsh configured with prezto, its time to try it out.  Open a terminal window and run zsh using the command:</p><pre><code>zsh</code></pre><p>Set zsh as the default shell</p><p>To set zsh as our default shell then run the change shell (chsh) command:</p><pre><code>chsh -s /usr/bin/zsh</code></pre><p>On Ubuntu, this didn’t seem to work.  I also had to configure Gnome Terminal to run zsh as a custom command.</p><img src="http://4.bp.blogspot.com/-t5Pv8i_1gCI/UTUV_FUoinI/AAAAAAAAJIs/-zIeS__lNeo/s1600/terminal-zsh-custom-command.png" class="img-code"><p>Now when I open a new terminal window or tab, the command line is running Zsh.</p><h1 id="Showing-Git-branch-by-switching-on-zsh-modules"><a href="#Showing-Git-branch-by-switching-on-zsh-modules" class="headerlink" title="Showing Git branch by switching on zsh modules"></a>Showing Git branch by switching on zsh modules</h1><p>Several of the prezto zsh modules are switched on by default, however Git is not one of them.  If you want to see the current branch you are working on in Git then add the git module to the zprezto configuration.</p><p>Edit the file <code>~/.zprezto</code></p><p>Find the section in the file that defined modules to load and add a line with the git module.  Here is what that section would look like once you have edited it.</p><pre><code># Set the Prezto modules to load (browse modules).# The order matters.zstyle &apos;:prezto:load&apos; pmodule \  &apos;environment&apos; \  &apos;terminal&apos; \  &apos;editor&apos; \  &apos;history&apos; \  &apos;directory&apos; \  &apos;spectrum&apos; \  &apos;utility&apos; \  &apos;completion&apos; \  &apos;git&apos; \  &apos;archive&apos; \  &apos;prompt&apos;</code></pre><h1 id="Creating-my-own-prezto-theme"><a href="#Creating-my-own-prezto-theme" class="headerlink" title="Creating my own prezto theme"></a>Creating my own prezto theme</h1><p>The default sorin them is okay, but takes up a bit much room on the prompt than I like.</p><img src="http://3.bp.blogspot.com/-hi59uLe-cTE/UTUa41BodSI/AAAAAAAAJI8/ZoDa9OxOmvY/s1600/zpresto-default-theme.png" class="img-code"><p>I created my own theme as a slight variation from the default sorin theme.  I removed &gt;&gt;&gt; characters used to separate the prompt from commands as they seemed largely unnecessary.  As I only use git then I didnt feel the need to specify the version control tool used (eg. git, mercurial).  Finally, I changed the colours round a little.</p><p>I kept the right hand prompt as part of my theme. Its a quick way to show the status of any changes in your local git repository.<br><img src="http://1.bp.blogspot.com/-Q7quGwje_w4/UTUoVbZZRmI/AAAAAAAAJJU/f4udzvNaOnM/s1600/zprezto-prompt-jr0cket-context-specific.png" class="img-code"></p><p>The prompt shows the current folder name, with any parent folders abbreviated to their initial.  The path up to and including the home folder is represented by <code>~</code>.</p><p>When you enter a folder managed by git, then the right hand prompt kicks in and shows icons representing the current git status.  Whilst in the folder you can see if you have changes that untracked, deleted or stage.  You can easily tell if you are behind or ahead of the default remote repository.  You can also see if you have some changes stashed away.</p><p>My zsh theme is available as part of my <a href="https://github.com/jr0cket/dot-files-ubuntu" target="_blank" rel="noopener">dot-files-ubuntu</a> or <a href="https://github.com/jr0cket/dot-files-macosx" target="_blank" rel="noopener">dot-files-macosx</a> repositories.</p><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Whist <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a> is really simple to use, the <a href="https://github.com/sorin-ionescu/prezto" target="_blank" rel="noopener">Prezto</a> project seems to have maintainters with greater experience of zsh.</p><p>On Ubuntu I am using prezto and although it is a bit more involved to understand at first, it runs really really fast.  The only thing I wanted to change with prezto was the theme, so not really that much to learn.</p><p>Everything that I was doing with oh-my-zsh seems to work in Prezto without adding in extra plugins to the Zsh configuration.</p><p>So although oh-my-zsh is a great project, I’d recommend using Prezto to have a great Zsh experience.  Take a look at my dotfiles on github (<a href="https://github.com/jr0cket/dot-files-ubuntu" target="_blank" rel="noopener">dot-files-ubuntu</a> or <a href="https://github.com/jr0cket/dot-files-macosx" target="_blank" rel="noopener">dot-files-macosx</a>) to see how I created a custom theme.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;http://3.bp.blogspot.com/-OCKvFRcGPLk/UTUY7NXSS6I/AAAAAAAAJI0/RJT6XMB05I4/s1600/Zshell-silver-rotating.gif&quot; class=&quot;img-thumbnail&quot;&gt;
      
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="zsh" scheme="http://jr0cket.co.uk/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>Add Colour to Your Clojure REPL With Leiningen and ASCII Codes</title>
    <link href="http://jr0cket.co.uk/2013/08/add-colour-to-your-clojure-repl-with.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/add-colour-to-your-clojure-repl-with.html.html</id>
    <published>2013-08-30T08:18:00.000Z</published>
    <updated>2022-01-02T20:20:15.290Z</updated>
    
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-pc_s02W-R9w/TzFLaS-sQcI/AAAAAAAAEbU/xWhovBljYE8/s1600/clojure-logo-with-name.png" class="img-topic"> <p>Sometimes its the little things that make a difference and after seeing how easily customise the Clojure REPL prompt with <a href="http://leiningen.org/" target="_blank" rel="noopener">Leiningen</a> I had a little hack with words, symbols and colours and came up with something nicer (in my opinion).</p><a id="more"></a><h1 id="The-standard-Clojure-REPL-with-Leiningen"><a href="#The-standard-Clojure-REPL-with-Leiningen" class="headerlink" title="The standard Clojure REPL with Leiningen"></a>The standard Clojure REPL with Leiningen</h1><p>The standard Clojure REPL prompt is practical, yet a little mundane to look at.  As we see in the screenshot it gives a clear indication of the namespace we are working in, but little else.  If you have other REPLs, run time environments or terminal sessions going then its all too easy to enter your code at the wrong prompt.</p><img src="http://2.bp.blogspot.com/-fn8ros3ocTY/UiBGuI35T-I/AAAAAAAAK6Y/eM_FIKKJ3Qc/s1600/clojure-repl-standard-prompt-and-welcome.png" class="img-code"> <h1 id="My-design-for-a-colourful-Clojure-REPL"><a href="#My-design-for-a-colourful-Clojure-REPL" class="headerlink" title="My design for a colourful Clojure REPL"></a>My design for a colourful Clojure REPL</h1><p>To make it clear that we are in a Clojure REPL I changed the colour of the namespace to blue, wrapped with green brackets (blue and green are the colours in the Clojure logo).  I also change the symbol used in the font to be the  <code>cλ</code> symbol.  I use the combination of c-lambda to denote this is the Clojure implementation of a Lamdba oriented language (is that such a thing or did I just make that up?).  This c-lambda symbol is the same I use to <a href="http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html">denote Clojure-mode and nrepl-mode in Emacs</a>.</p><img src="http://2.bp.blogspot.com/-m8g6eMFUuAM/UiBSzLOObHI/AAAAAAAAK64/hIUMUCXiGl4/s1600/clojure-repl-definition-and-emacs-mode-line-customisations.png" class="img-code"> <blockquote><p>See my article on <a href="http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html">Emacs mode line customisation</a> to create </p></blockquote><h1 id="Configuring-the-Clojure-REPL-prompt-with-Leinginen"><a href="#Configuring-the-Clojure-REPL-prompt-with-Leinginen" class="headerlink" title="Configuring the Clojure REPL prompt with Leinginen"></a>Configuring the Clojure REPL prompt with Leinginen</h1><img src="http://1.bp.blogspot.com/-rxD8__T6tzA/TzFNNTKKLwI/AAAAAAAAEb8/k10iLxa3I70/s1600/leiningen-face.jpg" class="img-code"><p>To configure your prompt you can edit the <code>project.clj</code> file in the root of a Clojure project and add the keyword <code>:repl-options</code> with a set containing your customisations.</p><p>Here is a very simple example that changes the welcome message you see when the REPL first starts, as well as changing the prompt to output a message followed by the current namespace:</p><pre><code>:repl-options {    ;; custom prompt    prompt (fn [ns] (str &quot;You are hacking in &quot; ns &quot;=&gt; &quot; ))    ;; Welcome message when the repl session starts.    :welcome (println &quot;Its  REPL time!&quot;)}</code></pre><p>In the following  example I have added colour using <a href="http://stackoverflow.com/questions/5762491/how-to-print-color-in-console-using-system-out-println" target="_blank" rel="noopener">ASCII codes I found on Stack Overflow</a>.  It makes the definition of the prompt a little messy looking, however the prompt itself is much nicer than the standard one. </p><blockquote><p>Remember to reset the colour at the end of the prompt definition or all your input into the REPL will be the same colour as the prompt.</p></blockquote><pre><code>:repl-options {     :prompt (fn [ns] (str &quot;\u001B[35m[\u001B[34m&quot; ns &quot;\u001B[35m]\u001B[33mcλ:\u001B[m &quot; ))     :welcome (println &quot;Time for  REPL Driven Development!&quot;)}&lt;/span&gt;**</code></pre><p>This customisation looks like:</p><img src="http://1.bp.blogspot.com/-_KsZRMlUN7M/UiBLzV-wuZI/AAAAAAAAK6o/adyJ_a1fVQE/s1600/clojure-repl-custom-colour-text.png" class="img-code" title="Customised Clojure REPL prompt with welcome message, configured in Leiningen"> <h1 id="The-ASCII-codes-and-their-colours"><a href="#The-ASCII-codes-and-their-colours" class="headerlink" title="The ASCII codes and their colours"></a>The ASCII codes and their colours</h1><p>To make the above customisation easier to read, here are the actual colours of the ASCII codes I used above.</p><ul><li><code>\u001B[32m</code> is green for the brackets around the namespace</li><li><code>\u001B[34m</code> is blue for the name space name</li><li><code>\u001B[33m</code> is yellow for the Lambda character (yellow matches my shell prompt ~)</li><li><code>\u001B[m</code>   resets the colour changes back to the default (white in this case)</li></ul><blockquote><p>If there was a way to use colour names rather than ASCII codes in the prompt configuration, that would make the configuration so much nicer to work with.  This may be a limitation of the terminal though, rather than Leiningen.</p></blockquote><h1 id="Other-REPL-prompt-tweaks"><a href="#Other-REPL-prompt-tweaks" class="headerlink" title="Other REPL prompt tweaks"></a>Other REPL prompt tweaks</h1><p>Other customisations you could make to your REPL prompt include adding the project name, version, etc.  As the customisation is specified in your Clojure <code>project.clj</code> then your prompt can be as project specific as you like.</p><h1 id="Adding-the-Lambda-symbol-using-Emacs"><a href="#Adding-the-Lambda-symbol-using-Emacs" class="headerlink" title="Adding the Lambda symbol using Emacs"></a>Adding the Lambda symbol using Emacs</h1><p>I am using Emacs for my editor, so a quick look on Stack Overflow showed me <a href="http://stackoverflow.com/questions/10192341/how-to-enter-greek-characters-in-emacs" target="_blank" rel="noopener">how to enter Greek characters in Emacs</a> to create the Lambda character in the prompt.  The way to add the lambda symbol to a file in Emacs is with the command:</p><pre><code>M-x ucs-insert 03bb</code></pre><p>The <code>03bb</code> code is Unicode for the lambda symbol - λ.</p><h1 id="Create-your-own-Leiningen-Clojure-templates"><a href="#Create-your-own-Leiningen-Clojure-templates" class="headerlink" title="Create your own Leiningen Clojure templates"></a>Create your own Leiningen Clojure templates</h1><p>Assuming you like the custom prompt and want it in all your projects,  you can use the <a href="https://github.com/tcw/lein-create-template" target="_blank" rel="noopener">lein-create-template</a> plugin to create your own project template for lein new.  So when you create a new project with leiningen you can run the command:</p><pre><code>lein new my-custom-template project-name</code></pre><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Its quick and easy to customise your Clojure REPL prompt when using Leiningen,  so why not make the developer experience just that little bit nicer and maybe prevent typing code into the wrong terminal window.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://4.bp.blogspot.com/-pc_s02W-R9w/TzFLaS-sQcI/AAAAAAAAEbU/xWhovBljYE8/s1600/clojure-logo-with-name.png&quot; class=&quot;img-topic&quot;&gt; 
&lt;p&gt;Sometimes its the little things that make a difference and after seeing how easily customise the Clojure REPL prompt with &lt;a href=&quot;http://leiningen.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leiningen&lt;/a&gt; I had a little hack with words, symbols and colours and came up with something nicer (in my opinion).&lt;/p&gt;
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="leiningen" scheme="http://jr0cket.co.uk/tags/leiningen/"/>
    
  </entry>
  
  <entry>
    <title>Defining Custom Task Workflows With Emacs Org-Mode</title>
    <link href="http://jr0cket.co.uk/2013/08/defining-custom-workflow-with-Emacs-org-mode.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/defining-custom-workflow-with-Emacs-org-mode.html.html</id>
    <published>2013-08-27T11:00:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail"><p>Org-mode is a great way to track tasks and manage all those to-do items in one place, although Org-mode has a very simple workflow by default <strong>(TODO | DONE)</strong>.  To track your tasks in more detail you can define extra stages or create a completely workflow.</p><a id="more"></a><p>Previously I covered <a href="http://jr0cket.co.uk/2013/08/config-emacs-org-mode-to-manage-tasks.html">how to set up Org-mode &amp; Org-capture</a> for the built in workflow.  In this article I show how to configure Org-mode to use my own custom workflow or define your own multiple workflows should the need arise.</p><h1 id="My-Kanban-workflow"><a href="#My-Kanban-workflow" class="headerlink" title="My Kanban workflow"></a>My Kanban workflow</h1><p>I like to <a href="http://jr0cket.co.uk/2011/09/two-years-on-kanban.html">organise my work using Kanban</a>, an agile technique that focuses on getting work done by managing workload and learning through fast feedback.  To implement this Kanban approach I define 4 stages for my task workflow:</p><img src="http://2.bp.blogspot.com/-oLZ24RvCtxw/UhugLxfVpyI/AAAAAAAAK50/p-M0BRiZR6Q/s1600/emacs-org-mode-kanban-coloured-stages.png" class="img-code"> <h1 id="Emacs-Org-mode-for-managing-TODO’s-using-a-Kanban-style-workflow"><a href="#Emacs-Org-mode-for-managing-TODO’s-using-a-Kanban-style-workflow" class="headerlink" title="Emacs Org-mode for managing TODO’s using a Kanban style workflow"></a>Emacs Org-mode for managing TODO’s using a Kanban style workflow</h1><p><strong>TODO</strong> - tasks I have not started yet.  If I have an idea for a task, I can make a quick note and get back to what I was doing without loosing focus or worrying about forgetting to do something.</p><p><strong>DOING</strong> - tasks I have started working on.  I try to keep the number of tasks I am doing as low as possible so I am not task switching.  This helps me get things done</p><p><strong>BLOCKED</strong> - tasks that I started working on but cant continue with for some unexpected reason.  I wont start working on these until I have more time set aside to unblock them.  If I block a task with sub-tasks then I will not work on any of those sub-tasks either (I have not seen anything in org-mode to automatically block and unblock sub-tasks if its parent is blocked or unblocked, that would be useful).</p><p><strong>REVIEW</strong> - tasks I have completed but want to check if there something I can learn or share from the experience of doing that task.  This can help me define other tasks related to the one I just completed.</p><p><strong>DONE</strong> - tasks that are completed.  I keep the done tasks around for the week so I have a feeling of accomplishment and avoid repeating myself.</p><p><strong>ARCHIVE</strong> - an optional stage to put tasks in if I want a longer term record of completing that task</p><h1 id="Defining-additional-task-stages"><a href="#Defining-additional-task-stages" class="headerlink" title="Defining additional task stages"></a>Defining additional task stages</h1><p>You can create a new workflow for your tasks by defining setting a sequence of text strings to the variable <code>org-todo-keywords</code></p><p>I am using Emacs Live as a base configuration, so I put all my Org-mode configurations into a file called:</p><pre><code>~/.live-packs/jr0cket-pack/config/org-mode.el</code></pre><p>If you are not using Emacs Live you can place them in <code>~/.emacs.d/init.el</code>.</p><p>Here is an example that implements my Kanban workflow:</p><pre><code>(setq org-todo-keywords   &apos;((sequence &quot;TODO&quot; &quot;DOING&quot; &quot;BLOCKED&quot; &quot;REVIEW&quot; &quot;|&quot; &quot;DONE&quot; &quot;ARCHIVED&quot;)))</code></pre><p>The  vertical bar <code>|</code> defines the possible end states for your task.  Org-mode can be configured to add content to your task upon entering an end state, such as setting a <code>CLOSED</code> variable to the current date and time stamp.  This is useful if you want track your time spent on tasks.  I will cover this in a follow on article, or see the section on <a href="http://orgmode.org/org.html#Progress-logging" target="_blank" rel="noopener">Progress Logging</a> of the Orgmode tutorial.</p><h1 id="Defining-multiple-workflows"><a href="#Defining-multiple-workflows" class="headerlink" title="Defining multiple workflows"></a>Defining multiple workflows</h1><p>You can also define multiple workflows so long as all the task stage names are unique.  Here is an <a href="http://orgmode.org/org.html#Workflow-states" target="_blank" rel="noopener">example of multiple workflows</a> from the org-mode.org website:</p><pre><code>(setq org-todo-keywords  &apos;((sequence &quot;TODO&quot; &quot;|&quot; &quot;DONE&quot;)  (sequence &quot;REPORT&quot; &quot;BUG&quot; &quot;KNOWNCAUSE&quot; &quot;|&quot; &quot;FIXED&quot;)  (sequence &quot;|&quot; &quot;CANCELED&quot;)))</code></pre><p>I haven’t found a use for this approach as yet, but will add it to my <code>TODO</code> list to investigate.</p><h1 id="Making-workflow-stages-more-distinct-with-colour"><a href="#Making-workflow-stages-more-distinct-with-colour" class="headerlink" title="Making workflow stages more distinct with colour"></a>Making workflow stages more distinct with colour</h1><p>The default colours for Org-mode tasks are pink for TODO and Green for DONE.  As we are creating additional steps it helps me scan my task states if they are colour coded.</p><p>Here is an example of defining colours for each of the states of my Kanban workflow.  Most of the colours are defined using the text of the name.  The org-warning is used to set the TODO stage to the standard org-mode colour for TODO.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">;; Setting Colours (faces) for todo states to give clearer view of work </span><br><span class="line">(setq org-todo-keyword-faces</span><br><span class="line">  &apos;((&quot;TODO&quot; . org-warning)</span><br><span class="line">   (&quot;DOING&quot; . &quot;yellow&quot;)</span><br><span class="line">   (&quot;BLOCKED&quot; . &quot;red&quot;)</span><br><span class="line">   (&quot;REVIEW&quot; . &quot;orange&quot;)</span><br><span class="line">   (&quot;DONE&quot; . &quot;green&quot;)</span><br><span class="line">   (&quot;ARCHIVED&quot; .  &quot;blue&quot;))) **&lt;/span&gt;</span><br></pre></td></tr></table></figure><h1 id="More-Org-mode-customisation-to-consider"><a href="#More-Org-mode-customisation-to-consider" class="headerlink" title="More Org-mode customisation to consider"></a>More Org-mode customisation to consider</h1><p>There are lots more customisations that can be made to Org-mode to help you manage tasks.  Here are some aspects I am considering next.</p><h2 id="Creating-more-templates-for-Org-capture"><a href="#Creating-more-templates-for-Org-capture" class="headerlink" title="Creating more templates for Org-capture"></a>Creating more templates for Org-capture</h2><p>By default Org-capture only has one template, the task template.  This task template only a time stamp of when it was created and a link to the file.  All the TODO items created with this template go under the main heading of Tasks, so I could create templates for other headings such as Personal, Financial, Household, etc.</p><h2 id="Triggering-actions-on-Org-mode-stages"><a href="#Triggering-actions-on-Org-mode-stages" class="headerlink" title="Triggering actions on Org-mode stages"></a>Triggering actions on Org-mode stages</h2><p>When I mark my tasks as done, I’d like to have that tasked automatically date stamped so I know when I completed it.  This would add a <code>CLOSED</code> parameter to the task in question.  If I also have time stamps for each of the states then I can track my cycle time and check to see if I am keeping too many tasks in the DOING state.</p><p>A lot more features of Org-mode can be found at the excellent <a href="http://orgmode.org/" target="_blank" rel="noopener">Orgmode.org</a> website.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Org-mode is a great way to track tasks and manage all those to-do items in one place, although Org-mode has a very simple workflow by default &lt;strong&gt;(TODO | DONE)&lt;/strong&gt;.  To track your tasks in more detail you can define extra stages or create a completely workflow.&lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/tags/dev-tools/"/>
    
      <category term="org-mode" scheme="http://jr0cket.co.uk/tags/org-mode/"/>
    
  </entry>
  
  <entry>
    <title>Configuring Emacs Org-Mode to Managing Your Tasks</title>
    <link href="http://jr0cket.co.uk/2013/08/configure-emacs-org-mode-to-manage-your-tasks.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/configure-emacs-org-mode-to-manage-your-tasks.html.html</id>
    <published>2013-08-26T20:44:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail"> <p><a href="http://blog.jr0cket.co.uk/2013/08/manage-dev-life-with-emacs-org-mode.html" target="_blank" rel="noopener">Emacs Org-mode</a> has a feature called Org-capture that makes it easy to keep track of all the to-do’s that crop up as we work on projects.  With Org-capture you can make comments across all your files and projects and link to them all from one place. </p><p>Here is how to configure Emacs Org-capture so you can quickly create new tasks relevant to specific files and easily manage them all in one place.  If you are not familiar with Emacs Org-mode, take a look at my article: <a href="http://blog.jr0cket.co.uk/2013/08/manage-dev-life-with-emacs-org-mode.html" target="_blank" rel="noopener">Manage your developer life with Org-mode</a>.</p><a id="more"></a><blockquote><p>I use <a href="http://overtone.github.io/emacs-live/" target="_blank" rel="noopener">Emacs Live</a> as a base configuration for Emacs, although everything here will work with any setup as Org-mode and Org-capture are both part of Emacs itself.  If you are not using Emacs live, you can place the configurations in your <code>~/.emacs.d/init.el</code> file rather that the locations specified here.</p></blockquote><h1 id="Using-Org-capture-todo-file-to-track-tasks"><a href="#Using-Org-capture-todo-file-to-track-tasks" class="headerlink" title="Using Org-capture todo file to track tasks"></a>Using Org-capture todo file to track tasks</h1><p>Org-capture creates a list of all those tasks you want to do across all the text files you are working with in a single file, by default this file is called <code>.notes</code> and lives in the root folder of your account.  However, the file managing your tasks should really have a <code>.org</code> extension so that Emacs automatically puts it into org-mode when its loaded. </p><p>You should also consider creating your todo list file where it is easy to manage with Git or a synchronisation service like Dropbox.</p><img src="http://2.bp.blogspot.com/-1pQtvXL1elc/Uhu9VLK7gXI/AAAAAAAAK6E/4KbFDRdE3oE/s1600/emacs-org-mode-tasks-example.png" class="img-code"><h1 id="Managing-tasks-using-Org-mode-and-Org-capture"><a href="#Managing-tasks-using-Org-mode-and-Org-capture" class="headerlink" title="Managing tasks using Org-mode and Org-capture"></a>Managing tasks using Org-mode and Org-capture</h1><h2 id="Define-where-your-tasks-are-kept"><a href="#Define-where-your-tasks-are-kept" class="headerlink" title="Define where your tasks are kept"></a>Define where your tasks are kept</h2><p>Define a variable called <code>org-gefault-notes-file</code> to set the path and file name for the todo file.</p><p>I put this variable definition in a new file I created to hold all my Org-mode configurations:</p><pre><code>~/.live-packs/jr0cket-pack/config/org-mode.el</code></pre><p>Then I edited this file and add the following definition for the todo file:</p><pre><code>;; Define the location of the file to hold tasks(setq org-default-notes-file &quot;~/.todo-list.org&quot;)</code></pre><h2 id="Calling-the-custom-org-mode-settings-the-Emacs-Live-way"><a href="#Calling-the-custom-org-mode-settings-the-Emacs-Live-way" class="headerlink" title="Calling the custom org-mode settings the Emacs Live way"></a>Calling the custom org-mode settings the Emacs Live way</h2><p>As I am using Emacs Live, I follow the convention of placing sets of configurations into their own file and calling that from my live-pack init.el.  Editing my <code>init.el</code> file I added:</p><pre><code>~/.live-packs/jr0cket-pack/init.el</code></pre><p>and added a new line to load in the configuration from the <code>org-mode.el</code> file:</p><pre><code>(live-load-config-file &quot;org-mode.el&quot;)</code></pre><h2 id="Adding-key-bindings-for-org-capture"><a href="#Adding-key-bindings-for-org-capture" class="headerlink" title="Adding key bindings for org-capture"></a>Adding key bindings for org-capture</h2><p>I set up a keyboard binding for org-capture using <code>C-c c</code> (control key and c, followed by c).  I opened an existing binding file I have in my live pack</p><pre><code>~/.live-packs/jr0cket-pack/config/bindings.el</code></pre><p>and added a definition to call org-capture</p><pre><code>(define-key global-map &quot;C-c c&quot; &apos;org-capture)</code></pre><h2 id="Create-a-notes-org-file"><a href="#Create-a-notes-org-file" class="headerlink" title="Create a notes.org file"></a>Create a notes.org file</h2><p>Create the file that will hold all your tasks by either opening and saving a file of that name in Emacs or using the command:</p><pre><code>touch ~/.todo-list.org</code></pre><p>Emacs is now setup to capture all your todos via Org-capture, so lets look at how we use Org-capture</p><h1 id="Creating-a-task-using-Org-capture"><a href="#Creating-a-task-using-Org-capture" class="headerlink" title="Creating a task using Org-capture"></a>Creating a task using Org-capture</h1><p>Open up a source code file or other text file you want to work on.  Create a comment in that file about a TODO / task you want to do.  With the cursor still on your comment, use the org-capture command or the keyboard combo:</p><pre><code>M-x org-captureC-c c</code></pre><p>You are prompted to choose a template for the type of entry you want to create.  By default there is only one called task.  Press the letter <code>t</code> to select the task template.</p><p>The cursor will now be in the Org-mode task file you created earlier allowing you to type in a descriptoin of the task.  Updated the task list with this new task using the keyboard combo</p><pre><code>C-c C-c</code></pre><p>You can save the tasks file as usual with <code>C-x C-s</code>.</p><h2 id="Following-links"><a href="#Following-links" class="headerlink" title="Following links"></a>Following links</h2><p>To open the file that your task links too, or open a web addresses you have added to the task, place the cursor anyware on the link and use</p><pre><code>C-c C-o</code></pre><h1 id="Adding-TODO’s-manually"><a href="#Adding-TODO’s-manually" class="headerlink" title="Adding TODO’s manually"></a>Adding TODO’s manually</h1><p>As has been mentioned previously, org-mode manages tasks using a plain text file, so its easy to add your own tasks by manually editing the file.  You can indicate a task using the * notation.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* Level 1 heading</span><br><span class="line">** Level 2 heading</span><br><span class="line">*** Level 3 heading and so ....</span><br></pre></td></tr></table></figure><p>By default the org-capture function has only one template, Tasks.  So all todo’s created with org-capture will be level 2 headings under * Tasks…</p><p>** description of task</p><h1 id="Navigating-and-using-your-org-mode-task-list"><a href="#Navigating-and-using-your-org-mode-task-list" class="headerlink" title="Navigating and using your org-mode task list"></a><strong>Navigating and using your org-mode task list</strong></h1><p>When <code>~/.todo-list.org</code> file is in org mode, you may only see the text <code>Tasks...</code>.  The three dots after Tasks indicates that this is a heading that contains more underneath.  Using the <code>Tab</code> key you can expand the contents and repeatedly tabbing will cycle through different levels of expansion.  To work on all headings at once, you can use the <strong>Shift-Tab</strong> key combination.</p><p><strong>M - Enter</strong></p><ul><li>creates another line in the same style as the current one the cursor is on.  If you do Alt-Enter at the end of a Task line, a new task is created.  At the end of a list line, a new list item is created, etc.</li></ul><p><strong>Shift- left/right arrows</strong></p><ul><li>on a TODO text cycles through the states of the task workflow</li></ul><p><strong>M - left/right arrows</strong></p><ul><li>promotes or demotes the task, giving an quick way to create sub-tasks.  A task line must start at the beginning of the line.  If you indenting a task line with spaces means it is no longer recognised as a task.</li></ul><p><strong>M-Shift- left/right arrows</strong></p><ul><li>promotes / demotes a whole structure.  For example, if there is a level 2 heading with several level 3 headings underneath, then promoting the level 2 heading to level 1 also promotes the level 3 headings to level 2.</li></ul><p><strong>M-Shift- up/down arrows</strong></p><ul><li>move tasks and list items up or down within the same level</li></ul><p><strong>Shift - up/down arrows</strong></p><ul><li>when on task ** will cycle through the priority of a tasks [A, B, C, none]</li></ul><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Emacs Org-mode is a great way to organise your busy developer life - and life in general if you are that way inclined.  As Org-mode is a part of Emacs already, then all you need to do is add a couple of lines of configuration and you are off.</p><p>As any Org-mode file is just a text file underneath, then you are not trapped into a format you cannt use anywhere else.</p><p>Hope you have a great time organising yourself with Org-mode.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png&quot; class=&quot;img-thumbnail&quot;&gt; 
&lt;p&gt;&lt;a href=&quot;http://blog.jr0cket.co.uk/2013/08/manage-dev-life-with-emacs-org-mode.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Emacs Org-mode&lt;/a&gt; has a feature called Org-capture that makes it easy to keep track of all the to-do’s that crop up as we work on projects.  With Org-capture you can make comments across all your files and projects and link to them all from one place. &lt;/p&gt;
&lt;p&gt;Here is how to configure Emacs Org-capture so you can quickly create new tasks relevant to specific files and easily manage them all in one place.  If you are not familiar with Emacs Org-mode, take a look at my article: &lt;a href=&quot;http://blog.jr0cket.co.uk/2013/08/manage-dev-life-with-emacs-org-mode.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Manage your developer life with Org-mode&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/tags/dev-tools/"/>
    
      <category term="org-mode" scheme="http://jr0cket.co.uk/tags/org-mode/"/>
    
  </entry>
  
  <entry>
    <title>Manage Your Developer Life With Emacs Org-Mode - an Overview</title>
    <link href="http://jr0cket.co.uk/2013/08/manage-dev-life-with-emacs-org-mode.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/manage-dev-life-with-emacs-org-mode.html.html</id>
    <published>2013-08-22T12:39:00.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail"> <p>As a busy developer I end up working on several projects, documents &amp; books at the same time. &nbsp;I want a simple way to capture notes where I don’t have to worry about formatting. &nbsp;I also want to keep a track on all the things I am working on. &nbsp;As I do most of my coding &amp; writing with Emacs, then I was sure it had something that could help.</p><a id="more"></a><h2 id="Enter-Org-mode"><a href="#Enter-Org-mode" class="headerlink" title="Enter Org-mode"></a>Enter Org-mode</h2><p>Org-mode is a really simple and beautiful way to take notes, create presentations, organise thoughts and help you manage tasks across all your work. &nbsp;The latest versions of Emacs (23.x / 24.x) have Org-mode built in, so you can use it straight away with <code>M-x org-mode</code>.</p><p>Org-mode documents are plain text, so they are easy to write and understand even outside of Emacs. &nbsp;The magic is happens when Org-mode interacts with that text. &nbsp;Org-mode understands the structure of the text and lets you easily organise everything into something useful.</p><p>I have written <a href="http://jr0cket.co.uk/2013/08/configure-emacs-org-mode-to-manage-your-tasks.html.html"><strong>a simple guide to configuring Org-mode and Org-capture</strong></a>, as well as<strong> <a href="http://jr0cket.co.uk/2013/08/defining-custom-workflow-with-Emacs-org-mode.html">a guide to creating your own task workflow</a></strong> for Org-mode.</p><p>Here is a quick YouTube video overview of Org-mode for Emacs by <a href="http://www.youtube.com/user/rpdillon?feature=watch" target="_blank" rel="noopener">Richard Dillon</a>, to understand the keyboard short-cuts used (key bindings) then see his <a href="https://github.com/rpdillon/hack-emacs-notes" target="_blank" rel="noopener">Org-mode notes</a> on Github. &nbsp;Or if you are already hooked on the idea of Org-mode then see the In-depth guide at the end of this article.</p><div class="video-container"><iframe src="//www.youtube.com/embed/6W82EdwQhxU" frameborder="0" allowfullscreen></iframe></div> <p><em>Hack Emacs: Introduction to Org-mode</em></p><p>You can also take a look at&nbsp;<a href="http://www.youtube.com/watch?v=oJTwQvgfgMM" target="_blank" rel="noopener">Carsten Dominik&nbsp;talking about Org-mode</a> from the Google Tech Talks back in 2008, the content is still relevant.</p><div class="video-container"><iframe src="//www.youtube.com/embed/oJTwQvgfgMM" frameborder="0" allowfullscreen></iframe></div><h2 id="Using-Org-capture-to-track-tasks"><a href="#Using-Org-capture-to-track-tasks" class="headerlink" title="Using Org-capture to track tasks"></a>Using Org-capture to track tasks</h2><p>Org-capture provides an easy way to create a list of all those tasks you want to do across all the text files you are working with. &nbsp;You create a comment in the file you are working in then with the cursor over that comment you create a new task using <strong>org-capture</strong>.  This opens up a file that holds your current tasks and using a template it creates a task that links back to the file where you made your comment. &nbsp;When you open this link it takes you back to the file and to the exact position you created the task from.</p><p>I will show you how to set up and use org-capture with Emacs and Emacs live in the next article of this series.</p><h2 id="Creating-presentations-for-developers"><a href="#Creating-presentations-for-developers" class="headerlink" title="Creating presentations for developers"></a>Creating presentations for developers</h2><p>You can easily create an interactive presentation with org-mode and more importantly for developers interact with real source code in a tool that knows how to process that code. &nbsp;If you want to publish this you can put your <code>.org</code> file on Github or export your presentation as HTML and other formats.</p><p>so you dont need to spend time on creating fancy spinning presentations with JavaScript or yet another boring power point presentation and fill it with static screen shots.</p><h2 id="Learning-Org-mode"><a href="#Learning-Org-mode" class="headerlink" title="Learning Org-mode"></a>Learning Org-mode</h2><p>The best place to start learning Org-mode is its website:&nbsp;<a href="http://orgmode.org/" target="_blank" rel="noopener">http://orgmode.org/</a>. &nbsp;I found the <a href="http://orgmode.org/guide/" target="_blank" rel="noopener">compact guide</a> a great introduction and it got me going quickly. &nbsp;I will also be writing a few follow-on articles on specific topics like task management and presentations.</p><p>You can also watch the <a href="http://www.youtube.com/watch?v=nsGYet02bEk" target="_blank" rel="noopener">Emacs Org-mode In-depth video</a>, again by&nbsp;<a href="http://www.youtube.com/user/rpdillon?feature=watch" target="_blank" rel="noopener">Richard Dillon</a></p><div class="video-container"><iframe src="//www.youtube.com/embed/nsGYet02bEk" frameborder="0" allowfullscreen></iframe></div><p><em>Emacs Org-mode in depth</em></p><p>Thank you.</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png&quot; class=&quot;img-thumbnail&quot;&gt; 
&lt;p&gt;As a busy developer I end up working on several projects, documents &amp;amp; books at the same time. &amp;nbsp;I want a simple way to capture notes where I don’t have to worry about formatting. &amp;nbsp;I also want to keep a track on all the things I am working on. &amp;nbsp;As I do most of my coding &amp;amp; writing with Emacs, then I was sure it had something that could help.&lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/tags/dev-tools/"/>
    
      <category term="org-mode" scheme="http://jr0cket.co.uk/tags/org-mode/"/>
    
  </entry>
  
  <entry>
    <title>Getting Started With Nodejs and Express Framework</title>
    <link href="http://jr0cket.co.uk/2013/08/getting-started-with-nodejs-and-express.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/getting-started-with-nodejs-and-express.html.html</id>
    <published>2013-08-19T14:12:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-iCH8QV8CGAY/UgfW0SNj9bI/AAAAAAAAK3I/qE6rmyNEhOI/s1600/nodejs-logo-nodes.png" class="img-thumbnail"> <p><a href="http://nodejs.org/" target="_blank" rel="noopener">nodejs</a> is an important aspect in making JavaScript so popular for modern development and frameworks like <a href="http://expressjs.com/" target="_blank" rel="noopener">Express</a> make development with node more productive.  It is really easy to get going with <a href="http://nodejs.org/" target="_blank" rel="noopener">nodejs</a> &amp; <a href="http://expressjs.com/" target="_blank" rel="noopener">Express</a> and you can deploy your app live via <a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku</a> too.</p><a id="more"></a><h1 id="Express-Framework"><a href="#Express-Framework" class="headerlink" title="Express Framework"></a>Express Framework</h1><p><a href="http://expressjs.com/" target="_blank" rel="noopener">Express</a> is a minimal and flexible node.js web application framework. You can easily create single &amp; multi-page web apps or use it with other languages to build hybrid web applications. Express makes using node.js much less of a learning curve, although you can still get to the raw node power once you are ready. </p><h1 id="Creating-your-first-nodejs-Express-app"><a href="#Creating-your-first-nodejs-Express-app" class="headerlink" title="Creating your first nodejs Express app"></a>Creating your first nodejs Express app</h1><p>Assuming you already have nodejs installed (<a href="http://blog.jr0cket.co.uk/2013/03/starting-nodejs-development-on-ubuntu.html" target="_blank" rel="noopener">install node on Ubuntu</a>) along with npm ,the nodejs package manager, then you are good to go.</p><h1 id="Create-your-project"><a href="#Create-your-project" class="headerlink" title="Create your project"></a>Create your project</h1><p>Create a folder for your application</p><pre><code>mkdir first-node-express</code></pre><h1 id="Define-project-dependencies"><a href="#Define-project-dependencies" class="headerlink" title="Define project dependencies"></a>Define project dependencies</h1><p>Create a <code>package.json</code> file to define your project and its dependencies.  Express is treated as a dependency for the project and you simply specify the version of Express you want to include.</p><p>To see what version of express is available, use the node package manager to find out</p><pre><code>npm info express version</code></pre><p>Edit the <code>package.json</code> file and define your project as follows</p><pre><code>{  &quot;name&quot;: &quot;node-express-simple&quot;,  &quot;description&quot;: &quot;A simple node express based website&quot;,  &quot;version&quot;: &quot;0.0.1&quot;,  &quot;private&quot;: true,  &quot;dependencies&quot;: {    &quot;express&quot;: &quot;3.3.5&quot;  }}</code></pre><blockquote><p>the name of the project should not contain spaces</p></blockquote><h1 id="Add-libraries-that-Express-and-Node-require"><a href="#Add-libraries-that-Express-and-Node-require" class="headerlink" title="Add libraries that Express and Node require"></a>Add libraries that Express and Node require</h1><p>Now the project dependencies are defined, use the node package manager to pull down those dependencies from the Internet.</p><pre><code>npm install</code></pre><p>You can view the dependencies of your project at any time by using the command:</p><pre><code>npm ls</code></pre><h1 id="Create-a-simple-route"><a href="#Create-a-simple-route" class="headerlink" title="Create a simple route"></a>Create a simple route</h1><p>In a text file called <code>web.js</code> define a simple route that will handle a request sent to the default address of your application, for example <code>/</code>. </p><blockquote><p>You can call this file anything you like, but its often web.js, app.js or server.js</p></blockquote><pre><code>// define a simple text responseapp.get(&apos;/&apos;, function(request, responce){  responce.send(&apos;Hello nodejs express World&apos;);});</code></pre><p>In the above example we are using response.send() to add a Content type and Content-Length to the response so they dont have to define them manually.</p><img src="http://4.bp.blogspot.com/-iCH8QV8CGAY/UgfW0SNj9bI/AAAAAAAAK3I/qE6rmyNEhOI/s1600/nodejs-logo-nodes.png" class="img-code"> <h1 id="Define-a-node-server-to-listen-to-requests"><a href="#Define-a-node-server-to-listen-to-requests" class="headerlink" title="Define a node server to listen to requests"></a>Define a node server to listen to requests</h1><p>In the same <code>web.js</code> file as above, add code to listen on a specific port and also send any logging information to the console from where your node app was run from.</p><pre><code>// bind to a port &amp;amp; listen for connections app.listen(3000);console.log(&apos;Node express app listening on port 3000&apos;);</code></pre><blockquote><p>It can be useful to define a $PORT variable and use that variable in your code, especially if you use multiple environments like development, testing and production.  Also some platform as a service approaches provide a port variable on which your application must listen (eg. Heroku.com).</p></blockquote><h1 id="Run-the-app-locally-with-the-node-command"><a href="#Run-the-app-locally-with-the-node-command" class="headerlink" title="Run the app locally with the node command"></a>Run the app locally with the node command</h1><p>To run your application, use the command called <code>node</code> and pass it the name of the file your application is in.  In this case <code>web.js</code>.</p><pre><code>node web.js</code></pre><p>You should see output on the console showing you that node is running and listening on the port you specified.</p><pre><code>Node express app listening on port 3000</code></pre><p>You can now <a href="http://localhost:3000/" target="_blank" rel="noopener">open your new node express website</a>.   You should just see the text messages displayed in your browser.</p><h1 id="Update-your-Node-Express-app-code-a-little-for-Heroku"><a href="#Update-your-Node-Express-app-code-a-little-for-Heroku" class="headerlink" title="Update your Node Express app code a little for Heroku"></a>Update your Node Express app code a little for Heroku</h1><p>To make the application a little more robust lets make a couple of changes to the port it runs on and the logging message.</p><p>Edit the <code>web.js</code> file and change the <code>app.listener</code> code to be set by an Heroku environment variable (or default to port 5000 if no variable set).  The console log code is also changed to include the port the app is running on just to be sure.</p><pre><code>var port = process.env.PORT || 5000;app.listen(port, function() {  console.log(&quot;Listening on &quot; + port);});</code></pre><p>We are also going to tell Heroku the process we want to run for our application, using a simple text file called <code>Procfile</code></p><blockquote><p>the file name is Procfile without any extension and P should be capitalised, it should be in the root of your project folder.</p></blockquote><p>Edit the <code>Procfile</code> and add the following line to run a web process using node and our application file.</p><pre><code>web: node web.js</code></pre><h1 id="Add-your-project-to-a-local-git-repository"><a href="#Add-your-project-to-a-local-git-repository" class="headerlink" title="Add your project to a local git repository"></a>Add your project to a local git repository</h1><p>I’m assuming you have Git already installed.  </p><blockquote><p>If you need to install Git, visit the <a href="http://git-scm.com/" target="_blank" rel="noopener">Git-SCM Website</a> or install the <a href="https://toolbelt.heroku.com/" target="_blank" rel="noopener">Heroku toolbelt</a></p></blockquote><p>Commit your code to your local git repository using the following commands:</p><pre><code>git initgit add Procfile web.js package.jsongit commit -m &quot;new project created&quot;</code></pre><h1 id="Create-an-Heroku-application-for-deployment"><a href="#Create-an-Heroku-application-for-deployment" class="headerlink" title="Create an Heroku application for deployment"></a>Create an Heroku application for deployment</h1><p>Assuming your project is managed with git and you have an <a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku account</a> and the <a href="https://toolbelt.heroku.com/" target="_blank" rel="noopener">Heroku toolbelt</a>, then you can simply create a space for your application on Heroku with the command:</p><pre><code>heroku create</code></pre><p>This adds a remote URL for the git repository on Heroku that your application will be deployed from.  You can use <code>git remote -v</code> to check it has been added.</p><h1 id="Deploy-your-application-to-Heroku"><a href="#Deploy-your-application-to-Heroku" class="headerlink" title="Deploy your application to Heroku"></a>Deploy your application to Heroku</h1><p>Your code is managed by your local Git repository as one or more commits, so all you have to do is push those commits to Heroku and trigger a deployment.</p><pre><code>git push heroku master</code></pre><h1 id="Start-your-application-on-Heroku"><a href="#Start-your-application-on-Heroku" class="headerlink" title="Start your application on Heroku"></a>Start your application on Heroku</h1><p>The final step to get your application running is to tell Heorku to run a process for your node server.  The following command will use the process defined in the Profile you created earlier.</p><pre><code>heroku ps:scale web=1</code></pre><p>Now you can see your application running live on the Internet by navigating to the application address shown at the end of the deployment (URL) or simply type:</p><pre><code>heroku open</code></pre><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Creating a web app with Nodejs and Express is pretty quick and deploying on Heroku is easy, giving you a live app you can continue to build upon.</p><p>Next I’ll look at doing more interesting things with Express, such as using it to generate an application skeleton.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://4.bp.blogspot.com/-iCH8QV8CGAY/UgfW0SNj9bI/AAAAAAAAK3I/qE6rmyNEhOI/s1600/nodejs-logo-nodes.png&quot; class=&quot;img-thumbnail&quot;&gt; 
&lt;p&gt;&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nodejs&lt;/a&gt; is an important aspect in making JavaScript so popular for modern development and frameworks like &lt;a href=&quot;http://expressjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Express&lt;/a&gt; make development with node more productive.  It is really easy to get going with &lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nodejs&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://expressjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Express&lt;/a&gt; and you can deploy your app live via &lt;a href=&quot;https://www.heroku.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Heroku&lt;/a&gt; too.&lt;/p&gt;
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="nodejs" scheme="http://jr0cket.co.uk/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Developing on MacOSX Is More Human With Ubuntu Fonts</title>
    <link href="http://jr0cket.co.uk/2013/08/developing-on-macosx-more-human-with.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/developing-on-macosx-more-human-with.html.html</id>
    <published>2013-08-12T19:50:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<p>As a developer you sit in front of your laptop all day (and night) so why not make it a more human experience by using the set of beautifully clear fonts from Ubuntu. &nbsp;Its really quick and simple to add them to your MacOSX machine (and probably windows), so give it a try.</p><a id="more"></a><h1 id="The-Ubuntu-font-family"><a href="#The-Ubuntu-font-family" class="headerlink" title="The Ubuntu font family"></a>The Ubuntu font family</h1><img src="http://3.bp.blogspot.com/-3zqHH9zVZ4s/Ugk10_CFuGI/AAAAAAAAK3Y/l06Tqnyb2o0/s1600/Ubuntu_Font_Family.png" class="img-topic"> <p>The Ubuntu font family has been professionally designed and is freely available from <a href="http://font.ubuntu.com/" target="_blank" rel="noopener">font.ubuntu.com</a>.</p><p>The fonts are available in a range of weights as well as different natural languages. &nbsp;As developers there is also a really beautiful mono-type font too called Ubuntu Mono!</p><p>Here is a simple example of some Clojure code in the Ubuntu Mono font:</p><img src="http://2.bp.blogspot.com/-eFL0wzEJQK0/Ugk7322THJI/AAAAAAAAK4k/3xLH4l_82pQ/s1600/ubuntu-fonts-core.clj-example.png" class="img-code"> <p>And a further example of some markdown (as used by Github, etc.)</p><img src="http://2.bp.blogspot.com/-9L5jxUlsc7A/Ugk8HVfwFWI/AAAAAAAAK4s/RD3lwVChM-8/s1600/ubutnu-fonts-index.md-example.png" class="img-code"><img src="http://2.bp.blogspot.com/--h8jdygzyyI/Ugk3gdRijiI/AAAAAAAAK30/cibAauJPaus/s1600/ubuntu-font-family-list.png" class="img-code"><h1 id="Adding-Fonts-to-MacOSX-is-a-simple-drag-and-drop"><a href="#Adding-Fonts-to-MacOSX-is-a-simple-drag-and-drop" class="headerlink" title="Adding Fonts to MacOSX is a simple drag and drop"></a>Adding Fonts to MacOSX is a simple drag and drop</h1><p>Download the Ubuntu fornts zip file and extract it (open the zip file in MacOSX extracts it).</p><p>Drag and drop all the files with a .ttf extension (true type font) to the folder containing all the fonts on your Mac:</p><img src="http://2.bp.blogspot.com/-ieiw0icjWdw/Ugk4JviIQtI/AAAAAAAAK38/Tj8OY04lP9I/s1600/ubuntu-fonts-macosx-library-fonts-path.png" class="img-code"><p>Now all your applications on the Mac should be able to use the Ubuntu fonts.</p><h1 id="Tweaking-your-developer-tools"><a href="#Tweaking-your-developer-tools" class="headerlink" title="Tweaking your developer tools"></a>Tweaking your developer tools</h1><img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-topic"><p>I use Emacs for most of my development on the Mac, but any app should be able to pick up the Ubuntu fonts you have added. </p><p>I have Emacs configured with the Emacs Live setup, so I simply add the Ubuntu Mono font as the default in the configuration file:</p><pre><code>~/.live-packs/accountname-pack/init.el</code></pre><p>The Emacs Lisp code to set the font to Ubuntu Mono as a font size of 16 (good for demos) is:</p><pre><code>(live-set-default-font &quot;Ubuntu Mono 16&quot;)</code></pre><p>This code looks much better in Emacs with the new Ubuntu Mono font of course.<br><img src="http://3.bp.blogspot.com/-Pb4STT7KHYI/Ugk6n6491LI/AAAAAAAAK4U/SZr9rieU8XE/s1600/ubuntu-font-emacs-init.el-example.png" class="img-code"></p><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Chaning fonts may seem like a small change to make, but anything you can do to make your development environment as enaging and enjoyable as possible is worth doing.  After all I certainly spend a lot of time in my developer environment.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As a developer you sit in front of your laptop all day (and night) so why not make it a more human experience by using the set of beautifully clear fonts from Ubuntu. &amp;nbsp;Its really quick and simple to add them to your MacOSX machine (and probably windows), so give it a try.&lt;/p&gt;
    
    </summary>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/categories/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="mac" scheme="http://jr0cket.co.uk/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Hack and Learn With Polyglot Developers in Beautiful Birmingham</title>
    <link href="http://jr0cket.co.uk/2013/08/hack-and-learn-with-polyglot-developers.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/hack-and-learn-with-polyglot-developers.html.html</id>
    <published>2013-08-08T14:36:00.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-LBA04JPAvuM/UgOqJL9PEoI/AAAAAAAAKys/Kv2DM3kmyWg/s1600/hackference_logo.png" class="img-thumbnail"> <p><a href="http://hackference.co.uk/" target="_blank" rel="noopener">Hackference Birmingham</a> at the end of August is a great opportunity to discover new ideas from polyglot developers at a one day conference, then try those ideas out over a weekend hackathon. </p><a id="more"></a><p>I’d also forgotten that Birmingham is also a great city to explore, with lots of history and modern design to take in (including the <a href="http://www.fazeleystudios.com/" target="_blank" rel="noopener">Fazeley Studios</a> venue).  So I’m going to spend a little extra time discovering all it has to offer.  All of this is within a few minutes walk of Birmingham New Street station.</p><blockquote><p><a href="http://hackference.co.uk/buy" target="_blank" rel="noopener">Sign up by 9th August for the early bird discount </a></p></blockquote><h1 id="Hackference-The-Conference"><a href="#Hackference-The-Conference" class="headerlink" title="Hackference: The Conference"></a>Hackference: The Conference</h1><img src="http://4.bp.blogspot.com/-yK4Trdo9HA0/UgOig4F70HI/AAAAAAAAKyM/sVUEtN_FXDU/s1600/Hackference-Fazeley-Studios.png" class="img-topic"> <p>The beautiful <a href="http://www.fazeleystudios.com/" target="_blank" rel="noopener">Fazeley Studios</a> </p><p>The one day conference on Friday offers a diverse set of topics, covering everything from API design, MongoDB, NodeJS, Clojure and even Go.</p><p>There is a great line up of experienced speakers, although not the ones you see very often so its a chance to hear some different viewpoints.  I am especially looking forward to hearing from <a href="https://twitter.com/lornajane" target="_blank" rel="noopener">Lorna Mitchell</a> about her experiences with API design.</p><p>It will also be great to see the guys from Twillio, PayPal and SoundCloud.  All these companies are highly innovative and doing some great things with technology.</p><p>As I have been drawn to the <a href="http://clojure.org/" target="_blank" rel="noopener">Clojure</a> language for the last few years it will be great to hear from <a href="http://hackference.co.uk/speakers#joe-littlejohn" target="_blank" rel="noopener">Joe Littlejohn</a> and <a href="http://hackference.co.uk/speakers#mark-godfrey" target="_blank" rel="noopener">Mark Godfrey</a> on why we should be looking at Clojure and what developers we can gain from the language.  I am intrigued as to how they have been using Clojure at Nokia.</p><h1 id="Hackference-The-Hackathon"><a href="#Hackference-The-Hackathon" class="headerlink" title="Hackference: The Hackathon"></a>Hackference: The Hackathon</h1><img src="http://3.bp.blogspot.com/-ih47wFTJQsE/UgOq-7kfD4I/AAAAAAAAKy4/ihETCQQwppY/s1600/Hackference_-_A_developer_s_dream.png" class="img-topic"> <p><a href="http://en.wikipedia.org/wiki/Hackathon" target="_blank" rel="noopener">Hackathons</a> are a great chance to focus on learning new things and improving your skills.  With a host of companies there to help you try out their API’s and also win prizes for your app then it truly is a weekend for fun and profit.</p><p>I’ll also be running workshops on <a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a>, <a href="http://github.com/" target="_blank" rel="noopener">Github</a> and <a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku</a>, to help you develop and deploy your applications collaboratively.  I’ll be on hand to help out teams throughout the hackathon as well as writing some apps in Clojure and JavaScript.</p><p>An of course its just great to have some time to scratch that itch you have with the stuff you wanted to create but never had time.  With a weekend to focus you can really get in the zone and get creative.</p><h1 id="Hackference-The-City"><a href="#Hackference-The-City" class="headerlink" title="Hackference: The City"></a>Hackference: The City</h1><img src="http://1.bp.blogspot.com/-nqSDbM7BxbU/UgOmWTPGl2I/AAAAAAAAKyc/e5eXoqVxLGQ/s1600/hackference-hotel-rotunda.png" class="img-topic"> <p>Birmingham is so easy to get to from most cities, that its a shame I havent taken the time to visit more often.  There are some great hotels to stay at, such at the <a href="http://www.stayingcool.com/birmingham.aspx" target="_blank" rel="noopener">Rotunda</a> with great views of the city.</p><p>If you are looking for culture then there are some world class galleries and museums.  I like the sound of the <a href="http://visitbirmingham.com/explore-birmingham/places/thinktank-incorporating-the-giant-screen/" target="_blank" rel="noopener">Thinktank Birmingham Science Museu</a>, a ten themed galleries of immense, inspiring, interactive fun with everything from full size locomotives and aircraft to intestines and taste buds.  Another pleasure would be the planetarium which presents breathtaking images on a 360° domed ceiling.</p><p>You can see yourself on TV at <a href="http://visitbirmingham.com/explore-birmingham/places/bbc-birmingham-public-space/" target="_blank" rel="noopener">BBC Birmingham’s Public Space</a> at The Mailbox or go on a tour of the BBC studios.  For the indulgent there is also the <a href="http://visitbirmingham.com/explore-birmingham/places/cadbury-world/" target="_blank" rel="noopener">Cadbury World</a>, a bit like Willy Wonka’s chocolate factory in real life :)</p><p>So there is a <a href="http://visitbirmingham.com/what-to-do/attractions/" target="_blank" rel="noopener">whole range of things to do</a> for you or if you want to entertain your family whist you hack.</p><h1 id="Hackference-Register"><a href="#Hackference-Register" class="headerlink" title="Hackference: Register"></a>Hackference: Register</h1><p>Talk a look at the conference <a href="http://hackference.co.uk/schedule" target="_blank" rel="noopener">schedule</a> and <a href="http://hackference.co.uk/speakers" target="_blank" rel="noopener">speakers list</a>. If you <a href="http://hackference.co.uk/buy" target="_blank" rel="noopener">sign up</a> before the 9th August you can get the <a href="http://hackference.co.uk/buy" target="_blank" rel="noopener">early bird discount</a> too.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://3.bp.blogspot.com/-LBA04JPAvuM/UgOqJL9PEoI/AAAAAAAAKys/Kv2DM3kmyWg/s1600/hackference_logo.png&quot; class=&quot;img-thumbnail&quot;&gt; 
&lt;p&gt;&lt;a href=&quot;http://hackference.co.uk/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hackference Birmingham&lt;/a&gt; at the end of August is a great opportunity to discover new ideas from polyglot developers at a one day conference, then try those ideas out over a weekend hackathon. &lt;/p&gt;
    
    </summary>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
    
      <category term="hackference" scheme="http://jr0cket.co.uk/tags/hackference/"/>
    
  </entry>
  
  <entry>
    <title>Getting to Grips With Git - Understanding the Git &amp; Github Workflow</title>
    <link href="http://jr0cket.co.uk/2013/08/getting-to-grips-with-git-understanding-the-simple-workflow.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/getting-to-grips-with-git-understanding-the-simple-workflow.html.html</id>
    <published>2013-08-01T10:09:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail"><p>Learning to use Git to version your development projects can seem a little strange at first, although once you have a few basics it quickly becomes a natural and fast tool to use.</p><p>Here are some of the basics of the Git and Github workflow in word and pictures, created from my mission to teach the world (starting with London) to use Git effectively. &nbsp;If you just want an overview of the basic commands, see my <a href="http://jr0cket.github.io/developer-guides/git-quickstart-guide.pdf" target="_blank" rel="noopener">Git Quickstart Guide</a>.</p><a id="more"></a><h1 id="Understanding-the-basic-Git-workflow"><a href="#Understanding-the-basic-Git-workflow" class="headerlink" title="Understanding the basic Git workflow"></a>Understanding the basic Git workflow</h1><p>Git has several stages in the basic workflow:</p><p><code>Working copy</code>: the project source code and configurations</p><p><code>Staging</code>: add the changes that you want to make a part of the next commit</p><p><code>Local repository</code>: the full history of your projects as a series of commits, contained within a folder called <code>.git</code> in the root folder of your project.</p><h1 id="Why-have-a-staging-area"><a href="#Why-have-a-staging-area" class="headerlink" title="Why have a staging area?"></a>Why have a staging area?</h1><p>The staging area allows you a little more room to consider what the next commit should contain. &nbsp;Its much simpler to change your mind about what will go into the commit by un-staging changes. &nbsp;You also do not have to be concerned about re-writing commit history.</p><p>Once you have made a commit, then you should avoid making changes to that commit. &nbsp;Its usually better to fix anything in another commit than to change the first one. </p><p>Once you share a commit with others, eg. via Github or CI server, then you should consult with everyone concerned before making a change to a commit.</p><h1 id="A-Git-and-Github-workflow"><a href="#A-Git-and-Github-workflow" class="headerlink" title="A Git and Github workflow"></a>A Git and Github workflow</h1><p>You can version changes for your project to your local repository as often as you need without conflict as you are the only collaborator. &nbsp;This also means you can work off-line too.</p><p>When you want to collaborate on projects you can set up a shared repository that you work on as a team, pushing the commits you made in your local repository to the shared repository.</p><p>The most well known example of shared repositories is Github.</p><img src="http://1.bp.blogspot.com/-n8gwrM5Bf04/UfosDLuuDUI/AAAAAAAAKwg/2aE3V0NDk-g/s1600/git-and-github-workflow.png" class="img-code"><p>In the example, John has started work on a project on his laptop and created a local repository using the command <code>git init</code>.</p><p>John then stages changes using <code>git add filename</code> or <code>git add .</code> if he wants to add everything.  When John is happy with the changes he has staged and has though of a good commit message, then he creates a new commit with the command <code>git commit -m &quot;meaningful commit message&quot;</code>.</p><p>John now wants to share code with others, so visits the <a href="https://github.com" target="_blank" rel="noopener">Github.com</a> website and creates a new repository (having first created an account and added his public key to his Github account).</p><p>John then tells his local repository about the new Github repository using the command <code>git remote add remote-alias-name github-repo-url</code> - where <code>remote-alias-name</code> is an alias used to refer to the remote repo and <code>git-repo-url</code> is the web address of the Github repository as stated on its github page.</p><p>John can then push his changes contained within the local repository to the Github repository using the command <code>git push remote branch</code> - where <code>remote</code> is the alias for the github repository URL and <code>branch</code> is <code>master</code> as no other branches have been created at this point. </p><h2 id="Collaborating-via-Github"><a href="#Collaborating-via-Github" class="headerlink" title="Collaborating via Github"></a>Collaborating via Github</h2><p>Carlos sees this new repository created by John on Github and decides to get a copy by using the command <code>git clone remote-repo-url</code> - where <code>remote-repo-url</code> is the web address of the Github repository as stated on its github page.</p><p>By cloning the Github repository made by John, Carlos has a new local repository and can see the full history of commits. &nbsp;Carlos can edit the working copy as well as stage and commit his own changes to this new repository. &nbsp;Carlos cannot push changes back to the repository on Github though, so if he did git push it would fail. &nbsp;To update the github repository, John would need to add Carlos as a contributor first.</p><p>Sam has also seen the Github repository that John created and rather than take a copy using git clone, she has used the Github website to create a fork. &nbsp;A fork is an exact copy of a Github repository, in this case Sam now has an exact copy of Johns repo but under her Github account and fully accessible by her.</p><p>Sam gets a copy of her forked repo on her laptop by using the command <code>git clone remote-repo-url</code>. </p><p>Now Sam can edit the code in her working copy and commit those changes to her local repository.  She can also push those committed changes to her forked repository on Github.</p><p>If Sam wants to share her new commits with John, then from the web page of her forked Github repository she can <a href="https://help.github.com/articles/using-pull-requests" target="_blank" rel="noopener">create a pull request</a>. &nbsp;This sends a message to John to let him know that there are changes in the forked repository that he may want to pull into his Github repository.</p><p>Should John accept the pull request made by Sam, then he will also need to update his local repository using the command <code>git pull remote branch</code></p><p>Once you are sharing changes thorugh remote repositories, you need to make sure you keep your local repositories up to date with other peoples changes that are pulled into those remote repositories, otherwise it may prevent you from pushing your changes…</p><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Using Git and Github may feel a little strange at first, but once you have some practice and if you keep your workflow simple then using Git will become very natural and fast.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://git-scm.com/images/logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Learning to use Git to version your development projects can seem a little strange at first, although once you have a few basics it quickly becomes a natural and fast tool to use.&lt;/p&gt;
&lt;p&gt;Here are some of the basics of the Git and Github workflow in word and pictures, created from my mission to teach the world (starting with London) to use Git effectively. &amp;nbsp;If you just want an overview of the basic commands, see my &lt;a href=&quot;http://jr0cket.github.io/developer-guides/git-quickstart-guide.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git Quickstart Guide&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="github" scheme="http://jr0cket.co.uk/tags/github/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hacked - a Judges View of 500 Developers Creativity in London</title>
    <link href="http://jr0cket.co.uk/2013/07/hackedio-500-developers-getting.html.html"/>
    <id>http://jr0cket.co.uk/2013/07/hackedio-500-developers-getting.html.html</id>
    <published>2013-07-26T16:40:00.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<p>As a judge at <a href="http://hacked.io/" target="_blank" rel="noopener">Hacked</a> I was amazed by all the developer talent concentrated into one weekend Hackathon.  There were lots of great ideas realised into apps in such a short space of time.  With 500 developer making up <a href="https://www.hackerleague.org/hackathons/hacked/hacks" target="_blank" rel="noopener">74 teams</a>, it was a challenge to pick out winners. </p><p>As Heroku were a major sponsor we decided to give out <a href="http://hacked.io/almanac/heroku/" target="_blank" rel="noopener">prizes</a> to 5 teams, even then it was still a challenge to choose only 5.  We also gave out lots of swag and the t-shirts and moleskin notebooks went down a storm.</p><p>With so many diverse creations on show Hacked really lived up to its tagline: Learn ,Build, Share.</p><h1 id="Hacked-io-Learn"><a href="#Hacked-io-Learn" class="headerlink" title="Hacked.io: Learn"></a>Hacked.io: Learn</h1><p>I ran a workshop introducing <a href="https://go.heroku.com/" target="_blank" rel="noopener">Heroku</a>, a service to allow developers to deploy there apps quickly without worrying about complex scripts or managing servers.  There were lots of questions about Heroku, <a href="https://postgres.heroku.com/" target="_blank" rel="noopener">Postgres</a> database on demand and other <a href="https://addons.heroku.com/" target="_blank" rel="noopener">addons</a>.  It was great to see enthusiasm from developers wanting to make the most out of the cloud.</p><p>I also ran a workshop on Git, so everyone could put their code up on Github or deploy on Heroku.  As Heroku uses Git for code deployments, then once you are comfortable with basics of Git, deploying in this way seems very natural.</p><p><a href="https://twitter.com/neilmiddleton" target="_blank" rel="noopener">@neilmiddleton</a> also gave a workshop on the new Heroku API, allowing you to create apps, scale them and monitor them from your own applications.</p><p>The BBC, Nokia and lots of other sponsors also gave great talks and help with their APIs.  The BBC had a whole bank of TVs available to hack real TV apps on.</p><h1 id="Hacked-io-Build"><a href="#Hacked-io-Build" class="headerlink" title="Hacked.io: Build"></a>Hacked.io: Build</h1><p>Everyone pretty quickly got into teams to start hacking.  There were physical hacks, api hacks, music hacks, TV hacks and some really bizzar hacks going on all through the weekend.</p><p>When not running workshops, I interrupted teams hacking away to find out what they were up to.</p><p>The Heroku team had a few spare minutes free to build an app too.  Using the Heroku API, we built an app that would show a snippet of your logs when ever someone connected to one of your running apps, showing the location of the users IP on a map.</p><h1 id="Hacked-io-Share"><a href="#Hacked-io-Share" class="headerlink" title="Hacked.io: Share"></a>Hacked.io: Share</h1><p>It was great to get so many teams sharing their amazing creations.  The diversity of the crowd produced a feast for the eyes and ears.  I’ve only captured a few of my own highlights in this post.</p><h1 id="Getting-Organised"><a href="#Getting-Organised" class="headerlink" title="Getting Organised"></a>Getting Organised</h1><p>One of the apps I liked the most was the <strong>Event board for organiser</strong> by <a href="https://twitter.com/EChesters" target="_blank" rel="noopener">@EChesters</a> as running developer events on the scale of Hacked is a big challenge.  The Hacked team did very well, although having a good app to managing all aspects of an event in real time would help any team run a event more smoothly.  I especially liked the real time alerts mobile app.  Lets hope this team takes the app further.</p><img src="http://3.bp.blogspot.com/-SBMbodpj9fE/UfKrfRx_7rI/AAAAAAAAKwA/f4muQ-9xtfw/s1600/hacked-machines-3d-printing.png" class="img-topic"><h1 id="Rise-of-the-Machines"><a href="#Rise-of-the-Machines" class="headerlink" title="Rise of the Machines"></a>Rise of the Machines</h1><p>There were many hardware hacks at the event, especially with <a href="http://nodecopter.com/" target="_blank" rel="noopener">node copters</a>, micro node copters, nano node copters and copters controlled by Playstation Move controllers.  My favourite amongst these was Wild thumper, a node copter that could follow a remote controlled car just by attaching a small ring of lights to the car, that was really cool.  <a href="http://www.arduino.cc/" target="_blank" rel="noopener">Arduino</a> powered controller for remote controlled car, with <a href="http://www.raspberrypi.org/" target="_blank" rel="noopener">Raspberry Pi</a> camera driving the copter.</p><h1 id="The-world-needs-more-cuteness"><a href="#The-world-needs-more-cuteness" class="headerlink" title="The world needs more cuteness"></a>The world needs more cuteness</h1><p>There were cute hacks like the <a href="http://tiny.cc/bunzorcam" target="_blank" rel="noopener">Bunzor Cam</a> by <a href="http://www.twitter.com/danielknell" target="_blank" rel="noopener">@danielknell</a>, <a href="http://www.twitter.com/mfujica" target="_blank" rel="noopener">@mfujica</a>, <a href="http://www.twitter.com/motoko_k" target="_blank" rel="noopener">@motoko_k</a> and fudge the rabbit, because there are just not enough cute bunnies on the web.</p><p>Other cute hack involved a knitted darlek and a chrome extension that changed any pictures on a web page to that of a cat… great fun if you do a Google image search for dogs and watch them all change to different cats!</p><img src="http://1.bp.blogspot.com/-F6AIhd1p1xY/UfKozY_9lKI/AAAAAAAAKvk/WjFnAnVpZ64/s1600/philps-lightbox-wires.png" class="img-topic"><h1 id="Let-there-be-light"><a href="#Let-there-be-light" class="headerlink" title="Let there be light"></a>Let there be light</h1><p>It seems the Hue Light boxes from Philips caught a fair bit of attention.  These were a 3 bulb array that you could connect to over WiFi or Ethernet and control the colours and sequencing of the lights.  The most useful hack for me was the BusBulb.  This hack tapped into Transport for London open data on transport and gave you a lighting countdown to when you needed to leave for your bus.  This would save me a lot of checking of my phone for the time and save batter.</p><h1 id="The-Hacked-io-Hackathon-Winners"><a href="#The-Hacked-io-Hackathon-Winners" class="headerlink" title="The Hacked.io Hackathon Winners"></a>The Hacked.io Hackathon Winners</h1><p>It was tough deciding on winners when there were so many great submissions to choose from.  I spent time finding out what the teams were building as its hard to get a true picture just from the 90 second demo at the end.</p><p>There was one app that all the judges quickly agreed was the winner, FlashMed.  This app was quite simple but provided a very important service, managing a medication regime for the elderly.  Most elderly people have to take a range of medicines and these are all colour coded to help them.  However its easy to forget the schedule you need to take.  So the app connects to a Phillips Hue lightbox and displays the colour of the medication at the time you are supposed to take it.  Once you have taken it then the light will switch off.  If you fall asleep then the light shows which medications you need to catch up on.  Simple and effective</p><p>The peoples choice went to the crazy kids who won two giant lego Starwars kits, the death star and millenium falcon.  That should keep them busy next weekend.</p><h1 id="The-Heroku-Winners"><a href="#The-Heroku-Winners" class="headerlink" title="The Heroku Winners"></a>The Heroku Winners</h1><img src="http://2.bp.blogspot.com/-Aa5-sCTus4w/UfKpnTsSMlI/AAAAAAAAKvw/sIbH0AMTxy4/s1600/hacked-prizes-heroku-excitement.png" class="img-topic"> <h1 id="API-Unifier"><a href="#API-Unifier" class="headerlink" title="API Unifier"></a><a href="https://www.hackerleague.org/hackathons/hacked/hacks/heroku-api-using-restapiunifier" target="_blank" rel="noopener">API Unifier</a></h1><p><a href="https://twitter.com/theNeomatrix369" target="_blank" rel="noopener">@theNeomatrix369</a> created a wrapper around the Heroku API to help Java developers create cool applications easily with the Heroku API.</p><p>The API Unifier is a lightweight Java library that brings together a collection of RESTful APIs under one roof!  This simplifies the use and maintenance of dependencies on external APIs. This library creates an abstraction layer between your application and APIs from disparate vendors to increase cohesion, reduce coupling.<div></div></p><h1 id="MusicMatch-io"><a href="#MusicMatch-io" class="headerlink" title="MusicMatch.io"></a><a href="https://www.hackerleague.org/hackathons/hacked/hacks/musicmatch" target="_blank" rel="noopener">MusicMatch.io</a></h1><p>MusicMatch is a social music competition where you need to guess the correct 10 second clip to build up points to get you up the leader board.  The quicker you answer the more points you get, but get the answer wrong and you and you lose points.</p><p>The application was developed with Nodejs and uses Nokia music API to get the music tracks.  Redis (Heroku addon) is used to manage the leader board and the app was deployed on Heroku.</p><h1 id="Boomerang"><a href="#Boomerang" class="headerlink" title="Boomerang"></a><a href="https://www.hackerleague.org/hackathons/hacked/hacks/boomerang" target="_blank" rel="noopener">Boomerang</a></h1><p>This app is a really fun idea and adds a different dimension to the experience at an event.  With Boomerang you take a picture and throw it out there and see what picture you get back in return.  You never get your own picture back, so you get to experience a little of what everyone else at an event experiences.</p><p>The team built this as a native android application with a back-end service running on Heroku to manage which images you received.  The app could also be passed to your friends or strangers at the event if they have a NFC enabled phone.</p><h1 id="99hours"><a href="#99hours" class="headerlink" title="99hours"></a>99hours</h1><p>This app helps people develop their ideas and get thought the barriers to turn those ideas into apps.  99hours connects people with those ideas  to those who can help them out.  The goal is to create a highly collaborative place to nurture ideas into projects.  This collaboration is realised in features such as feedback from the community on ideas by up-voting, or providing a variation on the kick-starter model and allowing direct donations to a project you want to support.</p><h1 id="Pigeon"><a href="#Pigeon" class="headerlink" title="Pigeon"></a>Pigeon</h1><p>Tom Morris created an app called pidgeon as a kind of location brokarage service, a personal api for your location.  Deployed on Heroku, this app has a simple API to post location information into forsquare to give real time updates of where you are.  To display map information on the website, the hack was written using Rails and used MapBox, OpenStreetmap and MogoLab Heroku addon.  Sometimes you want to hide your location, so the app also had rules to hide your location when you are at home or other personal locattions.  To test the app, Tom also used Macosx controlPlane to simulate different networks.</p><h1 id="The-Next-Hackathon"><a href="#The-Next-Hackathon" class="headerlink" title="The Next Hackathon"></a>The Next Hackathon</h1><p>It does take a few days for the adreneline and lack of sleep to balance themselves out after a Hackathon.  Lucklly then there is a few weeks before Leeds Hack.  Leeds hack is great, especially if you want to get your children involved in coding.</p><p>I’ll be at Hackference Birmingham next, the first event of its kind in Birmingham, so it should be a great event.  I’ll be doing workshops around Heroku &amp; Git and it seems there is lots of interest around Clojure, functional programming on the JVM. </p><img src="http://si0.twimg.com/profile_images/3687034314/640a734aa1b7d887be40fedac191679f_normal.jpeg" class="img-topic"><blockquote><p>Mike Elsmore - I cordially invite everyone who went to <a href="https://twitter.com/HACKEDio" target="_blank" rel="noopener">@HACKEDio</a> to come to <a href="https://twitter.com/hackferencebrum" target="_blank" rel="noopener">@hackferencebrum</a> and help me make something awesome <a href="http://t.co/8lvxK8Qa9e" title="http://hackference.co.uk" target="_blank" rel="noopener">http://hackference.co.uk</a></p><footer><strong>ukmadlz</strong><cite><a href="https://twitter.com/ukmadlz/status/359011375110045696" target="_blank" rel="noopener">twitter.com/ukmadlz/status/359011375110045696</a></cite></footer></blockquote><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As a judge at &lt;a href=&quot;http://hacked.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hacked&lt;/a&gt; I was amazed by all the developer talent concentrated
      
    
    </summary>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
    
      <category term="hackathon" scheme="http://jr0cket.co.uk/tags/hackathon/"/>
    
  </entry>
  
  <entry>
    <title>Designing Your Own Commit Graph With Git</title>
    <link href="http://jr0cket.co.uk/2013/06/designing-your-own-commit-graph-with-git.html.html"/>
    <id>http://jr0cket.co.uk/2013/06/designing-your-own-commit-graph-with-git.html.html</id>
    <published>2013-06-22T18:40:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail"><p>Git log is a very powerful tool for tracking all your changes, even across different branches and multiple repositories.  However <span style="font-family: Courier New, Courier, monospace;">git log</span> default output is verbose and not a great way to visualise the commit history.</p><p>Fortunately Git is very customisable, both for humans and tools.  This article covers one way to creating your own customised output for git log that helps you work with branches and track changes through local and remote (eg. Github) repositories.</p><a id="more"></a><h1 id="Using-git-log-options"><a href="#Using-git-log-options" class="headerlink" title="Using git log options"></a>Using git log options</h1><p>In a <a href="http://blog.jr0cket.co.uk/2013/01/git-log-makes-multiple-repos-easier-to.html" target="_blank" rel="noopener">previous article</a> I covered the different git log options that could be combined into a good visualisation:</p><pre><code>git log --graph --decorate --relative-date --oneline</code></pre><p>This is a very simple way to configure the log, but there is a lot more you can do to tweak this.</p><h1 id="Hacking-the-pretty-format"><a href="#Hacking-the-pretty-format" class="headerlink" title="Hacking the pretty format"></a>Hacking the pretty format</h1><p>For any git output you can use the <code>--pretty=format:</code> option to define your own visualisation of the information.  There are some built in formats you can use with this option or with a bit of googling its not to hard to create your own specific layouts and colours.</p><p>Lets look at an example git log configuration:</p><pre><code>git log --graph --date=relative         --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset&apos;</code></pre><p>Show the git log graph with date relative times to the last commit made.  Commit numbers are in red, branches and remote repositories are in yellow, commits in white and relative commit times in green.</p><img src="http://4.bp.blogspot.com/-8qgVMXGUang/UcXd207WTwI/AAAAAAAAJyg/FXf3u6vSi4c/s1600/git-log-pretty-one.png" class="img-code"><p>Lets add commit author details to the configuration too:</p><pre><code>git log --graph --date=relative         --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&apos;</code></pre><p>The author information is added to the end of each line in blue.</p><img src="http://2.bp.blogspot.com/-k3GFOHCIE3Y/UcXeFBv-ZaI/AAAAAAAAJyo/PV1fyHbgbzU/s1600/git-log-pretty-two.png" class="img-code"><p>This example shows you the full history of your git log </p><pre><code>git log --graph --full-history --all --color --date=short         --pretty=format:&apos;%Cred%x09%h %Creset%ad%Cblue%d %Creset %s %C(bold)(%an)%Creset&apos;</code></pre><p>A simpler git log in graph form </p><pre><code>git log --graph         --pretty=format:&apos;%Cred%h%Creset - %C(yellow)%d%Creset %s %Cgreen%cr %C(cyan)[%aN]%Creset&apos;</code></pre><p>You can also create a simple commit graph by date, without showing the numbers.  This is useful if you are just going off the branches or tags. </p><pre><code>git log --graph --date=short        --pretty=format:&apos;%Cgreen%cd%Creset - %C(yellow)%d%Creset %s %C(cyan)[%aN]%Creset&apos; </code></pre><h1 id="Adding-Shortcuts-for-git-log-options"><a href="#Adding-Shortcuts-for-git-log-options" class="headerlink" title="Adding Shortcuts for git log options"></a>Adding Shortcuts for git log options</h1><p>You can add these commands and many more to your git config file as aliases to save your typing them all out and having to remember them too.  You can use git config or add them directly to your <code>~/.gitconfig</code> file as follows:</p><script src="//gist.github.com/4649149.js"></script><h1 id="Understanding-the-Git-Pretty-Format-codes"><a href="#Understanding-the-Git-Pretty-Format-codes" class="headerlink" title="Understanding the Git Pretty Format codes"></a>Understanding the Git Pretty Format codes</h1><p>There is a complete <a href="http://opensource.apple.com/source/Git/Git-19/src/git-htmldocs/pretty-formats.txt" target="_blank" rel="noopener">guide to git</a> formats and codes, however these are probably the main codes you need to know</p><ul><li><p>output text in the colour colour-name<br>  %Ccolour-name </p></li><li><p>reset the output text colour<br>  %Creset</p></li><li><p>commit number / hash (in short form due to the <code>--abbrev-commit</code>option)<br>  %h</p></li><li><p>repository (–decorate)<br>  %d</p></li><li><p>commit message<br>  %s</p></li><li><p>time stamp / commit relative<br>  %cr</p></li><li><p>author / account name<br>  %an</p></li></ul><h1 id="Abbreviating-Commit-numbers"><a href="#Abbreviating-Commit-numbers" class="headerlink" title="Abbreviating Commit numbers"></a>Abbreviating Commit numbers</h1><p>Since git version 1.7.6, git config has gained a <code>log.abbrevCommit</code> option which always abreviate commit numbers in any git output.  </p><pre><code>git config --global log.abbrevCommit true</code></pre><p>If you are using the <code>--oneline</code> option on git log, then the commit number is abreviated regardless of this setting.</p><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Have fun configuring your git log as if you use git on the command line you will be working with the log quite often.  However, dont spend all your time tweaking the format of the log, you still need to write some code for your apps :)</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://git-scm.com/images/logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Git log is a very powerful tool for tracking all your changes, even across different branches and multiple repositories.  However &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;git log&lt;/span&gt; default output is verbose and not a great way to visualise the commit history.&lt;/p&gt;
&lt;p&gt;Fortunately Git is very customisable, both for humans and tools.  This article covers one way to creating your own customised output for git log that helps you work with branches and track changes through local and remote (eg. Github) repositories.&lt;/p&gt;
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hacking for Good at the Accessibility Hackathon</title>
    <link href="http://jr0cket.co.uk/2013/06/hacking-for-good-at-accessibility.html.html"/>
    <id>http://jr0cket.co.uk/2013/06/hacking-for-good-at-accessibility.html.html</id>
    <published>2013-06-10T15:32:00.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-wGEV9bfpLx4/UcVjxp_edtI/AAAAAAAAJxc/EmQZVqvM2Eg/s1600/accessibility_collage_2.jpg" class="img-thumbnail"> <p>Its not often you get a chance to make a difference the way people live their lives.  As my role of judge at the recent Accessibility hackathon by Barclays I met lots of teams spending their weekend doing just that.</p><p>The hackathon started with an amazing set of stories from the charities involved.  These stories gave the teams a great insight into the challenges people in these communities faced.  The presence of the the accessibility community through the hackathon helped teams stay focused and create relevant apps that would make a significant difference.</p><h1 id="The-Charities"><a href="#The-Charities" class="headerlink" title="The Charities"></a>The Charities</h1><img src="http://2.bp.blogspot.com/-N_FfhpLYUOg/UcVpkH-nddI/AAAAAAAAJyA/tDGOs5J3-Vs/s1600/accessibility-hack-charities-banner.png" class="img-code"> <h1 id="Judging-the-Hackathon"><a href="#Judging-the-Hackathon" class="headerlink" title="Judging the Hackathon"></a>Judging the Hackathon</h1><img src="http://3.bp.blogspot.com/-ep3jXQK20sQ/UcVwLHOAwRI/AAAAAAAAJyQ/Gd0WHl0Bseg/s1600/mm-judging.jpg" class="img-topic"> <p>With all the great ideas generated by the teams taking part, it made the judging quite tough.  Although not as tough as hacking an app together in less that one weekend :)</p><p>At the end of the hackathon, each team had 3 minutes to present there app, which is really no time at all.  However, as a judge I had been going round the teams over the weekend to get to know them and find out what they were doing.  This also gave me insight into how they had progress over the weekend.  One of the things we were looking for was if the team could carry on developing there apps afterwards, so their capability and cohesiveness played a factor in our final decision.</p><p>It was vital to have members of the accessibility community on the <a href="http://accessibilityhack.com/#judges" target="_blank" rel="noopener">judging panel</a> to be able to judge the impact of each app presented.  There were several judges who had physical challenges who related closely to the value of each teams app.</p><h1 id="Accessibility-Apps-that-made-a-difference"><a href="#Accessibility-Apps-that-made-a-difference" class="headerlink" title="Accessibility Apps that made a difference"></a>Accessibility Apps that made a difference</h1><p>With 19 teams to choose from, the judges had a challenge on their hands to come up with 3 winners.  At one point we asked if there could be a couple more prizes.  The apps that really stood out for me though were:</p><ul><li><strong>Soundbyte</strong> - filtering out noise for different types of hearing loss </li><li><strong>Visual-eyes</strong> - creating a very detailed and highly accurate description of the scene in a pictue  (fantastic concept)</li><li><strong>Gesture Touch</strong> - controlling HTML5 apps and games simply</li><li><strong>Elephants, ears for everyone</strong> -  transcripting conversations in real time</li><li><strong>Real assistance</strong> - guiding peoples journeys and assisting the last meters</li><li><strong>Say what you mean</strong> - navigate the web by voice</li><li><strong>MemoryBox</strong> - helping those suffering dementia to recall memories easily</li></ul><h1 id="Accessibility-Apps-in-detail"><a href="#Accessibility-Apps-in-detail" class="headerlink" title="Accessibility Apps in detail"></a>Accessibility Apps in detail</h1><p>What follows is a summary of what I thought of some of the apps presents.</p><h2 id="Soundbyte"><a href="#Soundbyte" class="headerlink" title="Soundbyte"></a>Soundbyte</h2><p>I really liked the concept this team opened wiht “We have all experienced sound loss”, it helped make the project very relevant.  Also the way the team got everyone to stand up and clap to simulate the experience was very striking.</p><p>The project itself was great.  Having a smart phone as a hearing aid takes away some of the stigma around the hearing impaired. Although phones can cancel out background noise in phone calls, this Android application can eat the sounds that you don’t need.  As the app cancels out the background noise in near real time, you can then listen to only that which is valuable, based on filters defined for different types of hearing loss.  The team had already created a number of options to help you find out the best sounds based on a persons hearing ability and situation.</p><p>This was a very striking project and is high on the list as it also has implications for a wider audience, not just those with hearing loss.  As the app was available on the Android Play store in about an hour after they presented, the project seemed very sustainable.</p><h2 id="Visual-eyes"><a href="#Visual-eyes" class="headerlink" title="Visual-eyes"></a>Visual-eyes</h2><p>This team only came together at the hackathon and found a vision inspired from talks given by the charities.  There vision was simple and very relevant to the theme of the hackathon.  Photos are everywhere and people love to share them with family and friends.  However, its not possible to share photos in an easy way with those who are visually impaired  </p><p>Their app, Visual Eyes, returns a meningful description of any picture provided.  I liked that the team used random images from Facebook as they are representative of the images people share.  As the images were random, then you saw how credible the software was at describing the images.  I was very struck how detailed the descriptions could be, including if people were wearing sunglasses!</p><p>This app was very impressive and therefore high on my list due to the detail of description of each picture.  The team had already integrated it their app with Facebook and there were many other integration possibilities.  I was very confident this team would carry on developing their app.</p><p>The team were looking to open source the whole processing so that costs from 3rd party services are taken out of the process.  The team are also considering the use of tags to help make the description even more relevant.</p><h2 id="Real-Assistance"><a href="#Real-Assistance" class="headerlink" title="Real Assistance"></a>Real Assistance</h2><p>This app stood out immediately.  The ability to record your favourite journeys and play them back to help you find your way seemed like a real win for those with vision issues. It would give those people a lot more confidence when they are navigate to their favourite places.</p><p>This app could also be useful for a wider audience, for example to help navigate to a place in a new location or a foreign country. </p><p>This app really stood out when the final part of the app was shown, the assisted guidance for the last few meters. To be able to call someone who can direct you using the camera on your mobile device and be guided in real time was a great idea.  It can be a challenge finding entrances and then navigating steps and doors, so this is a great way to deal with that issue too.</p><p>The app uses existing phone technologies and WebRTC so the team seemed to have a fully working app come time for the demo.</p><p>The team had an eye on future features, such as pre-program points of interest (Banks, restaurants).  This demonstrated that they are willing to take this app further.</p><h2 id="Gesture-Touch"><a href="#Gesture-Touch" class="headerlink" title="Gesture Touch"></a>Gesture Touch</h2><p>The team created a way of helping those with physical challenges to interact with HTML5 based apps, especially games.  The team created different modes and controls to help users find the best way of interacting.</p><p>I liked that the team had simulated using their app using a device that restricted movements in the hand and what they produced looked quite effective.</p><p>This team also had future plans for their apps, including integrating voice recognition, so it seems that they will carry on with their development efforts.</p><h2 id="Elephants-ears-for-everyone"><a href="#Elephants-ears-for-everyone" class="headerlink" title="Elephants - ears for everyone"></a>Elephants - ears for everyone</h2><p>The team develop a real time transcription of conversations taking place, aimed at those with hearing disabilities.  They had tried to get hold of some Google Class equipment so that they could have had real time sub-titles when talking to other people.</p><p>The team instead created a simple and clean mobile app, allowing you to open up a “channel” in which two or more people could talk and the text of their conversation would be displayed in a similar form to modern text apps.</p><p>The team did a great demo, although there was some doubt about how effective this would be if there was background noise.  The team seemed keen to keep on with the development if they got positive feedback, so if they can also include filtering of the background noise I believe they have a valuable app.</p><h2 id="Say-what-you-mean"><a href="#Say-what-you-mean" class="headerlink" title="Say what you mean"></a>Say what you mean</h2><p>I appreciated that the team invested time in the experience of being blind and accessing the web.  That they discussed ideas with the people from RNIB helped them identify a real need, that the key desire people had was to go faster.  Screen readers linearised the experiences when people acutally wanted a content driven experiences</p><p>The app had a very simple user interface, press a key and say a word.  You are then sent to a link that matches that word.  This is acceptable for websites your are familiar with.</p><p>For other sites you don’t know well, then its used like a search that returns the links at the start of the page so you don’t have to go hunting for them.</p><p>As their app works as a browser extension, then it works for all web sites without specific configuration.</p><p>It was great that the team have considered future functionality, like related terms and filtering search criteria.  I can see this app being quite useful to many.</p><h1 id="Teams-that-had-a-great-idea-but-had-not-gone-far-enough-with-the-development"><a href="#Teams-that-had-a-great-idea-but-had-not-gone-far-enough-with-the-development" class="headerlink" title="Teams that had a great idea but had not gone far enough with the development"></a>Teams that had a great idea but had not gone far enough with the development</h1><h2 id="Food-for-though"><a href="#Food-for-though" class="headerlink" title="Food for though"></a>Food for though</h2><p>The team had a great presentation and I really appreciated the use of using Alice as a persona to help us understand who the audience was the were trying to reach.</p><p>The concern they were talking was memmory loss which affects a great number of people.  Without a good memory your experiences from a human perspective is about having your independence.</p><p>The team continued to tell the story around the persona.  Alice does not always eat properly, because she forgets if she hasnt eaten.  The app the team developed reminds Alice of key meals, helps her select from different meals and talks her through the making of the meal she has selected.  The meals can be put together by family members, doctors or nutritionist, to give more diversity to Alice’s diet.</p><p>Although this was a great concept, I felt that the team had not developed the application far enough in the time they had.  There were unanswered questions and I hope that the team are able to get more of the app developed.</p><h2 id="MemoryBox"><a href="#MemoryBox" class="headerlink" title="MemoryBox"></a>MemoryBox</h2><p>The team chose a really powerful sounding topic, remenicance therapy.  This was a great technique for helping family and friends to engage with those with dementia   By creating a wide range of media to form a collection that would trigger memories about events and people, it would help those with the condition feel more positive and help them relive experiences.</p><p>The challenge was to create something that would easily create this experience and be significant improvement on the basic photo collections you can do with many online services.  The app would need to help the supporting family members create these collections easily and relate them to specific memory categories.  An app would also need to help the family members by relating images to each other automatically, I guess in the same way that Amazon relates other products.</p><h2 id="Leap-Motion-accessibility-device"><a href="#Leap-Motion-accessibility-device" class="headerlink" title="Leap Motion accessibility device"></a>Leap Motion accessibility device</h2><p>The sole developer on this personally driven project - his grandmother has difficulties with her hands and finds interaction with computing devices almost impossible.  However, she has a very active mind and the developer wanted a way to help her engage with the Internet which most of us take for granted.</p><p>The <a href="http://bit.ly/a11yhack" target="_blank" rel="noopener">project</a> was quite simple, more like a proof of concept as no real substantial application was created.  The developer used an open source project and a Chrome extension to support the leap motion device.  Whilst this is a great device, I was looking for something specific to be built from this concept. </p><p>Although this was a enthusiastic developer that may create some good ideas, he didnt really create much of an app to realise this concept.</p><h2 id="Library-accessibility"><a href="#Library-accessibility" class="headerlink" title="Library accessibility"></a>Library accessibility</h2><p>I liked the idea of improve accessibility of other apps by identifying libraries that apps that are used, then sending in patches to make them have accessibility features.  This was a great effort by one developer, although if its only one developer I was not sure on the impact.  This wasnt an app that made it easier for people to improve libraries or even encourage other developers to get involved.</p><p>Its a very worthwhile effort on this sole developers behalf.  I would have like to have seen something that would help lots of other developers do the same thing.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;http://2.bp.blogspot.com/-wGEV9bfpLx4/UcVjxp_edtI/AAAAAAAAJxc/EmQZVqvM2Eg/s1600/accessibility_collage_2.jpg&quot; class=&quot;img-thumbnail&quot;
      
    
    </summary>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
    
      <category term="hackathon" scheme="http://jr0cket.co.uk/tags/hackathon/"/>
    
  </entry>
  
  <entry>
    <title>Starting Nodejs Development on Ubuntu</title>
    <link href="http://jr0cket.co.uk/2013/03/starting-nodejs-development-on-ubuntu.html.html"/>
    <id>http://jr0cket.co.uk/2013/03/starting-nodejs-development-on-ubuntu.html.html</id>
    <published>2013-03-25T14:37:00.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-bIFaJwok1vI/UVA3jCluB-I/AAAAAAAAJM0/-rtRbVUQ4no/s1600/Nodejs_logo_light.png" class="img-thumbnail"> <p><strong>Outdated: please disregard this article as it is out of date.  I install node in my local filespace on Ubuntu now as its so much easier to manage.  Basicaly I download the Linux binaries and put them in ~/apps/nodejs/current, then add ~/apps/nodejs/current/bin to my path using my shell profile (~/.profile).  This makes using npm -g really easy and does not require the sudo command.</strong></p><p><a href="http://nodejs.org/" target="_blank" rel="noopener">nodejs</a> is a very popular framework for JavaScript development, but as I found out at the <a href="http://www.meetup.com/London-MongoDB-User-Group/events/106898042/" target="_blank" rel="noopener">MongoDB hackathon</a>  its not that straight forward to get going.  So here is a quick guide to get going with Node.js on <a href="http://www.ubuntu.com" target="_blank" rel="noopener">Ubuntu</a>.</p><a id="more"></a><h2 id="Installing-nodejs-on-Ubuntu"><a href="#Installing-nodejs-on-Ubuntu" class="headerlink" title="Installing nodejs on Ubuntu"></a>Installing nodejs on Ubuntu</h2><p>Whilst there is a nodejs package in Ubuntu, it is version 0.6.9 and therefore quite a way behind the current version on the nodejs website.  So lets do a manual install with the latest version, 0.10.1.</p><blockquote><p>I since found an <a href="http://slopjong.de/2012/10/31/how-to-install-the-latest-nodejs-in-ubuntu/" target="_blank" rel="noopener">alternative approach using ppa’s</a> but haven’t tried it out.</p></blockquote><img src="http://4.bp.blogspot.com/-WY7IRkhNpOU/UVA0m8Ly9cI/AAAAAAAAJMk/Sb1d7i8Mocs/s1600/nodejs-homepage-install.png" class="img-code"><p>Download the install archive file and extract it.  I chose to do this in a folder called apps in my home folder.  Alternatively you could install it in <code>/opt/</code> or <code>/usr/local</code></p><pre><code>mkdir ~/apps/nodejstar zvxf node-v0.10.1.tar.gz</code></pre><h2 id="Compile-nodejs"><a href="#Compile-nodejs" class="headerlink" title="Compile nodejs"></a>Compile nodejs</h2><p>As we are doing a manual install, we need to build nodejs to get the actual executable files.  This requires a C compiler on your laptop which is not installed by default.  So either use the Ubuntu software center to install the package <code>g++</code> or use the command line</p><pre><code>sudo apt-get install g++</code></pre><p>To compile nodejs, first we run configuration to check all the neccessary external libraries are there and then we make node:</p><pre><code>./configuremake</code></pre><h2 id="Adding-node-to-your-command-path"><a href="#Adding-node-to-your-command-path" class="headerlink" title="Adding node to your command path"></a>Adding node to your command path</h2><p>Add the following to your environment in your <code>~/.bashrc</code> file (or <code>.zshrc</code> file if you are running zshell).  I moved the node executable file created by the compile process into a folder called bin, so I knew which was the right file to run.  Then I added that folder to the path.</p><pre><code>export NODEJS_HOME=/home/jr0cket/apps/nodejs/binexport PATH=$PATH:$NODEJS_HOME</code></pre><p>I am using an environment variable called NODEJS_HOME as a convienience.  You can just add the whole path in one line.</p><h2 id="Installing-NPM-the-node-package-manager"><a href="#Installing-NPM-the-node-package-manager" class="headerlink" title="Installing NPM - the node package manager"></a>Installing NPM - the node package manager</h2><img src="http://3.bp.blogspot.com/-JJakqhflSfw/UVA4AMjSKAI/AAAAAAAAJM8/BbLzQXPlQbw/s1600/npm-logo.png" class="img-thumbnail"> <p>The node package manager is a great way to get additional libraries into  your node projects.  It does not come with node itself, so you have to install it seperately.  Npm also needs node installed first.</p><p>On the node package manager website, the install process is defined as the following command:</p><pre><code>curl https://npmjs.org/install.sh | sh</code></pre><p>In my manual install (not using Ubuntu packages) then node and npm are created in different folders.  So I put the npm executable file in the same bin folder I created previously for node, which I had already added that to the executable path.</p><p>Once npm is installed you can search for and install packages.  If you the <code>-g</code> option for npm install then the modules will be installed globally, otherwise any modules will be local to your project in an npm-modules folder.</p><p>Search for modules:</p><pre><code>npm search mongodb native</code></pre><p>Install modules locally or globally:</p><pre><code>npm install mongodbnpm install -g mongodb</code></pre><h2 id="Testing-out-node-locally"><a href="#Testing-out-node-locally" class="headerlink" title="Testing out node locally"></a>Testing out node locally</h2><p>You can run an interactive session for nodejs (the node REPL) using the command:</p><pre><code>node</code></pre><p>Then you can just enter JavaScript code and it is evaluated immediately.  You can also run code in files by using the command:</p><pre><code>node filename.js</code></pre><p>So lets create a simple “Hello World” app for nodejs in a file called web.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express.createServer(express.logger());</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> port = process.env.PORT || <span class="number">5000</span>;</span><br><span class="line">app.listen(port, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Listening on "</span> + port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Running this with <code>node web.js</code> we get “Hello World” as the output.</p><h2 id="Testing-out-node-on-Heroku"><a href="#Testing-out-node-on-Heroku" class="headerlink" title="Testing out node on Heroku"></a>Testing out node on Heroku</h2><p>nodejs is one of the languages supported on Heroku (a cloud service that gives developers a sane way to deploy and scale their apps).  Deploying this nodejs app on Heroku is therefore really trivial.</p><p>Heroku can usually work out what to do with many projects, based on the language and framework used.  However, just to be specific lets create a <code>Procfile</code> to tell node which is our entry point to our application.  In  this case we want node to start with the file <code>web.js</code></p><pre><code>web: node web.js</code></pre><p>Lets version the project with git</p><pre><code>git initgit add .git commit -m &quot;Initial project setup&quot;</code></pre><p>Then we can create an app on Heroku that we can deploy too - you will need an <a href="http://www.heroku.com" target="_blank" rel="noopener">Heroku account</a> and download the <a href="http://toolbelt.heroku.com" target="_blank" rel="noopener">Heroku toolbelt</a>.</p><pre><code>heroku create</code></pre><p>Heroku adds a new remote to our git project called heroku, so we can push our code to our app.</p><p>Now that our project is ready to deploy, lets push all the code to the  heroku application you created using git push, specifying the branch you are pushing (usually <code>master</code>)</p><pre><code>git push heroku master</code></pre><p>Now open the node website in a browser using the URL given after the upload of your code via git push, or just the command</p><pre><code>heroku open</code></pre><img src="http://1.bp.blogspot.com/-m6l3bhlBB-Q/UVAoqU5PTeI/AAAAAAAAJMU/7OwfgCtBlTY/s1600/nodejs-website-helloworld.png" class="img-code"><p>There is a nice <a href="https://devcenter.heroku.com/articles/nodejs" target="_blank" rel="noopener">article about nodejs on heroku</a> with examples of wiring node up to various data sources too.</p><h2 id="Learning-JavaScript-nodejs"><a href="#Learning-JavaScript-nodejs" class="headerlink" title="Learning JavaScript nodejs"></a>Learning JavaScript nodejs</h2><p>Now for the fun part, learning how to program in nodejs and seeing how much JavaScript I can remember.  Here are some resource I found in the few hours I spent trying to learn about nodejs.</p><p>David Crockford has lots of great resources to help you write great JavaScript: </p><ul><li><a href="http://javascript.crockford.com/" target="_blank" rel="noopener">JavaScript website</a></li><li><a href="http://www.youtube.com/results?search_query=crockford+on+javascript" target="_blank" rel="noopener">YouTube videos</a> </li><li><a href="http://yuiblog.com/crockford/" target="_blank" rel="noopener">Crockford on Javascript video series</a></li><li><a href="http://nodejs.org/" target="_blank" rel="noopener">NodeJS</a></li><li><a href="https://npmjs.org/" target="_blank" rel="noopener">Node Package Manager</a></li><li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/node-js-for-beginners/" target="_blank" rel="noopener">Nodejs for beginners</a></li><li><a href="http://howtonode.org/" target="_blank" rel="noopener">HowToNode</a> - community supported blog to teach fundamental concepts for writing effective code along with various other tips.</li><li><a href="http://requirejs.org/" target="_blank" rel="noopener">RequireJS</a> - optimising file and module loader for JavaScript, can combine all your code into one file for faster loading</li><li><a href="https://github.com/dannycoates/node-inspector" target="_blank" rel="noopener">Node-inspector</a> - Web Inspector based nodeJS debugger</li><li><a href="http://docs.nodejitsu.com/" target="_blank" rel="noopener">Nodejitsu</a> - a growing collection of node.js how-to articles from the community, range from basic to advanced.</li><li><a href="http://superherojs.com/" target="_blank" rel="noopener">Superhero.js</a> - a collection of articles, presentations and videos </li><li><a href="https://groups.google.com/forum/?fromgroups=#!forum/nodejs" target="_blank" rel="noopener">Nodejs google group</a>** </li><li><a href="http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js" target="_blank" rel="noopener">Suggestions of learning materials on Stack Exchange</a></li></ul><h3 id="Some-semi-related-links"><a href="#Some-semi-related-links" class="headerlink" title="Some semi-related links"></a>Some semi-related links</h3><ul><li><a href="http://blog.deadpansincerity.com/2011/05/setting-up-emacs-as-a-javascript-editing-environment-for-fun-and-profit/" target="_blank" rel="noopener">Setting up emacs as a javascript editing environment</a></li><li><a href="http://playground.webflow.com/" target="_blank" rel="noopener">Webflow CSS3 playground</a></li></ul><p>Good luck with your JavaScript and node projects.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://4.bp.blogspot.com/-bIFaJwok1vI/UVA3jCluB-I/AAAAAAAAJM0/-rtRbVUQ4no/s1600/Nodejs_logo_light.png&quot; class=&quot;img-thumbnail&quot;&gt; 
&lt;p&gt;&lt;strong&gt;Outdated: please disregard this article as it is out of date.  I install node in my local filespace on Ubuntu now as its so much easier to manage.  Basicaly I download the Linux binaries and put them in ~/apps/nodejs/current, then add ~/apps/nodejs/current/bin to my path using my shell profile (~/.profile).  This makes using npm -g really easy and does not require the sudo command.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nodejs&lt;/a&gt; is a very popular framework for JavaScript development, but as I found out at the &lt;a href=&quot;http://www.meetup.com/London-MongoDB-User-Group/events/106898042/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MongoDB hackathon&lt;/a&gt;  its not that straight forward to get going.  So here is a quick guide to get going with Node.js on &lt;a href=&quot;http://www.ubuntu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ubuntu&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="nodejs" scheme="http://jr0cket.co.uk/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://jr0cket.co.uk/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Flying Planes With Clojure and FlightGear</title>
    <link href="http://jr0cket.co.uk/2013/03/flying-planes-with-clojure-and.html.html"/>
    <id>http://jr0cket.co.uk/2013/03/flying-planes-with-clojure-and.html.html</id>
    <published>2013-03-21T21:33:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<p>Dale Thatcher from the <a href="http://londonclojurians.org/" target="_blank" rel="noopener">London Clojure community</a> created a <a href="https://github.com/dalethatcher/flightgear" target="_blank" rel="noopener">Clojure project</a> that allows you to fly a plane in real time.  Now, Dale has not yet connected this to a real plane, instead he is using the open source flight simulator, <a href="http://www.flightgear.org/" target="_blank" rel="noopener">FlightGear</a>.</p><p>I took Dale’s project for a test flight and here are my experiences!</p><a id="more"></a><h1 id="Getting-set-up"><a href="#Getting-set-up" class="headerlink" title="Getting set up"></a>Getting set up</h1><p>I am using Ubuntu 12.10 and FlightGear is in the software center, so its easy to add it.  Be aware that the file is 635MB in size (1.3GB once installed), so you need a decent Internet connection and a fair bit of space.</p><p>You can of course use <code>apt-get</code> on the command line too:</p><pre><code>sudo apt-get install flightgear</code></pre><img src="http://3.bp.blogspot.com/-xbgiADIrEtI/UUtjzKwkFwI/AAAAAAAAJLk/3CWfbfuBtRQ/s1600/flight-gear-ubuntu-software-center.png" class="img-code"><h1 id="Running-FlightGear"><a href="#Running-FlightGear" class="headerlink" title="Running FlightGear"></a>Running FlightGear</h1><img src="http://1.bp.blogspot.com/-9ILGm7ZzlQg/UUtrWInCpRI/AAAAAAAAJL0/AAnahKbG9jg/s1600/flight-gear-telnet-port.png" class="img-topic"><p>Whilst there are GUI tools to run FlightGear, I just went for the command line.  Following Dale’s guide, I ran the emulator with a specific Telnet port.  I am assuming this is what the library uses to communicate with.</p><p>Now you should see a plane cockpit, ready and waiting for you to jump into the controls.</p><img src="http://4.bp.blogspot.com/-7N9oGY9vJxw/UUtscbmeA7I/AAAAAAAAJL8/cwUFirHQW4A/s1600/flight-gear-cockpit.png" class="img-code"><h1 id="Setting-up-the-Clojure-project"><a href="#Setting-up-the-Clojure-project" class="headerlink" title="Setting up the Clojure project"></a>Setting up the Clojure project</h1><p>I created a basic Clojure project using Leingen, of course.</p><pre><code>lein new my-flight</code></pre><p>Editing the <code>my-flight/project.clj</code> project file, I added a dependency on Dale’s flightgear project</p><figure class="highlight clojure"><figcaption><span>project.clj</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">:dependencies</span> [[org.clojars.dalethatcher/flightgear <span class="string">"0.1.0-SNAPSHOT"</span>]]</span><br></pre></td></tr></table></figure><p>The project file should look like this: </p><img src="http://3.bp.blogspot.com/-M1XTODPYNx0/UUts21J6I7I/AAAAAAAAJME/Pp81KaVtJMM/s1600/my-flight-project.clj.png" class="img-code"> <blockquote><p>You may have a newer version of Clojure than in the above example.</p></blockquote><p>I could write a few Clojure functions to control the airplane, but I dont know how responsive it will be.  So instead I fired up the REPL, connected to the flight simulator over the telnet port and started issuing command.</p><p>Much more fun and much faster feedback.</p><figure class="highlight clojure"><figcaption><span>Clojure REPL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">use</span></span> 'flightgear.api)</span><br><span class="line">(<span class="name">connect</span> <span class="string">"localhost"</span> <span class="number">5401</span>)</span><br><span class="line">(<span class="name">starter!</span> <span class="literal">true</span>) <span class="comment">; wait until engine started</span></span><br><span class="line">(<span class="name">starter!</span> <span class="literal">false</span>)</span><br><span class="line">(<span class="name">flaps!</span> <span class="number">0.5</span>)</span><br><span class="line">(<span class="name">throttle!</span> <span class="number">1</span>)  <span class="comment">; wait for a little while and you should be airbourne</span></span><br><span class="line">(<span class="name">rudder!</span> <span class="number">0.1</span>) <span class="comment">; steer a bit to the right (single props tend to veer to one side)</span></span><br></pre></td></tr></table></figure><p>It works.  I am controlling the plane and am trundling off down the runway.</p><p>I am assuming this control interface mimics what you have to do in the simulator, as otherwise I’d have prefered the starter motor to turn itself off.  I know very little about flying planes.</p><h1 id="Learning-to-fly"><a href="#Learning-to-fly" class="headerlink" title="Learning to fly"></a>Learning to fly</h1><p>All this has been fairly easy so far.  Well easy compared to actually being able to fly the plane without crashing after 30 seconds.</p><p>Using the Clojure REPL I can issue commands to tweak the flight of the plane, adusting thrust, flaps, etc.  As its a single propeller plane, it tends to vere about a bit, so needs constant input to keep it flying. </p><p>I think the best chance of flying this plane is to write a Clojure program to do it for me.  Luckily, Dale’s project included Telemetry information such as position, velocity and orientation.</p><p>Its going to be great fun learning to fly and I havent even looked at the game options such as weather (I may turn all that off at first!).</p><p>The FlightGear game and Dale’s Clojure project should give me hours of fun (assuming I can find the time).</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dale Thatcher from the &lt;a href=&quot;http://londonclojurians.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;London Clojure community&lt;/a&gt; created a &lt;a href=&quot;https://github.com/dalethatcher/flightgear&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Clojure project&lt;/a&gt; that allows you to fly a plane in real time.  Now, Dale has not yet connected this to a real plane, instead he is using the open source flight simulator, &lt;a href=&quot;http://www.flightgear.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FlightGear&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I took Dale’s project for a test flight and here are my experiences!&lt;/p&gt;
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/categories/clojure/"/>
    
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="events" scheme="http://jr0cket.co.uk/tags/events/"/>
    
      <category term="coding" scheme="http://jr0cket.co.uk/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Lenovo X1 Carbon - Unboxing Video</title>
    <link href="http://jr0cket.co.uk/2013/03/lenovo-x1-carbon-unboxing-video.html.html"/>
    <id>http://jr0cket.co.uk/2013/03/lenovo-x1-carbon-unboxing-video.html.html</id>
    <published>2013-03-17T13:22:00.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<p>I have not found any Ubuntu related video’s for the Lenovo X1 Carbon, but here is an unboxing video that gives you some idea of how slim this laptop actually is.</p><div class="video-container"><iframe src="//www.youtube.com/embed/KRLsanDdzGE" frameborder="0" allowfullscreen></iframe></div> <p>Thank you.<br><a href="https://www.twitter.com/jr0cket" target="_blank" rel="noopener">@JR0cket</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have not found any Ubuntu related video’s for the Lenovo X1 Carbon, but here is an unboxing video that gives you some idea of how slim 
      
    
    </summary>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/categories/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="lenovo" scheme="http://jr0cket.co.uk/tags/lenovo/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu on Lenovo X1 Carbon - Tweaking the Desktop</title>
    <link href="http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-tweaking-the-desktop.html"/>
    <id>http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-tweaking-the-desktop.html</id>
    <published>2013-03-16T14:42:00.000Z</published>
    <updated>2022-01-02T20:20:15.310Z</updated>
    
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-pfixqqRGL5c/UUOcTFUeF4I/AAAAAAAAJLE/6sPtWcG4gEs/s1600/ubuntu-tweak-home-page.png" class="img-thumbnail"><p>There are a few little tweaks that I find make using <a href="Ubuntu">http://www.ubuntu.com</a> desktop just that little bit nicer.  The easiest way I have found to make these changes is using <a href="http://ubuntu-tweak.com/" target="_blank" rel="noopener">Ubuntu Tweak</a>.</p><a id="more"></a><h2 id="Installing-Ubuntu-Tweak"><a href="#Installing-Ubuntu-Tweak" class="headerlink" title="Installing Ubuntu Tweak"></a>Installing Ubuntu Tweak</h2><p>The easiest way is to go to the Ubuntu Tweak website and click on the Download Now button.  This asks you to save a .deb file.  Double clicking on this .deb file opens the Ubuntu software center and lets you install the software and any depenencies.</p><h2 id="Natural-Scrolling-like-the-new-Mac-OSX"><a href="#Natural-Scrolling-like-the-new-Mac-OSX" class="headerlink" title="Natural Scrolling (like the new Mac OSX)"></a>Natural Scrolling (like the new Mac OSX)</h2><p>Having used a MacBook Pro for work for the last 6 months I got used to the <em>reversed</em> way of scrolling, introduced to make desktops scroll like tablets.  After a few weeks I grew to like this “reversed” scrolling so wanted it for the new laptop.</p><p>In the next version of Ubuntu, 13.04, this reversed scrolling is called Natural Scrolling.  For Ubuntu 12.04 it can be switched on using Ubuntu Tweak in the section <strong>Tweaks &gt; Accessories</strong></p><img src="http://3.bp.blogspot.com/-tXORsbuAXR8/UUOf11ZFPtI/AAAAAAAAJLM/qYLjs_kvQMw/s1600/ubuntu-tweak-natural-scrolling.png"><h2 id="Virtual-Desktops"><a href="#Virtual-Desktops" class="headerlink" title="Virtual Desktops"></a>Virtual Desktops</h2><p>I usually like to have one application running per desktop and often have quite a few apps running at any one time.  Whilst Ubuntu has 4 virtual desktops by default, I prefer to go one level bigger and have 9.  Again this is easily done with Ubuntu Tweak in section <strong>Tweaks &gt; Workspaces</strong>.</p><img src="http://1.bp.blogspot.com/-BHqEWKbB6y4/UUOjQWG7ckI/AAAAAAAAJLU/AHQ-FE5ftsE/s1600/ubuntu-tweak-nine-workspaces.png"><p>With nine virtual desktops I can now get going with some coding, once I have set up my development environments.  That will be in the next post.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://1.bp.blogspot.com/-pfixqqRGL5c/UUOcTFUeF4I/AAAAAAAAJLE/6sPtWcG4gEs/s1600/ubuntu-tweak-home-page.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;There are a few little tweaks that I find make using &lt;a href=&quot;Ubuntu&quot;&gt;http://www.ubuntu.com&lt;/a&gt; desktop just that little bit nicer.  The easiest way I have found to make these changes is using &lt;a href=&quot;http://ubuntu-tweak.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ubuntu Tweak&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/categories/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="lenovo" scheme="http://jr0cket.co.uk/tags/lenovo/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu on Lenovo X1 Carbon - Let There Be Light and Sound</title>
    <link href="http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-let-there-be-light-and-sound.html"/>
    <id>http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-let-there-be-light-and-sound.html</id>
    <published>2013-03-16T09:00:00.000Z</published>
    <updated>2022-01-02T20:20:15.310Z</updated>
    
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJJ8/oNaVgTQmlWA/s1600/lenovo-carbon1.jpg" class="img-thumbnail"><p>So I bought the Lenovo X1 Carbon for development and an important part of that is having some good tunes to listen too.  As I also travel a lot, its also useful to have a good display for movies and screen-casts.</p><p>Well, the X1 Carbon give great results in both sound and vision.</p><a id="more"></a><h2 id="Testing-the-speakers"><a href="#Testing-the-speakers" class="headerlink" title="Testing the speakers"></a>Testing the speakers</h2><img src="http://1.bp.blogspot.com/-HBV4FJ9nfD8/UUN6M0NG16I/AAAAAAAAJKs/N83SXlOiA14/s1600/Rhythmbox-Is-the-Default-Player-for-Ubuntu-12-04.jpg" class="img-code"><p>Ubuntu comes with Rythmbox music player and manager installed by default, so all it took to test the sound was to copy over some mp3 and flac audio files. </p><blockquote><p>When installing Ubuntu, I selected the option to install the software needed to play proprietary music formats like mp3</p></blockquote><p>The sound came through brilliantly through stereo speakers located near the front of each side of the laptop.  There are two thin slits that let produce great sound without letting any dirt in.</p><p>As noted in <a href="http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-first.html">my first post on the X1 Carbon</a>, the volume controls work just fine in Ubuntu (although the mic mute button does not work).</p><h2 id="Testing-video-playback"><a href="#Testing-video-playback" class="headerlink" title="Testing video playback"></a>Testing video playback</h2><p>To test the playback I fired up YouTube and played some HD def music videos.  I have been enjoying Lindsey Sterling the last few months, so I fired up a few of her videos.  There is a great one where she is in a man made giant ice structure.</p><div class="video-container"><iframe src="//www.youtube.com/embed/aHjpOzsQ9YI" frameborder="0" allowfullscreen></iframe></div><p>The video playback is just as great as the sound and not sign of jumping even with High Definition video.</p><img src="http://3.bp.blogspot.com/-lQv0hasSvy8/UUN81JyKaWI/AAAAAAAAJK0/n_SMXLPXX9E/s1600/Lindsey-Sterling-Crystalise-video-dark-sky.png" class="img-code"> <p>A screen grab of Lindsey Sterling, Crystallize from her <a href="http://www.youtube.com/user/lindseystomp" target="_blank" rel="noopener">YouTube channel</a>.  The screen-shot doesn’t really do the actual video playback justice.  Even on farily low brightness, the display really shows off the quality of the screen.</p><p>With a matt screen in widescreen format and IPS giving lots of brightness, the Lenovo X1 Carbon will be a a great portal movie player on long trips.</p><p>Finally I tested my <a href="http://www.amazon.co.uk/Logitech-981-000177-Gaming-Headset-G330/dp/B002KKM5GA/" target="_blank" rel="noopener">Logitech gaming headset</a> and Ubuntu detected them correctly and they show up in the Sound settings.</p><p>More adventures with Ubuntu on Lenovo in future posts.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJJ8/oNaVgTQmlWA/s1600/lenovo-carbon1.jpg&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;So I bought the Lenovo X1 Carbon for development and an important part of that is having some good tunes to listen too.  As I also travel a lot, its also useful to have a good display for movies and screen-casts.&lt;/p&gt;
&lt;p&gt;Well, the X1 Carbon give great results in both sound and vision.&lt;/p&gt;
    
    </summary>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/categories/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="lenovo" scheme="http://jr0cket.co.uk/tags/lenovo/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu on Lenovo X1 Carbon - Tweaking the Bios and Added Security</title>
    <link href="http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-tweaking-bios-and-security.html"/>
    <id>http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-tweaking-bios-and-security.html</id>
    <published>2013-03-15T18:00:00.000Z</published>
    <updated>2022-01-02T20:20:15.310Z</updated>
    
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJKA/-3aHKq5wJwc/s1600/lenovo-carbon1.jpg" class="img-thumbnail"> <p>I have a lovely new Lenovo X1 Carbon and to make it even better I am installing <a href="http://www.ubuntu.com" target="_blank" rel="noopener">Ubuntu</a>.  The installation should be a breeze as Lenovo laptops are usually well supported, the only thing I configured was in the BIOS.  I wanted to check the boot order and see what the boot menu key was so I could install Ubuntu from a USB memory stick (boot menu key is F12).</p><a id="more"></a><p>Pressing the little “Thinkpad” button next to the volume controls whist the laptop is first booting gives you an option to go into the bios. </p><h2 id="Secure-Boot-and-the-boot-order"><a href="#Secure-Boot-and-the-boot-order" class="headerlink" title="Secure Boot and the boot order"></a>Secure Boot and the boot order</h2><p>Once the BIOS control panel had loaded up, In the overview section I noticed that Secure Boot was enabled.  So I looked through all the sections and found an option to turn it off.  I also changed the boot order so that USB memory sticks can be used to boot from.  Saving the changes rebooted the machine and I pressed F12 on restart to select the USB stick I had created for the Ubuntu installation.</p><p>Apart from thinking of a good name for my new laptop, the install was really easy.  I decided to use the whole hard drive (SSD) space for Ubuntu and ditch windows 8 completely.  There were 3 recovery partitions that come with the laptop if I wanted to keep windows for a later date.  I did not.</p><img src="http://3.bp.blogspot.com/-i09UXqkk_3E/UUMtyYQNciI/AAAAAAAAJKc/N1oz7QeNT5E/s1600/ubuntu-install-cfdisk.png" class="img-code"><p><em>Disk partition information from: sudo cfdisk</em></p><h2 id="Added-security-and-partition-flexibility"><a href="#Added-security-and-partition-flexibility" class="headerlink" title="Added security and partition flexibility"></a>Added security and partition flexibility</h2><p>I decided to encrypt the whole laptop and this works really well.  For the rare occasion I shut down or restart the laptop, I get prompted as Ubuntu starts up to enter the password to unlock the encrypt drive.</p><p>I also decided to install Logical Volume Managment (LVM), just in case I needed to play around with the partition sizes.  As I have a 180GB SSD hard drive, I probably wont need to but it should not add a noticeable overhead.</p><p>One thing that is missing is a swap partition, but the only upshot of this on a laptop with 8GB is that hibernate has knowhere to write to, so its currently disabled.  I’ll probably manually partition the laptop when Ubuntu 13.04 comes out (25th April).</p><p>To finish off the install I just chose a name for the laptop and the usual username/password and everything was done in less than 30 minutes. I didn’t need to do anything to boot into the installed version of Ubuntu.</p><p>Next I’ll check out how well sound and video works.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJKA/-3aHKq5wJwc/s1600/lenovo-carbon1.jpg&quot; class=&quot;img-thumbnail&quot;&gt; 
&lt;p&gt;I have a lovely new Lenovo X1 Carbon and to make it even better I am installing &lt;a href=&quot;http://www.ubuntu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ubuntu&lt;/a&gt;.  The installation should be a breeze as Lenovo laptops are usually well supported, the only thing I configured was in the BIOS.  I wanted to check the boot order and see what the boot menu key was so I could install Ubuntu from a USB memory stick (boot menu key is F12).&lt;/p&gt;
    
    </summary>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/categories/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="lenovo" scheme="http://jr0cket.co.uk/tags/lenovo/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu on Lenovo X1 Carbon - Great First Impressions</title>
    <link href="http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-first.html.html"/>
    <id>http://jr0cket.co.uk/2013/03/ubuntu-on-lenovo-x1-carbon-first.html.html</id>
    <published>2013-03-14T23:21:00.000Z</published>
    <updated>2022-01-02T20:20:15.310Z</updated>
    
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJJ8/oNaVgTQmlWA/s1600/lenovo-carbon1.jpg" class="img-thumbnail"><p>After a bit of research on the level of <a href="Ubuntu">http://www.ubuntu.com</a> support, I decided to get a Lenovo X1 Carbon for my new development machine.  </p><p>If you have never seen the X1 Carbon, its like a really special edition of a Mac Book Air, except much more awesome and more powerful.  Here are my impressions so far.</p><a id="more"></a><p>The things I value the most are:</p><ul><li>Fast Processor - i7 cpu @ 2GHz dual core &amp; hyperthreading CPU (virtual 4 cores)</li><li>Decent size RAM - 8 Gb</li><li>14” Matt screen display with IPS for a very bright screen</li><li>Thin bezel around the display means the 14” screen sits in a typical 13” form factor</li><li>High Definition resolution - 1600x900</li><li>Decent battery life, between 4 to 6 hours and a 30 minute quick charge to ~80% full</li><li>A really great keyboard - perfect for Emacs and command line junkies</li><li>A hardware switch for WiFi and  Bluetooth</li><li>It comes in black, as all technology should </li></ul><p>The most important thing is that it runs <a href="Ubuntu">http://www.ubuntu.com</a> and it runs Ubuntu very fast!!</p><h1 id="Great-Ubuntu-support-so-far"><a href="#Great-Ubuntu-support-so-far" class="headerlink" title="Great Ubuntu support so far"></a>Great Ubuntu support so far</h1><img src="http://2.bp.blogspot.com/-2mypf120DAY/UUJbM-fswYI/AAAAAAAAJKE/DBZmPK7F9c0/s1600/ubuntulogo.png" class="img-topic"><p>I have not found anything that does not work as yet (although its only been 2 hours).</p><p><strong>WiFi network</strong> - this worked without any problems (even after suspend).  I did pick up a USB ethernet connector just in case, but have not needed that as yet.  The WiFi is very fast, especially when connected to a 5GHz network.  The WiFi also works with 2.5GHz networks too.</p><p><strong>Back-light keyboard</strong> - use <code>Fn + Space</code> keys to cycle through 2 different levels of brightness and off.  Unlike the Mac, there is no low-light level detector, but I can provide that service myself :)</p><p><strong>Display brightness</strong> - use <code>Fn + F8 / F9</code> to change the brightness of the screen and there is a decent stepping range of brightness.</p><p><strong>Volume level &amp; sound mute</strong> - these buttons all work, although the microphone mute button does not seem to work.</p><p><strong>Suspend</strong> on closing the laptop lid works just fine and the WiFi network came back along with everything else when opening the lid.  The Ubuntu installer does not create a swap space by default (or this may be because I selected an encrypted disk partition), so hibernate does not work at present.</p><p><strong>Lock Screen</strong> button <code>Fn + F3</code> works just fine and is a quick way to put the screen to sleep.</p><p><strong>External monitor</strong> also tested okay.  I plugged in a Dell 24” monitor using the Display Port to VGA adaptor (additional purchase) and got the full 1920 x 1200 output.  The Lenovo display can also run its display of 1600x900 at the same time and I notice no loss of responsiveness in either display. </p><p><strong>Web Camera</strong> works very well and I tested it out via a Google hangout with myself.</p><img src="http://3.bp.blogspot.com/-KRS_H5QxupU/UUJbYAPH3aI/AAAAAAAAJKM/6j6wVSlJGjk/s1600/ubuntu1210installation-large_014.jpg" class="img-code"><h1 id="Impressions-overall"><a href="#Impressions-overall" class="headerlink" title="Impressions overall"></a>Impressions overall</h1><p>The Lenovo X1 Carbon laptop is a pretty impressive piece of kit on paper.  I was excite when I was reading about it and worried it would not live up to the hype.</p><p>I didn’t have to worry.  From the moment I pulled it out of the box it has been a joy.  I still cant believe how light it is, it feels half the weight of any laptop I’ve ever held.  Despite the light weight, it feels very robust and seems like it will last a long time.</p><p>Using the laptop is a joy, mainly down to the keyboard.  Its a full size keyboard and has the keys laid out in there correct places.  I dont have to go hunting for the <code>@ ~ |</code> and <code>#</code> keys.</p><p>Battery life seems pretty good.  I have been writing this article on an off over the last 4 an a bit hours.  There is still an hour and a half left on the battery indicator.  Admittedly I haven’t run any websites running flash or played any games, but I am pretty sure I can last all day at a conference using WiFi.  I will test out the 30 minute quick charge over the next few days.</p><blockquote><p>Update: The Lenovo X1 Carbon charges up really quickly, easily charging to over 80% capacity in 30 minutes and full charge in about 45 minutes.</p></blockquote><p>Compared to the Mac Book Pro I was given via the company I work for, the Lenovo X1 Carbon wins on every count.</p><p>In the next few blogs I’ll cover setting up this great laptop to be an awesome development machine.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://3.bp.blogspot.com/-mIMpXCWQUw4/UUJJ1R0pADI/AAAAAAAAJJ8/oNaVgTQmlWA/s1600/lenovo-carbon1.jpg&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;After a bit of research on the level of &lt;a href=&quot;Ubuntu&quot;&gt;http://www.ubuntu.com&lt;/a&gt; support, I decided to get a Lenovo X1 Carbon for my new development machine.  &lt;/p&gt;
&lt;p&gt;If you have never seen the X1 Carbon, its like a really special edition of a Mac Book Air, except much more awesome and more powerful.  Here are my impressions so far.&lt;/p&gt;
    
    </summary>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/categories/ubuntu/"/>
    
    
      <category term="lenovo" scheme="http://jr0cket.co.uk/tags/lenovo/"/>
    
  </entry>
  
  <entry>
    <title>Hack the Tower February 2013</title>
    <link href="http://jr0cket.co.uk/2013/02/hack-tower-february-2013.html.html"/>
    <id>http://jr0cket.co.uk/2013/02/hack-tower-february-2013.html.html</id>
    <published>2013-02-22T14:08:00.000Z</published>
    <updated>2022-04-30T20:49:23.217Z</updated>
    
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-6h-4Dv2fnf8/USeAlY8lgwI/AAAAAAAAJFw/OQheQYOK8zs/s1600/tower42-surrounded-by-blue-cranes.jpg" class="img-thumbnail"><p>When 100 developers and 1 robot signed up for the February edition of Hack the Tower, across many technical communities in London, I could tell it was going to be a big event.</p><blockquote><p>Heading out for a full day of coding <a href="https://twitter.com/HackTheTower" target="_blank" rel="noopener">@HackTheTower</a> - excited about what people will create today #LSDC <a href="https://twitter.com/londonscala" target="_blank" rel="noopener">#LondonScala</a> #LJCjug #LdnClj #robots</p><footer><strong>@jr0cket</strong><cite><a href="https://twitter.com/jr0cket/status/300151177960628224" target="_blank" rel="noopener">twitter.com/jr0cket/status/300151177960628224</a></cite></footer></blockquote><p>Developers arrived from different communities, including</p><ul><li><a href="http://www.meetup.com/london-scala/" target="_blank" rel="noopener">London Scala user group</a></li><li><a href="https://groups.google.com/forum/?fromgroups#!forum/london-clojurians" target="_blank" rel="noopener">London Clojure community</a></li><li><a href="http://www.meetup.com/Londonjavacommunity/" target="_blank" rel="noopener">London Java Community</a></li><li><a href="http://www.meetup.com/LondonSalesforceDevelopers/" target="_blank" rel="noopener">London Salesforce developers</a></li><li><a href="http://www.meetup.com/london-software-craftsmanship/" target="_blank" rel="noopener">London Software Craftsmanship</a>&gt;</li></ul><blockquote><p><a href="https://twitter.com/sandromancuso" title="sandromancuso" target="_blank" rel="noopener">@sandromancuso</a> Yeah our little team is awesome, I believe we’re the last ones still coding :) <a href="https://twitter.com/HackTheTower" title="HackTheTower" target="_blank" rel="noopener">@HackTheTower</a> idea is great, I truly enjoy it!</p><footer><strong>@balopat</strong></footer></blockquote><a id="more"></a><h1 id="Starting-the-Hack-day"><a href="#Starting-the-Hack-day" class="headerlink" title="Starting the Hack day"></a>Starting the Hack day</h1><p>Hack the tower is an open space where developers can collaborate on projects.</p><p>As the host I encourage people to form groups along share interests or goals, so they can learn things from each other and lean on each others experiences.  To that end, I ask anyone with a project or idea to share it at the start and encourage people to join one of these projets.  Most people had some idea of what they wanted to work on, although quite a few changed their minds when they heard about the robot project.</p><p>I spent part of the day working on Clojure projects, including setting up Clojure on Windows 8 (not known as great developer platform).  I also helped people get to grips with git and <a href="http://blog.jr0cket.co.uk/2013/01/git-log-makes-multiple-repos-easier-to.html" target="_blank" rel="noopener">managing multiple repositories</a> as well as a guidance on using <a href="http://www.heroku.com" target="_blank" rel="noopener">Heroku</a> and MongoDB for the London Scala website project.</p><h1 id="Cloud-services-powering-Hack-the-Tower"><a href="#Cloud-services-powering-Hack-the-Tower" class="headerlink" title="Cloud services powering Hack the Tower"></a>Cloud services powering Hack the Tower</h1><img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-thumbnail"><p>Much of what we do at Hack the Tower is powered by cloud services for developers.  Without tools like Github, Heroku and Google search, coding applications would be so much harder.</p><p>We got a brief reminder of this when we broke Github :)<br><blockquote><p>…and github is down for maintenance!!! :O <a href="https://twitter.com/HackTheTower" target="_blank" rel="noopener">@HackTheTower</a> <a href="https://twitter.com/londonscala" target="_blank" rel="noopener">#LondonScala</a></p><footer><strong>@balopat</strong><cite><a href="http://twitter.com/balopat/status/300232782590914560" target="_blank" rel="noopener">twitter.com/balopat/status/300232782590914560</a></cite></footer></blockquote></p><p>Luckily Github was not down for long.  As git is distributed, we were able to save our changes locally or topped up on Coffee whist we waited a few minutes for Github to come back.</p><h1 id="Dancing-robot-curious-developers"><a href="#Dancing-robot-curious-developers" class="headerlink" title="Dancing robot, curious developers"></a>Dancing robot, curious developers</h1><p>Everyone’s instant favourite project seemed to be the NVO robot.  Its an amazing piece of kit.  Essentially a programmable robot that can by default can play Japanese music and do Tai Chi.</p><div class="video-container"><iframe src="//www.youtube.com/embed/rJnjmwtGQuE" frameborder="0" allowfullscreen></iframe></div><p>You can program the robot visually, by dragging and dropping actions and wiring them up together.  You can create a sequence of positions and get the software to work out the moves necessary to go from one position to another.  Just like digital animators use in software like blender.</p><p>You can drill down into each of these actions and program the robot in python or several other languages.</p><img src="https://pbs.twimg.com/profile_images/304321293/2442675643_5ffdd15b3b-square_bigger.jpg" class="img-thumbnail"><blockquote><p>Many thanks to @<a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">jr0cket</a> for organising <a href="https://twitter.com/HackTheTower" target="_blank" rel="noopener">@HackTheTower</a> today! Introduced a bunch of developers to <a href="https://twitter.com/NaoRobot" target="_blank" rel="noopener">#NAORobot</a>, learnt stuff and had fun too</p><footer><strong>@davesnowdon</strong></footer></blockquote><p>The robot has stereoscopic cameras and can do face recognition, in that it recognises a face when  it is in front of it.  This means the robot will talk to you when you when it looks at you, although it cant tell one face from another by default.  The robot has pressure sensors and fingers so it can interact with its environment.</p><blockquote><p><a href="https://twitter.com/HackTheTower" target="_blank" rel="noopener">@HackTheTower</a> <a href="http://t.co/hfUIMWgT" target="_blank" rel="noopener">My view today</a></p><footer><strong>@gnorsilva</strong></footer></blockquote><h1 id="London-Scala-user-group"><a href="#London-Scala-user-group" class="headerlink" title="London Scala user group"></a>London Scala user group</h1><img src="http://2.bp.blogspot.com/-kIrzG80xsL4/UMcqsNDxzzI/AAAAAAAAIsU/hKMCeoPdGkk/s1600/lsug-logo.jpeg" class="img-thumbnail"><p>There were a lot of developers from LSug  group and they ended up split into three smaller groups to focus on different problems.</p><p>Some of the team were working with MongoDB, some working on the RSVP via meetup.  All the events displayed on the Lsug website can now be joined directly, without having to visit the meetup site.  Perhaps the total number of Yes RSVP’s can be added to each meetup?</p><h1 id="Coding-board"><a href="#Coding-board" class="headerlink" title="Coding board"></a>Coding board</h1><blockquote><p><a href="https://twitter.com/villademor" target="_blank" rel="noopener">@villademor</a> Experimenting with <a href="http://t.co/ReN3kzR5" target="_blank" rel="noopener">codingboard.org</a>, <a href="https://twitter.com/scala&quot;" target="_blank" rel="noopener">#Scala</a> on <a href="https://twitter.com/HackTheTower" target="_blank" rel="noopener">@HackTheTower</a> <a href="https://twitter.com/londonscala" target="_blank" rel="noopener">#LondonScala</a> with <a href="https://twitter.com/balopat" target="_blank" rel="noopener">@balopat</a>, <a href="https://twitter.com/gnorsilva" title="gnorsilva" target="_blank" rel="noopener">@gnorsilva</a> among others!</p></blockquote><p><a href="http://codingboard.org/" target="_blank" rel="noopener">Coding Board</a> is a small web application allowing developers to share code with each other in a hands-on session.  When we want to talk about the decisions we took as we approached a problem, its  nice to have the code itself shared on the screen in a syntax  highlighted way.</p><p><a href="https://twitter.com/balopat" target="_blank" rel="noopener">Balint Pato</a> started this project as a <a href="http://blog.balopat.com/2012/12/a-gift-for-christmas-to-the-software-craftsmanship-community.html" target="_blank" rel="noopener">Christmas gift</a> for the <a href="http://www.meetup.com/london-software-craftsmanship/" target="_blank" rel="noopener">London Software Craftsmanship Community</a> using:</p><ul><li><a href="http://www.scala-lang.org/" target="_blank" rel="noopener">Scala</a> and <a href="http://www.scalatra.org/" target="_blank" rel="noopener">Scalatra</a></li><li><a href="http://twitter.github.com/bootstrap/" target="_blank" rel="noopener">Twitter Bootstrap</a> for the front end framework</li><li><a href="http://docs.seleniumhq.org/" target="_blank" rel="noopener">Selenium Webdriver</a> and <a href="http://etorreborre.github.com/specs2/" target="_blank" rel="noopener"> Specs2</a> for “testing”</li><li><a href="http://www.heroku.com/" target="_blank" rel="noopener">Heroku</a> developer cloud service for easy deployment</li><li>and no persistence whatsoever..:)</li></ul><p>The project is under an open source license and the code is <a href="http://github.com/balopat/codingboard" target="_blank" rel="noopener">available on Github</a> for you to clone and fork.</p><blockquote><p>we went live: Syntax highlighting on edit, max 24 hours long boards, loads of small fixes, altogether 10 pull requests! <a href="https://twitter.com/HackTheTower" title="HackTheTower" target="_blank" rel="noopener">@HackTheTower</a> <a href="https://twitter.com/londonscala" target="_blank" rel="noopener">#LondonScala</a></p><footer><strong>@balopat</strong><cite><a href="https://twitter.com/balopat/status/300286147186282496" target="_blank" rel="noopener">twitter.com/balopat/status/300286147186282496</a></cite></footer></blockquote><p>Read <a href="http://blog.balopat.com/2013/02/hack-the-tower-experience.html" target="_blank" rel="noopener">a blog of the days events</a> for this project from Balint Pato himself.</p><blockquote><p><a href="https://twitter.com/balopat" title="balopat" target="_blank" rel="noopener">balopat</a> <a href="http://t.co/FX6Aqc8P" target="_blank" rel="noopener">meetup photos</a> :) <a href="https://twitter.com/HackTheTower" title="HackTheTower" target="_blank" rel="noopener">@HackTheTower</a></p><footer><strong>@balopat</strong></footer></blockquote><h1 id="London-Clojurians-getting-going-with-Clojure"><a href="#London-Clojurians-getting-going-with-Clojure" class="headerlink" title="London Clojurians - getting going with Clojure"></a>London Clojurians - getting going with Clojure</h1><img src="http://3.bp.blogspot.com/-te_MuKdFBTQ/TzFLahe2BxI/AAAAAAAAEbY/Bn_JPN_s3qU/s1600/clojure-logo-500x.png" class="img-thumbnail"><p>Two of us helped out a developer relatively new to Clojure, although they did have some past experience with Lisp.  We helped them get ther environment set up, which was a bit more of a challenge as the were running Windows 8.</p><p>Luckily its still fairly easy to set up a working Clojure environment on Windows, although just about every command seemed to ask for the Administrators password!  On the <a href="http://leiningen.org/" target="_blank" rel="noopener">Leiningen website</a>, there is reference to a 3rd party bat file for getting going with windows.  The problem with this bat file is that its dependant on either wget or curl, neither of which were available on this machine.</p><p>We got round the problem by manually doing what the leiningen bat file did, downloading the .jar file and putting it in ~/.lein/self-install/…jar</p><p>A problem still remand with running lein.  The version in the .bat file was different from the ..jar file, so lein attempted to use and download a different version, which it couldnt find.  As we didnt have curl or wget to download the version in the bat file, we simply changed the bat file manually.</p><p>Some other aspects to setting up Clojure on windows 8 included:</p><ul><li>make sure javac is on the path, we only had java and lighttable failed</li><li>install leiningen - there is a bat file or use cygwin</li><li>install lighttable</li><li>use lein to create a new project and connect to a REPL</li></ul><h1 id="Salesforce-for-charity"><a href="#Salesforce-for-charity" class="headerlink" title="Salesforce for charity"></a>Salesforce for charity</h1><img src="http://2.bp.blogspot.com/-TF122Sgsv-4/UPxdX3gUFHI/AAAAAAAAI70/4WG-fXrH-yE/s1600/force_800x800.png" class="img-thumbnail"><p>Another team formed around the <a href="http://developer.salesforce.com/" target="_blank" rel="noopener">Salesforce platform</a>.  The were developing a tool to extract data from charity sites like Virgin Just Giving, helping fund raising organisations improve their fund-raising capabilities and getting a better view on where funds were coming from.</p><p>The data captured is filtered for the valuable data and the tool would allow you to match the incoming data with existing information you have.</p><p>The project is open source and <a href="https://github.com/stony-tsit/UK-Fundraising-Salesforce-App" target="_blank" rel="noopener">available on Github</a>.</p><h1 id="Java-Java-Java"><a href="#Java-Java-Java" class="headerlink" title="Java, Java, Java"></a>Java, Java, Java</h1><p>A team was also working on Java and some of the technical activity around the  Java Community Process (JCP).  The JCP is a way for others to help shape the future of the Java language and define the specifications for the language.</p><h1 id="Coding-through-the-night"><a href="#Coding-through-the-night" class="headerlink" title="Coding through the night?"></a>Coding through the night?</h1><img src="http://2.bp.blogspot.com/-x6RUGJlfAto/USJUmLxp4BI/AAAAAAAAJEg/KEuS-PZUAZ8/s1600/london-by-night-from-the-tower.png" class="img-thumbnail"><p>I did wonder at one point if we would still be here coding through Sunday as there were teams coding well into the evening.  By about 6pm everyone had got headed off into the beautiful London night.</p><blockquote><p><a href="https://twitter.com/villademor" title="villademor" target="_blank" rel="noopener">villademor</a> <a href="https://twitter.com/sandromancuso" title="sandromancuso" target="_blank" rel="noopener">@sandromancuso</a> <a href="https://twitter.com/HackTheTower" title="HackTheTower" target="_blank" rel="noopener">@HackTheTower</a> <a href="https://twitter.com/balopat" title="balopat" target="_blank" rel="noopener">@balopat</a> <a href="https://twitter.com/gnorsilva" title="gnorsilva" target="_blank" rel="noopener">@gnorsilva</a> we really had a good time Sandro! Shame we couldn’t catch up with you!</p></blockquote><blockquote><p><a href="https://twitter.com/sandromancuso" title="sandromancuso" target="_blank" rel="noopener">sandromancuso</a> <a href="https://twitter.com/villademor" title="villademor" target="_blank" rel="noopener">@villademor</a> Seems you guys are having loads of fun. Shame I could not make it. /cc <a href="https://twitter.com/HackTheTower" title="HackTheTower" target="_blank" rel="noopener">@HackTheTower</a> <a href="https://twitter.com/balopat" title="balopat" target="_blank" rel="noopener">@balopat</a> <a href="https://twitter.com/gnorsilva" title="gnorsilva" target="_blank" rel="noopener">@gnorsilva</a></p><footer><strong>@sandromancuso</strong><cite><a href="https://twitter.com/sandromancuso/status/300283052507160576" target="_blank" rel="noopener">twitter.com/sandromancuso/status/300283052507160576</a></cite></footer></blockquote><h1 id="Join-us-for-the-next-HackTheTower-event"><a href="#Join-us-for-the-next-HackTheTower-event" class="headerlink" title="Join us for the next HackTheTower event"></a>Join us for the next HackTheTower event</h1><p>Come along and join the fun.  If you are a developer who likes to learn and share experiences with others, then all you need is a laptop and some enthusiasm (laptop optional).</p><p>Sign up at either:</p><ul><li><a href="http://www.meetup.com/LondonSalesforceDevelopers/events/98334042/" target="_blank" rel="noopener">London Salesforce Developer community</a></li><li><a href="http://www.meetup.com/london-scala/events/105841122/" target="_blank" rel="noopener">London Scala user group</a></li><li><a href="http://www.meetup.com/Londonjavacommunity/events/100797272/" target="_blank" rel="noopener">London Java Community</a></li></ul><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://3.bp.blogspot.com/-6h-4Dv2fnf8/USeAlY8lgwI/AAAAAAAAJFw/OQheQYOK8zs/s1600/tower42-surrounded-by-blue-cranes.jpg&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;When 100 developers and 1 robot signed up for the February edition of Hack the Tower, across many technical communities in London, I could tell it was going to be a big event.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Heading out for a full day of coding &lt;a href=&quot;https://twitter.com/HackTheTower&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@HackTheTower&lt;/a&gt; - excited about what people will create today #LSDC &lt;a href=&quot;https://twitter.com/londonscala&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#LondonScala&lt;/a&gt; #LJCjug #LdnClj #robots&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;@jr0cket&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://twitter.com/jr0cket/status/300151177960628224&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;twitter.com/jr0cket/status/300151177960628224&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;Developers arrived from different communities, including&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.meetup.com/london-scala/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;London Scala user group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!forum/london-clojurians&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;London Clojure community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.meetup.com/Londonjavacommunity/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;London Java Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.meetup.com/LondonSalesforceDevelopers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;London Salesforce developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.meetup.com/london-software-craftsmanship/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;London Software Craftsmanship&lt;/a&gt;&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/sandromancuso&quot; title=&quot;sandromancuso&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@sandromancuso&lt;/a&gt; Yeah our little team is awesome, I believe we’re the last ones still coding :) &lt;a href=&quot;https://twitter.com/HackTheTower&quot; title=&quot;HackTheTower&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@HackTheTower&lt;/a&gt; idea is great, I truly enjoy it!&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;@balopat&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
    
      <category term="hackday" scheme="http://jr0cket.co.uk/tags/hackday/"/>
    
  </entry>
  
  <entry>
    <title>Leiningen - Quick Peek Underneath the Defproject Clojure Macro</title>
    <link href="http://jr0cket.co.uk/2013/02/leiningen-quick-peek-underneath-defproject-Clojure-macro.html.html"/>
    <id>http://jr0cket.co.uk/2013/02/leiningen-quick-peek-underneath-defproject-Clojure-macro.html.html</id>
    <published>2013-02-21T21:30:00.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-rxD8__T6tzA/TzFNNTKKLwI/AAAAAAAAEb8/k10iLxa3I70/s1600/leiningen-face.jpg" class="img-thumbnail"><p><a href="http://leiningen.org/" target="_blank" rel="noopener">Leiningen</a> is a project automation tool (think build tool and them some) that uses a <a href="http://clojure.org/reference/macros" target="_blank" rel="noopener">Clojure macro</a> to make it easy for <a href="http://clojure.org/" target="_blank" rel="noopener">Clojure</a> developers to manage their project lifecycle.</p><p>A Clojure project managed by Leiningen uses a simple clojure file called <code>project.clj</code> which allows developers to define a whole range of stuff about their projects.  To get started you only have to define a name, a version of Clojure and any dependencies in your <code>project.clj</code> and Leininge does the rest.  </p><p>So lets take a quick look under the hood of Leiningen and its defproject macro to see what is going on.</p><a id="more"></a><h1 id="The-defproject-macro"><a href="#The-defproject-macro" class="headerlink" title="The defproject macro"></a>The defproject macro</h1><p>The defproject macro when run creates a simple map of your project to work with.&nbsp; Here is an example map for my project, generated by the command</p><pre><code>lein pprint project.clj</code></pre><img src="http://4.bp.blogspot.com/-kGfaBdi_Tj8/USp12muKPKI/AAAAAAAAJG8/XVRCj23X89Q/s1600/clojure-leiningen-pprint-project-map-whats-my-salary.png" class="img-code"><p>If you add something to your <code>project.clj</code> file and wonder what is has changed underneath, then looking at the project map is very useful.</p><p>Using the project map to understand what dependencies you have pulled in could be a great way to streamline your project, or help debug it if something when wrong after adding a new dependency.</p><p>Leiningen also merges your profile configuration <code>~/.lein/profiles.clj</code> along with your <code>project.clj</code> settings when creating the project map.&nbsp; This can be seen in the above example.&nbsp; Near the end of the file is a <code>:plugins keyword</code>, the following 3 lines are plugins I defined in my profile.&nbsp; Leiningen will work out the smartest way to merge your <code>profile.clj</code> and <code>project.clj</code>.  If in doubt, you can check the project map.</p><h1 id="The-defproject-macro-code"><a href="#The-defproject-macro-code" class="headerlink" title="The defproject macro code"></a>The defproject macro code</h1><p>Here is the source code for the <code>defproject</code> macro:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defmacro</span></span> defproject</span><br><span class="line">  <span class="string">"The project.clj file must either def a project map or call this macro.</span></span><br><span class="line"><span class="string">  See `lein help sample` to see what arguments it accepts."</span></span><br><span class="line">  [project-name version &amp; args]</span><br><span class="line">  `(<span class="name"><span class="builtin-name">let</span></span> [args# ~(<span class="name">unquote-project</span> (<span class="name">argument-list-&gt;argument-map</span> args))</span><br><span class="line">         root# ~(<span class="name">.getParent</span> (<span class="name">io/file</span> *file*))]</span><br><span class="line">     (<span class="name"><span class="builtin-name">def</span></span> ~'project</span><br><span class="line">       (<span class="name">make</span> args# '~project-name ~version root#))))</span><br></pre></td></tr></table></figure><p>You can also see the <a href="https://github.com/technomancy/leiningen/blob/master/leiningen-core/src/leiningen/core/project.clj" target="_blank" rel="noopener">source code of the defproject macro</a> in context of the Leingingen project at its Github repository.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://1.bp.blogspot.com/-rxD8__T6tzA/TzFNNTKKLwI/AAAAAAAAEb8/k10iLxa3I70/s1600/leiningen-face.jpg&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://leiningen.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leiningen&lt;/a&gt; is a project automation tool (think build tool and them some) that uses a &lt;a href=&quot;http://clojure.org/reference/macros&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Clojure macro&lt;/a&gt; to make it easy for &lt;a href=&quot;http://clojure.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Clojure&lt;/a&gt; developers to manage their project lifecycle.&lt;/p&gt;
&lt;p&gt;A Clojure project managed by Leiningen uses a simple clojure file called &lt;code&gt;project.clj&lt;/code&gt; which allows developers to define a whole range of stuff about their projects.  To get started you only have to define a name, a version of Clojure and any dependencies in your &lt;code&gt;project.clj&lt;/code&gt; and Leininge does the rest.  &lt;/p&gt;
&lt;p&gt;So lets take a quick look under the hood of Leiningen and its defproject macro to see what is going on.&lt;/p&gt;
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/categories/clojure/"/>
    
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="leiningen" scheme="http://jr0cket.co.uk/tags/leiningen/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/tags/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title>Create Github Repos on the Command Line With Hub</title>
    <link href="http://jr0cket.co.uk/2013/02/create-github-repos-on-command-line.html.html"/>
    <id>http://jr0cket.co.uk/2013/02/create-github-repos-on-command-line.html.html</id>
    <published>2013-02-17T16:54:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-thumbnail"><p>Its easy to create a new repository on <a href="https://github.com/" target="_blank" rel="noopener">Github</a> website and then use your git tool or command line to clone it or add that remote repository to your project on your development machine. It would be even easier if you could just do it all from the command line with one command. Well, if you install <strong><a href="http://defunkt.io/hub/" target="_blank" rel="noopener">Hub</a></strong> then you can!</p><a id="more"></a><h1 id="Installing-Hub"><a href="#Installing-Hub" class="headerlink" title="Installing Hub"></a>Installing Hub</h1><p>Its easy to install <strong><a href="http://defunkt.io/hub/" target="_blank" rel="noopener">hub</a></strong> as its essentially a compiled Ruby script that used your git client to do a lot of the work for it.  If you are using <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">homebrew</a> on Mac OSX then you can run:</p><pre><code>brew install hub</code></pre><p>I havent got round to using homebrew yet, so I just installed hub in my home binaries directory:</p><pre><code>curl http://defunkt.io/hub/standalone -sLo ~/bin/hub</code></pre><p>Then I just make hub executable and I am good to go</p><img src="http://2.bp.blogspot.com/--PmUXufBddE/USEGAdGkGhI/AAAAAAAAJD8/HgWOMkVd8Bg/s1600/github-hub-install.png" class="img-code"><p>I could alias hub as the git command as suggested by the hub website, however I want to see the advantages of hub before I fully commit to it. </p><h1 id="Creating-a-Github-repo-without-using-the-website"><a href="#Creating-a-Github-repo-without-using-the-website" class="headerlink" title="Creating a Github repo without using the website"></a>Creating a <a href="https://github.com/" target="_blank" rel="noopener">Github</a> repo without using the website</h1><p>In this example I am putting my configuration files onto <a href="https://github.com/" target="_blank" rel="noopener">Github</a> (because after I installed rvm it started rewriting things) so I can manage them better and share them with others.</p><p>As usual, I start by creating a local repository for my project files.  This case I am in the home directory. </p><img src="http://2.bp.blogspot.com/-GNsUIzUKsxU/USEE-qL762I/AAAAAAAAJC8/3G-sAxlLhJ4/s1600/github-hub-git-init.png" class="img-topic"><p>To start with I am just going to add my global git configuration files to the repository.&nbsp; I’ll add more later.</p><img src="http://2.bp.blogspot.com/-neIzVzzUoJg/USEE-q3dtsI/AAAAAAAAJDI/-xASTudbyfg/s1600/github-hub-add-git-global-files.png" class="img-code"><p>Using <code>git status</code> I can see I have the desired files ready to be committed.  So lets commit them to my local repository with a suitably clear message.</p><img src="http://1.bp.blogspot.com/--6TpvMsdlMc/USEE-jQi2KI/AAAAAAAAJDM/ffpK4A_I67c/s1600/github-hub-commit-git-global-files.png" class="img-code"> <p>Now my git global configuration files are committed locally, so if they change I will be able to compare then to what is in git.</p><p>So far I haven’t needed to use Hub, but now I want to share these configuration files via <a href="https://github.com/" target="_blank" rel="noopener">Github</a>.&nbsp; I could go onto the website and then come back to the command line and add a remote for the <a href="https://github.com/" target="_blank" rel="noopener">Github</a> repository I just added.&nbsp; Using hub, I can just stay in the command line.</p><p>Using hub create command I can create a repository on <a href="https://github.com/" target="_blank" rel="noopener">Github</a>, specifying the name of the repository and using the -d option I can also include a description </p><img src="http://1.bp.blogspot.com/-f1QQzjVV6Jw/USEFALeFKkI/AAAAAAAAJDY/JKx8RdRgDJw/s1600/github-use-hub-to-create-repo-from-local.png" class="img-code"> <p>A repository on <a href="https://github.com/" target="_blank" rel="noopener">Github</a> has been created and the remote address was automatically added to my local git project. Yay!</p><p>To make absolutely sure just this first time, I have a quick look on the <a href="https://github.com/" target="_blank" rel="noopener">Github</a> website and sure enough there is my new repository.</p><img src="http://1.bp.blogspot.com/-BPYXNYU2cRs/USEFAFe9VsI/AAAAAAAAJDo/OQ7jVN9HoYE/s1600/github-hub-github-repo-created-on-website.png" class="img-code"> <p>Okay, so now I have a shiny new repo on github, its time to push my changes to it from my local repository.&nbsp; Again, we are back to just using git commands.</p><img src="http://4.bp.blogspot.com/-u0yQgPNi2Yw/USEFAaUo7KI/AAAAAAAAJDg/o_NgrFROnB8/s1600/github-hub-push-git-global-files.png" class="img-code"> <p>To check everything is up to date on both the local and remote repositories, I do a quick git log and see (thanks to <a href="http://blog.jr0cket.co.uk/2013/01/git-log-makes-multiple-repos-easier-to.html" target="_blank" rel="noopener">my git log customisations</a>) that the remote repository (origin/master) is at the same commit version as my local repository (master).</p><img src="http://3.bp.blogspot.com/-hCvA5-QYM-U/USEE_Ufk1rI/AAAAAAAAJDE/Pku_XLfEXpI/s1600/github-hub-git-lg.png" class="img-code"><h1 id="Summary-of-Hub"><a href="#Summary-of-Hub" class="headerlink" title="Summary of Hub"></a>Summary of Hub</h1><p>There is a lot more to hub that I will try out, but the most immediate use is to be able to create a <a href="https://github.com/" target="_blank" rel="noopener">Github</a> repository without having to switch from the command line.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Its easy to create a new repository on &lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github&lt;/a&gt; website and then use your git tool or command line to clone it or add that remote repository to your project on your development machine. It would be even easier if you could just do it all from the command line with one command. Well, if you install &lt;strong&gt;&lt;a href=&quot;http://defunkt.io/hub/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hub&lt;/a&gt;&lt;/strong&gt; then you can!&lt;/p&gt;
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="github" scheme="http://jr0cket.co.uk/tags/github/"/>
    
      <category term="hub" scheme="http://jr0cket.co.uk/tags/hub/"/>
    
  </entry>
  
  <entry>
    <title>Global Git Ignores Make Collaborative Development Easier</title>
    <link href="http://jr0cket.co.uk/2013/02/global-git-ignores-make-collaborative-development-easier.html.html"/>
    <id>http://jr0cket.co.uk/2013/02/global-git-ignores-make-collaborative-development-easier.html.html</id>
    <published>2013-02-08T15:22:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail"><p>Lots of developers are using git, especially when working on projects together.&nbsp; However there is not one single developer tool that every one uses, so there is potential for a lot of unwanted files to end up in your project.</p><p>Rather than pollute the .gitignore file for the project with every development tool under the sun, its much more effective to add development tool specific files to your own global ignore file <code>~/.gitignore_global</code>.</p><a id="more"></a><h1 id="Creating-my-own-global-ignores"><a href="#Creating-my-own-global-ignores" class="headerlink" title="Creating my own global ignores"></a>Creating my own global ignores</h1><p>In the <code>~/.gitconfig</code> of my home directory I have a section called <code>[core]</code> where a global excludes file is defined</p><pre><code>[core]  excludesfile = /Users/jstevenson/.gitignore_global&lt;/span&gt;</code></pre><p>By adding file name patters to the <code>.gitignore_global</code> file for Emacs, I can add my own personal excludes without adding unnecessary stuff to each project I work on.  It also means its one  less thing to remember when I am working with git projects.</p><p>In the root of your home directory, simple create or update the file <code>.gitignore_global</code> with all the file names and patterns that relate to the tools you use.</p><h1 id="Ignore-patterns"><a href="#Ignore-patterns" class="headerlink" title="Ignore patterns"></a>Ignore patterns</h1><p>To help you out, here are some ignore patterns for some of the most common developer tools.&nbsp; There are lots of ignore patterns on the <a href="https://github.com/github/gitignore/tree/master/Global" target="_blank" rel="noopener">Git Ignore github repository</a></p><h2 id="Emacs-ignore-patterns"><a href="#Emacs-ignore-patterns" class="headerlink" title="Emacs ignore patterns"></a>Emacs ignore patterns</h2><img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail"><p>I use Emacs for much of my development projects, so here are some ignore patters I add to my <code>.gitignore_global</code> file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*~</span><br><span class="line">\#*</span><br><span class="line">\#</span><br><span class="line">/.emacs.desktop</span><br><span class="line">/.emacs.desktop.lock</span><br><span class="line">.elc</span><br><span class="line">auto-save-list</span><br><span class="line">tramp</span><br><span class="line">.\#*</span><br></pre></td></tr></table></figure><h2 id="Org-mode"><a href="#Org-mode" class="headerlink" title="Org-mode"></a>Org-mode</h2><p>I also create a lot of developer content using Emacs Org-mode, so here are the ignore patterns I add for this.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.org-id-locations</span><br><span class="line">*_archive</span><br></pre></td></tr></table></figure><h2 id="Vi-Vim"><a href="#Vi-Vim" class="headerlink" title="Vi / Vim"></a>Vi / Vim</h2><p>.*.s[a-w][a-z]</p><h2 id="IntelliJ-ignore-patterns"><a href="#IntelliJ-ignore-patterns" class="headerlink" title="IntelliJ ignore patterns"></a>IntelliJ ignore patterns</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line">*.iws</span><br><span class="line">.idea/</span><br></pre></td></tr></table></figure><h2 id="Netbeans-ignore-patters"><a href="#Netbeans-ignore-patters" class="headerlink" title="Netbeans ignore patters"></a>Netbeans ignore patters</h2><img src="http://2.bp.blogspot.com/-EjfbbP6MpJo/URUV9U3X4ZI/AAAAAAAAJCY/RagOD9XWMZs/s1600/netbeans-logo.jpg" class="img-thumbnail"> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">nbproject/private/</span><br><span class="line">build/</span><br><span class="line">nbbuild/</span><br><span class="line">dist/</span><br><span class="line">nbdist/</span><br><span class="line">nbactions.xml</span><br><span class="line">nb-configuration.xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Eclipse ignore patters</span><br><span class="line"></span><br><span class="line">&#123;% img img-thumbnail http://1.bp.blogspot.com/-RmrjIrvG7dE/URUVuk2P5QI/AAAAAAAAJCQ/RGcprIpBxjc/s1600/Eclipse_Icon_by_flosweb.png %&#125;</span><br><span class="line"></span><br><span class="line">``` .gitignore_global</span><br><span class="line">*.pydevproject </span><br><span class="line">.project </span><br><span class="line">.metadata </span><br><span class="line">bin/** </span><br><span class="line">tmp/** </span><br><span class="line">tmp/**/* </span><br><span class="line">*.tmp </span><br><span class="line">*.bak </span><br><span class="line">*.swp </span><br><span class="line">*~.nib </span><br><span class="line">local.properties </span><br><span class="line">.classpath </span><br><span class="line">.settings/ </span><br><span class="line">.loadpath </span><br><span class="line">.externalToolBuilders/ </span><br><span class="line">*.launch </span><br><span class="line">.cproject</span><br><span class="line">.buildp</span><br></pre></td></tr></table></figure><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://git-scm.com/images/logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Lots of developers are using git, especially when working on projects together.&amp;nbsp; However there is not one single developer tool that every one uses, so there is potential for a lot of unwanted files to end up in your project.&lt;/p&gt;
&lt;p&gt;Rather than pollute the .gitignore file for the project with every development tool under the sun, its much more effective to add development tool specific files to your own global ignore file &lt;code&gt;~/.gitignore_global&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>MonkiGras 2013 Aftermath - Bigger, Bolder and Craftier</title>
    <link href="http://jr0cket.co.uk/2013/02/monkigras-2013-aftermath-bigger-bolder.html.html"/>
    <id>http://jr0cket.co.uk/2013/02/monkigras-2013-aftermath-bigger-bolder.html.html</id>
    <published>2013-02-05T11:49:00.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-k14DzhO7g38/TzASLJEEtpI/AAAAAAAAEa0/yHjSub8rNSg/s1600/monki-gras-2012-banner.jpg" class="img-thumbnail"> <p>Monki Gras conference has only just had its second outing and already its become a bit of a legend.  Its one of those conferences that is highly social and highly stimulating and also quite exhausting in a good way.  Here is some of the excitmemet I managed to capture.</p><a id="more"></a><p>Amazingly this years event only started half an hour late and was even bigger than <a href="http://jr0cket.co.uk/2012/02/monki-gras-london-craft-of-conferences.html">last year</a>.  Here are some highlights from the 2013 event.</p><h1 id="James-Governor-setting-the-tone"><a href="#James-Governor-setting-the-tone" class="headerlink" title="James Governor setting the tone"></a>James Governor setting the tone</h1><img src="http://3.bp.blogspot.com/-8gOVnx6gJWQ/UHg6D67NjrI/AAAAAAAAIYM/um3MEP7lMOM/s1600/james-govenor.jpg" class="img-thumbnail"> <p>In the passed, companies turned to mass production to optimise for productivity and  by consequence turned people who work in that environment into faceless drones.</p><p>What we need are tools and practices that support people rather than replace people.</p><p>As developers we have a thirst for learning how to use our tools well and how to adopt and adapt a variety of practices to improve our work.  This is now starting to become wide-spread across many other industries.</p><h1 id="Coffee-as-collaboration-at-Heroku"><a href="#Coffee-as-collaboration-at-Heroku" class="headerlink" title="Coffee as collaboration at Heroku"></a>Coffee as collaboration at <a href="http://www.heroku.com/" target="_blank" rel="noopener">Heroku</a></h1><img src="http://farm6.static.flickr.com/5297/5396355671_d21981c6db.jpg" class="img-thumbnail"><p><a href="https://twitter.com/craigkerstiens" target="_blank" rel="noopener">Craig Kerstiens</a> &amp; <a href="https://twitter.com/mattt" target="_blank" rel="noopener">Matt Thompson</a> - <a href="http://www.heroku.com/" target="_blank" rel="noopener">Heroku</a></p><p>Some revellers enjoyed a rather liquid breakfast, for those that felt it was just a little too early for beer then it was coffee time with Heroku. </p><p>Matt and Craig Kerstiens talked about how the team at <a href="http://www.heroku.com/" target="_blank" rel="noopener">Heroku</a>, the Herokai, manage to maintain the collaboration within a growing startup.</p><p><a href="http://www.heroku.com/" target="_blank" rel="noopener">Heroku</a> now has 85 people, loosely organised into 21 teams.  Overall the company manages 5000 internal heroku apps and schedules 500 releases a day.  Much of the code is available in close to 200 <a href="https://github.com/organizations/heroku" target="_blank" rel="noopener">public Github repos</a>.</p><p>As a developer you spend a lot of time with your head down working and that limits your level of communicating.  A good balance is important for a healthy company.  Communication however is different from interruption and its well agreed fact that one interruption costs 20 minutes.  What is less well understood is that a developer gets typically 2 hours of uninterrupted working in an 8 hour day. </p><h2 id="So-how-do-you-encourage-communication-with-Coffee"><a href="#So-how-do-you-encourage-communication-with-Coffee" class="headerlink" title="So how do you encourage communication with Coffee?"></a>So how do you encourage communication with Coffee?</h2><p>Actually, its very hard to make a single cup of coffee at the Heroku office.  All the coffee making machines are geared up for several cups.  So you have to find someone to share coffee with you and you end up having a conversation as you are waiting.</p><p>Making Coffee in this way is also a great way break the ice.  Its easy to learn and as a simple craft you can show new people how to make coffee as a way of introduction to the company.  The Coffee mentioning role gives a way to demonstrate and convey some of the values of the company at the same time.</p><img src="http://sphotos-b.xx.fbcdn.net/hphotos-ash4/300731_349185285162367_2128347492_n.jpg" class="img-thumbnail"><h2 id="Headphone-rule"><a href="#Headphone-rule" class="headerlink" title="Headphone rule"></a>Headphone rule</h2><p>Its an unwritten rule in Heroku that when someone has their headphones on it means “Do not disturb”.  This allows developers to focus on their work without haviing to justify that focus to anyone else.</p><p>In Heroku this approch is seen as an engineers thing and sometimes others in the company dont get it at first.</p><h2 id="Makers-day-is-Thursday"><a href="#Makers-day-is-Thursday" class="headerlink" title="Makers day is Thursday"></a>Makers day is Thursday</h2><p>Every Thursday is sacred at Heroku and no meetings should be scheduled.  This allows engineers to easy to turn down a meeting on makers day without feeling awkward.</p><p>On Wednesdays Heroku have their all hands day right after lunch.  Because of this interuption, engineers typically arrange all their meetings that day.  This makes the rest of the week pretty effective for getting things done.  It also encourages others to think about the value of a meeting.</p><blockquote><p><a href="https://twitter.com/sjmaple" target="_blank" rel="noopener">sjmaple</a> Great heroku talk! At ZeroTurnaround you’re not allowed to book meetings on Wednesday or Thursday! productivity++ #monkigras</p></blockquote><h2 id="Encouraging-ad-hoc-Communication"><a href="#Encouraging-ad-hoc-Communication" class="headerlink" title="Encouraging ad-hoc Communication"></a>Encouraging ad-hoc Communication</h2><p>Sometimes the best conversations happen at random, so lunch is catered every day.  As well as a great perk it also is very communal.  The dining area has a few long tables for about 12 people, helping group discussions.  The eclectic variety of food make people more willing to communicate, often asking “how do we eat this”.</p><p>Friday is beer day.  This is more than just drinking beer, Herokai are encouraged to suggest drinks that should be ordered.  Its also a great way to get everyone reflect on the week just gone.</p><h2 id="Challenges-still-remaining"><a href="#Challenges-still-remaining" class="headerlink" title="Challenges still remaining"></a>Challenges still remaining</h2><p>There is an increasing number of remote employees and maintaining regular communication is tough.</p><p>There is also the effect of the <a href="http://en.wikipedia.org/wiki/Allen_curve" target="_blank" rel="noopener">Allen curve</a>, which shows the exponential drop in freqnuecy of communication between engineers as the distance between them grows.</p><img src="http://1.bp.blogspot.com/-lSm0m8MOyj4/URDjKBU15UI/AAAAAAAAJAk/f1aAuDtuHdE/s1600/curva-allen-curve.png" class="img-code"> <p>To help everyone understand the challenges and crowd source for ideas, Heroku hold a remote week where their office is closed.  Everyone in the company works remotely, from home, on the road or out and about in their location.</p><p>This type of activity could also help with focusing on common tools and service consolidation.  As each team has ownership of their own practices, then tools and services have exponentially spread.  Some concensus and culling of stuff would be help communication.</p><h1 id="Making-for-makers"><a href="#Making-for-makers" class="headerlink" title="Making for makers"></a>Making for makers</h1><p><a href="https://twitter.com/mnowster" target="_blank" rel="noopener">Mazz Mosley</a> &amp; <a href="https://twitter.com/nickstenning" target="_blank" rel="noopener">Nick Stenning</a> - GDS</p><p>Imaging you are a craftsman with years of experience, what would happen if all of the people you dealt with were gone?  Could you imaging the emmense chain of resorces that allow you to practice your craft?</p><h2 id="Enter-Quantum-Physics"><a href="#Enter-Quantum-Physics" class="headerlink" title="Enter Quantum Physics"></a>Enter Quantum Physics</h2><p><a href="http://bouman.chem.georgetown.edu/general/feynman.html" target="_blank" rel="noopener">I think I can safely say that nobody understands quantum mechanics - Richard P. Feynman_</a>.  There are very few people who claim to understand quantum physics, although every JavaScript programmer fundamentally relies on the principles of quantum mechanics.  Rather than make JavaScript developer spend years studying quantum physics they use <a href="http://angeleah.com/blog/2012/11/02/black-box-abstraction.html" target="_blank" rel="noopener">black box abstraction</a>.</p><p>We have relationships with people who can do all the things we need to do our almost everything we use is an abstraction that allows us to use it effectively rather than trying to understand how its made.  The exception being soap which is a harder abstraction than the process it is supposed to encapsulate.</p><h2 id="Users-are-users-even-if-they-are-makers"><a href="#Users-are-users-even-if-they-are-makers" class="headerlink" title="Users are users even if they are makers."></a>Users are users even if they are makers.</h2><blockquote><p>Or in my words “Developers are people too” @jr0cket</p></blockquote><p>You should  understand the complexity that you pass on to your users, especially if you want to keep them!</p><blockquote><p>kenneth reitz <a href="http://kennethreitz.org/expressions/how-i-develop-things-and-why" target="_blank" rel="noopener">the user api is all that matters everything else is secondary </a></p></blockquote><h2 id="Scaling-the-new-Government-website"><a href="#Scaling-the-new-Government-website" class="headerlink" title="Scaling the new Government website"></a>Scaling the new Government website</h2><img src="http://3.bp.blogspot.com/-ndLKp9hcA5Q/URDt3Uyc3zI/AAAAAAAAJBU/-rPdlzH2TQQ/s1600/alpha_homepage_grab.jpg" class="img-topic"><p>In 12 weeks, a dozen people built alpha.gov.uk website from scratch to deployment and much rejoycing was had by all.</p><p>In 8 months, a team of 48 people built the beta version of the website.  In october 2012, the real site was launched using a team of 200 people.</p><p><em>So how did they scale the team in a short amount of time?</em></p><p>No rockstar, wizzards or ninjas were hired.  These types of developer egos all seem to drink from the ego boosting cool aid, making the same kind of mistakes as they have the same kind of attitude.  Rockstars are bullsh*t, Rockstars are not webscale!.  Rockstars are not used to listening to there users and that includes those other developers they work with every day.  A good team needs diverse set of people, to create a passionate team.</p><p><em>Assembling a team is a skill in its own right.</em></p><p>At GDS it was about hiring people who understood what the company was trying to achieve. When something is hard and not very well defined the best way to deal with this is to give it to people,  lots of diverse people who understand the goal you are working towards and have a diverse set of experiences to draw from.</p><p>On paper, going from alpha to beta to production in such a short time frame you need to leave your ego at the door to get stuff done</p><blockquote><p>Mazz, Uncle Bob &amp; Stan Lee: With great diversity comes great collective intelligence and power!</p></blockquote><h1 id="Scaling-happiness"><a href="#Scaling-happiness" class="headerlink" title="Scaling happiness"></a>Scaling happiness</h1><p><a href="https://twitter.com/tnm" target="_blank" rel="noopener">Ted Nyman</a> - Github </p><blockquote><p>Why do you love someone?  If you love someone for intelligence or bone structure,  then you should also love people who have even nicer examples of these things.</p><footer><strong>Plato</strong><cite>On Love</cite></footer></blockquote><img src="http://3.bp.blogspot.com/-10Ndc3AUd7c/URDsrM19YBI/AAAAAAAAJBI/4BC0CmkLKTg/s1600/perks-are-best-here.jpg" class="img-topic"> <p>Perks do not make people happy, they come and go and you cant build culture with tokens.  Token freedom perks are transitory and eventually make you wonder why a positive thing is only available a small part of the time.  If your company said you could go out in the sun for two hours once a month then you have to come inside.  You would quickly come to realise that going back inside is not where you want to be.</p><p>The real way you make people happy is in the organisation of the people in the company.  At Github there are no formal managers.  Cultural and technology adaptations grow naturally from this.  For example, everyone becomes part of the traditional management functions and that role becomes dispersed.  Everyone becomes responsible from hiring and ensuring people are happy.</p><p>If you create the structure that lets the culture form, then a culture grows to reinforces that structure.  The structure at Github being that we dont have a structure.  Everything that people need taken care of get taken care of as otherwise people complain.  Sometimes this means people doing things for themselves, or collaborating with others to get it done.</p><p>There are probably good managers out there, Ted just cant thing of any, well except for <a href="http://en.wikipedia.org/wiki/Julius_Caesar" target="_blank" rel="noopener">Julius Caesar</a>, he was a good manager!</p><p>The challenge remaining is that nothing actually scales, this is especially true when it comes to people.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>There is so much more to Monki Gras that what I managed to capture here (or would care to share in public).  The conference is really engaging and it will take a while for all the ideas and practices I experienced to peculate through my brain.</p><p>The evening event was amazing too, with fine food arranged to match the Craft brewed beer we were sampling.  Its a good job the conference ends on Fridays, so I could recover over the weekend.</p><p>Thank you.</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://4.bp.blogspot.com/-k14DzhO7g38/TzASLJEEtpI/AAAAAAAAEa0/yHjSub8rNSg/s1600/monki-gras-2012-banner.jpg&quot; class=&quot;img-thumbnail&quot;&gt; 
&lt;p&gt;Monki Gras conference has only just had its second outing and already its become a bit of a legend.  Its one of those conferences that is highly social and highly stimulating and also quite exhausting in a good way.  Here is some of the excitmemet I managed to capture.&lt;/p&gt;
    
    </summary>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
    
      <category term="monkigras" scheme="http://jr0cket.co.uk/tags/monkigras/"/>
    
  </entry>
  
  <entry>
    <title>Git Log Makes Multiple Repos Easier to Track</title>
    <link href="http://jr0cket.co.uk/2013/01/git-log-makes-multiple-repos-easier-to.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/git-log-makes-multiple-repos-easier-to.html.html</id>
    <published>2013-01-29T00:42:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail"> <p>Git is a great developer tool for managing and sharing code.  Its really easy to get started with, especially with services such as <a href="https://github.com/" target="_blank" rel="noopener">Github</a> and their excellent <a href="http://try.github.com/" target="_blank" rel="noopener">try.github.com</a> website.  I quickly became comfortable with the basic developer cycle: </p><pre><code>git initgit status git add filenamegit commit -m &quot;useful message&quot;git push;; back to git status...</code></pre><p>To keep track of changes when you just have a local repository is easy with <code>git status</code>.</p><a id="more"></a><h1 id="Git-log-for-tracking-multiple-repositories"><a href="#Git-log-for-tracking-multiple-repositories" class="headerlink" title="Git log for tracking multiple repositories"></a>Git log for tracking multiple repositories</h1><p>When you start sharing a remote repository then changes are distributed and developers start using <code>git log</code> to track changes across repositories.  The challenge with <code>git log</code> is that by default you have to scroll through a lot of text to see what is happening.  This gets a bit tedious really quickly.</p><img src="http://2.bp.blogspot.com/--Oj7Ocw5ddA/UQavWR8_1oI/AAAAAAAAI-M/g1hbsrRRbJ4/s1600/git-log-default-output.png" class="img-code"><p>Luckily, the <code>git log</code> output is very configurable so its really easy to get a clearer picture.  The most useful options to git log include </p><p><code>--abbrev-commit</code> - only shows the last part of the very long commit name, the sha.  This is now a default option since Git 1.7.x</p><p><code>--graph</code> - show an ascii art graph of the commit history, also known as the commit graph.</p><p><code>--pretty=oneline</code> or <code>--oneline</code> - print each commit entry on a sigle line, which can be scrolled horizontally to see longer commit messages.  The one-line value is one of several built in formats to the –pretty option and in this case can be used as an option on its own.</p><p><code>--decorate</code> - shows the forks, branches and tag names relative to the commit history, helping you keep track of latest commit on each branch and across all your remote repositories.  Decorate therefore provides a quick way to see which commits have been merged or pushed.</p><p>Putting all these options together you get a much simpler and easier to follow view of the commit history.</p><img src="http://2.bp.blogspot.com/-s_hKo72A__c/UQcUcUJP71I/AAAAAAAAI_M/Zf0G9Zi_1b0/s1600/git-log-commit-graph-decorate-oneline-abbrev-commit.png" class="img-code"> <h1 id="Creating-git-aliases"><a href="#Creating-git-aliases" class="headerlink" title="Creating git aliases"></a>Creating git aliases</h1><p>Rather than type git log and all these options each time (or scroll through your shell history), you can create a git alias as a shortcut for this long command line</p><p>I create an alias called <code>lg</code> for git log as follows:</p><pre><code>git config --global alias.lg &apos;log --graph --oneline --decorate&apos;</code></pre><p>This will add the alias called lg to your <code>~/.gitconfig</code> file.  You could also edit this file directly and add aliases manually.</p><pre><code>&lt;pre&gt;`[alias]    lg = log --graph --oneline --decorate</code></pre><h1 id="The-commit-graph"><a href="#The-commit-graph" class="headerlink" title="The commit graph"></a>The commit graph</h1><p>Visualising the commit graph is my must-have tool when using git, I use it nearly as often as <code>git status</code>.  The commit graph shows a history of commits and the position of repos in that history.  When there are branches, this is rendered as a tree-like structure and it is easy to see the relative status of your local and remote repositories attached to the project.</p><img src="http://1.bp.blogspot.com/-iDu7u9zb1oA/UQcU1yeQWyI/AAAAAAAAI_U/ML7tNMPDmRc/s1600/git-commit-graph-stylised.png" class="img-code"><p>Most common status in git is to have your local repository ahead of the remote masters in terms of commits, with <strong>HEAD</strong> pointing to you local repo. Its quite common to do a group of related commits locally before pushing then to a shared remote repo.  When the remote repo is behind your local repo, this is quite obvious from the commit graph, as its on an earlier commit version and therefore a different line of the graph.</p><p>You can see when a push happens to a remote repository from your local repo, as the branch merges into the trunk.  When everything that has been committed locally has been pushed then you can see the remote branch at the same commit version as the local.</p><p>In the situation where you have multiple repositories, for different stages of the development workflow (for example testing, staging, CI), the commit graph really makes the status of your different repositories really clear.  You can see at a glance the commit version each repo is on.  The commit graph also helps you understand which commits to push to which repos.  This is also invaluable when merging two longer running branches (should you get to that situation).</p><h1 id="Designing-your-own-commit-graph"><a href="#Designing-your-own-commit-graph" class="headerlink" title="Designing your own commit graph"></a>Designing your own commit graph</h1><p>In the next article I will cover how to create your own design for the git commit graph, creating several aliases for different levels of information </p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://git-scm.com/images/logo.png&quot; class=&quot;img-thumbnail&quot;&gt; 
&lt;p&gt;Git is a great developer tool for managing and sharing code.  Its really easy to get started with, especially with services such as &lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github&lt;/a&gt; and their excellent &lt;a href=&quot;http://try.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;try.github.com&lt;/a&gt; website.  I quickly became comfortable with the basic developer cycle: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
git status 
git add filename
git commit -m &amp;quot;useful message&amp;quot;
git push
;; back to git status...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To keep track of changes when you just have a local repository is easy with &lt;code&gt;git status&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git Interactive Cheetsheet for Visually Oriented Developers</title>
    <link href="http://jr0cket.co.uk/2013/01/git-interactive-cheetsheet-for-visually.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/git-interactive-cheetsheet-for-visually.html.html</id>
    <published>2013-01-28T14:43:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail"><p>Sometimes reading a big book or looking at a long list of commands is the last thing you want to do when discovering how to use a new tool.  So it was great to find a very visual way to show the git commands and how they work.</p><a id="more"></a><h1 id="Git-Interactive-Cheetsheet"><a href="#Git-Interactive-Cheetsheet" class="headerlink" title="Git Interactive Cheetsheet"></a>Git Interactive Cheetsheet</h1><p>The <a href="http://ndpsoftware.com/git-cheatsheet.html" target="_blank" rel="noopener">Git Interactive Cheetsheet</a> from <a href="http://ndpsoftware.com/" target="_blank" rel="noopener">NDP Software</a> does exactly that.  By clicking on different stages of your development workflow, you can see the related commands that you can use.  Hover over a specific command and you get a short description of what it will do.  The site also shows you the direction in which those commands work, supporting your understanding of those commands.</p><img src="http://2.bp.blogspot.com/-J9v-PxiEsUc/UQaNN7xzNxI/AAAAAAAAI9s/RvGXB5Q68fw/s1600/git-interactive-cheetsheet-local-repo-commands.png" class="img-code"><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>It would be great if more tools have this kind of visualisation around them, especially involving the developer workflow that they support.</p><p>I have created some basic visualisation of developer workflows using Inkscape, an open source drawing tool.  The results can be seen at my developer guides on Github pages.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://git-scm.com/images/logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Sometimes reading a big book or looking at a long list of commands is the last thing you want to do when discovering how to use a new tool.  So it was great to find a very visual way to show the git commands and how they work.&lt;/p&gt;
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>London Salesforce Developer Meetup - January 2013</title>
    <link href="http://jr0cket.co.uk/2013/01/london-salesforce-developer-meetup.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/london-salesforce-developer-meetup.html.html</id>
    <published>2013-01-23T20:30:00.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<p>Its been a cold week in London so its great to see so many venture out to the latest meetup of the London Salesforce Developer community.</p><p>Thanks to our hosts, <a href="http://www.makepositive.com/" target="_blank" rel="noopener">Make Positive</a>, there was plenty of pizza to warm everyone up and plenty of drinks to cool everyone down again.  Make positive have a very roomy office to work in and its a great space to talk to other developers and admins involved in forcedotcom projects.</p><a id="more"></a><p>We had a great talk from Rob Cowel, giving his insight into developing applications and system integrations across three cloud platforms: forcedotcom, heroku and <a href="https://www.iriscouch.com/" target="_blank" rel="noopener">IrisCouch</a> (CouchDB).</p><p>I also gave a quick update of Salesforce news, up coming events, new organisers for the community and a collection of resources for developers getting started with the force.</p><iframe allowfullscreen frameborder="0" height="356" marginheight="0" marginwidth="0" mozallowfullscreen scrolling="no" src="http://www.slideshare.net/slideshow/embed_code/16138024" style="border-width: 1px 1px 0; border: 1px solid #CCC; margin-bottom: 5px;" width="427"> </iframe> <p><a href="http://www.slideshare.net/JR0cket/london-salesforce-developers-meetup-january-2013" title="London Salesforce Developers Meetup January 2013" target="_blank" rel="noopener">London Salesforce Developers Meetup January 2013</a> from <a href="http://www.slideshare.net/JR0cket" target="_blank" rel="noopener">John Stevenson</a></p><p>t of people whist not playing ping pong. As always there is a good mix of people, including Salesforce staff, the Make Postive team, developers from Tquila and many more.</p><p>I met a developer who has been working on a blog, <a href="http://www.cloudfollows.com/" target="_blank" rel="noopener">www.cloudfollows.com</a>, with others around the world aimed at those relatively new to the forcedotcom platform.  A quick glance had me very interested.  It looks a well presented site with lots of handy tips.</p><p>I caught up with Salesforce MVP’s Francis Pindar and Keir Bowden and they are keen to run some workshops to help people gain experience with the platform.  We’ll be running our first workshops in Tower42 on the 11th April.  There will be room for approximately 10 developers. </p><p>There is always so much conversation going on and I often hate to break it up for the talks.</p><h2 id="The-Talks"><a href="#The-Talks" class="headerlink" title="The Talks"></a>The Talks</h2><p>I  gave a quick overview of coding events we are running for the community.  This includes <strong><a href="http://jr0cket.co.uk/2013/02/hack-tower-february-2013.html">Hack the Tower</a></strong> and the upcoming coding dojo for Salesforce developers at Tquila.</p><p><strong>John Mahoney, Clerisoft.com</strong> gave a quick demo of Steroid, a custom components framework for the forcedotcom platform.  It provides a  library of re-usable custom components for both desktops &amp; mobile  devices.  Clerisoft developers pick ideas that are requested on … but are not planned to be added to the platform by Salesforce engineers.</p><p>John was looking for feedback on the concept, what components developers would find valuable and any for pepole to go try them out.</p><p><strong>Keir Bowden, Salesforce MVP</strong> gave a quick run  through of the <a href="http://certification.salesforce.com/Developers" target="_blank" rel="noopener">developer certification</a> process.  Each level of certification has been designed to help you grow your  skills and get great roles in industry.  Salesforce and it customers really value the certification process, as it gives a measure of confidence in the ability to deliver projects successfully.</p><p>Keir is also driving the  formation of the EMEA TA review board, which is a peer review process  for the top level of Salesforce developer certification.</p><p>Keir has now experienced the review board from the inquisitor side, being involved in the first EMEA review board. As Keir is now on the EMEA review board he is no longer in a position to offer advice on how to pass the TA certification.</p><p>Keir invited Chris Eales along to share his experiences, as Chris is the latest Technical Architect to pass the certification level.</p><h2 id="Next-months-meetup"><a href="#Next-months-meetup" class="headerlink" title="Next months meetup"></a>Next months meetup</h2><p>The next monthly meetup for the <a href="http://www.meetup.com/LondonSalesforceDevelopers/events/96135922/" target="_blank" rel="noopener">London Salesforce developers</a> is at Make Positive on the 27th March.  If you want to speak about anything please get in touch or leave a message on the meetup event. </p><p>Sign up at: <a href="http://www.meetup.com/LondonSalesforceDevelopers/events/96135922/" target="_blank" rel="noopener">http://www.meetup.com/LondonSalesforceDevelopers/events/96135922/</a></p><p>See you there.<br>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Its been a cold week in London so its great to see so many venture out to the latest meetup of the London Salesforce Developer community.&lt;/p&gt;
&lt;p&gt;Thanks to our hosts, &lt;a href=&quot;http://www.makepositive.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Make Positive&lt;/a&gt;, there was plenty of pizza to warm everyone up and plenty of drinks to cool everyone down again.  Make positive have a very roomy office to work in and its a great space to talk to other developers and admins involved in forcedotcom projects.&lt;/p&gt;
    
    </summary>
    
      <category term="events" scheme="http://jr0cket.co.uk/categories/events/"/>
    
    
      <category term="salesforce" scheme="http://jr0cket.co.uk/tags/salesforce/"/>
    
  </entry>
  
  <entry>
    <title>Markdown Driven Developer Sites on Heroku - Easily Create an Online Workshop</title>
    <link href="http://jr0cket.co.uk/2013/01/markdown-driven-developer-sites-on.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/markdown-driven-developer-sites-on.html.html</id>
    <published>2013-01-21T13:58:00.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-yIBn-HYfxeA/UI_UGVJF6AI/AAAAAAAAIdo/MLPDWYCbX2Q/s1600/heroku-logo-light-300x100.png" class="img-thumbnail"> <p><a href="http://www.heroku.com/" target="_blank" rel="noopener">Heroku</a> is a great platform to deploy your web apps, in a way that just works  for developers.  What isnt obvious is you can also deploy static sites too.</p><p>As Markdown is now common way for developers to  create documentation, why not use Heroku to deploy your markdown driven content site.</p><a id="more"></a><h2 id="Collaborating-force"><a href="#Collaborating-force" class="headerlink" title="Collaborating force"></a>Collaborating force</h2><p>The <a href="http://developer.salesforce.com/" target="_blank" rel="noopener">Salesforce developer evangelist team</a> are doing just this, creating workshops written in markdown.  The workshops are deployed on Heroku and we collaborate via Github.  This is a really effective way to collaborate as we are remote workers and often on our travels. </p><h2 id="Markdown-is-simple"><a href="#Markdown-is-simple" class="headerlink" title="Markdown is simple"></a>Markdown is simple</h2><img src="http://2.bp.blogspot.com/-vdbLJDFnR7Q/UPxhMffM05I/AAAAAAAAI8k/1HLAKXNX5jU/s1600/markdown-logo.gif" class="img-topic"> <p>Markdown is really easy to learn and really easy to read.  Its much better to read in its raw form than most Wiki Markup languages.  If you have a good editor (Emacs &amp; Emacs Live) then reading and writing markdown is a great experience.</p><p>Its also pretty easy to convert Markdown to different formats such as HTML and PDF.</p><p>I picked up all the markdown syntax from working with Github readme.md files and from writing markdown in Emacs.  SimpleCode.me also has a really good <a href="http://www.simplecode.me/2011/12/11/getting-started-with-markdown/" target="_blank" rel="noopener">getting started with markdown guide</a>. </p><h2 id="Creating-the-content-in-markdown"><a href="#Creating-the-content-in-markdown" class="headerlink" title="Creating the content in markdown"></a>Creating the content in markdown</h2><img src="http://2.bp.blogspot.com/-hiVZZWkLlbg/UPAGL_h-U4I/AAAAAAAAI5Q/J3CzFdhvziw/s1600/emacs-live-docs-themed.png" class="img-topic"> <p>Any editor can be used two work on the content for the workshops, this is another beauty of markdown.  I recommend Emacs with <a href="http://blog.jr0cket.co.uk/2013/01/emacs-live-great-clojure-developer.html" target="_blank" rel="noopener">Emacs Live setup</a> or you are using MacOSX, then <a href="http://mouapp.com/" target="_blank" rel="noopener">Mou</a> gives you live rendering of you content as you type.</p><p>To make the markdown render in HTML and PDF similar to the style used on github, a fairly simple css file is added to the project. </p><h2 id="Creating-your-app-on-Heroku"><a href="#Creating-your-app-on-Heroku" class="headerlink" title="Creating your app on Heroku"></a>Creating your app on Heroku</h2><p>As Heroku and Github are both going to be used then the projects are versioned with Git.  A git repository is created on Github at the start of a new workshop.  A github  organisation is used to keep al the projects together.  The new Github repository is cloned and development of the content commences.</p><blockquote><p>As its a static site then there is not much need for a .gitignore file, assuming you have <a href="http://jr0cket.co.uk/2012/12/gitignore-for-clojure-and-emacs-ignore.html">a ~/.gitignore_global file for any backup files</a> that your editor creates.  </p></blockquote><p>Once the workshop content is good enough to deploy, a new Heroku application is created.  A specific <a href="https://devcenter.heroku.com/articles/buildpacks" target="_blank" rel="noopener">build pack</a> is used to tell Heroku how to assemble and deploy the markdown as a web  application.  This build pack defines how the HTML is generated from  the markdown, based on a css file included in the project.  The whole  app runs on a HTTP server called SimpleHTTPServer, written in Python.</p><p>The app is created on Heroku app using the <a href="https://github.com/jamesward/heroku-buildpack-markdown" target="_blank" rel="noopener">markdown build pack</a> created by James Ward.  The command line for this is:</p><pre><code>heroku create workshop-name  --buildpack https://github.com/jamesward/heroku-buildpack-markdown.git</code></pre><h2 id="Telling-Heroku-how-to-run-your-app"><a href="#Telling-Heroku-how-to-run-your-app" class="headerlink" title="Telling Heroku how to run your app"></a>Telling Heroku how to run your app</h2><p>A procfile is a simple text  file that tells Heroku what to do with you application when its ready to  run it.  For the markdown site we simply start up a simple HTTP server  which runs on python (we dont need all the bells and whistles of something like Apache).</p><p>The <code>web:</code> directive at the front tells heroku to create a process that listens to requests from the Internet.  As we are not  specifying a port number, it will pick up the default port to listen on  from the Heroku environment variables.</p><pre><code>web: python -m SimpleHTTPServer $PORT</code></pre><h2 id="Deploying-the-markdown-site"><a href="#Deploying-the-markdown-site" class="headerlink" title="Deploying the markdown site"></a>Deploying the markdown site</h2><img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-topic"> <p>As soon as you are ready for your  markdown content to go live, simply push your local repository up to the  Heroku repostiory with the git push command.</p><pre><code>git push</code></pre><p>If you have more than one remote repository specified in your git configuration, then all you need to do is specify the specific repository to push to.  By default the heroku create command adds a remote called heroku.</p><p>To check what your heroku repository is called you can use the command:</p><pre><code>git remote -v</code></pre><p>To push to a remote repository called heroku, use the command:</p><pre><code>git push heroku master</code></pre><h2 id="In-summary"><a href="#In-summary" class="headerlink" title="In summary"></a>In summary</h2><p>It is really easy to create content based on markup. Collaborating on this content is really easy when using Github and deploying this content as a static website is only a git push away with heroku.</p><p>Other aspects were are adding to this workshop creation process include:</p><ul><li>create a staging heroku app to allow testing of content once the site has gone live;</li><li>automatically generating a pdf copy of each page every time you deploy a new version.</li></ul><p>Thank you.</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://2.bp.blogspot.com/-yIBn-HYfxeA/UI_UGVJF6AI/AAAAAAAAIdo/MLPDWYCbX2Q/s1600/heroku-logo-light-300x100.png&quot; class=&quot;img-thumbnail&quot;&gt; 
&lt;p&gt;&lt;a href=&quot;http://www.heroku.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Heroku&lt;/a&gt; is a great platform to deploy your web apps, in a way that just works  for developers.  What isnt obvious is you can also deploy static sites too.&lt;/p&gt;
&lt;p&gt;As Markdown is now common way for developers to  create documentation, why not use Heroku to deploy your markdown driven content site.&lt;/p&gt;
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="heroku" scheme="http://jr0cket.co.uk/tags/heroku/"/>
    
      <category term="markdown" scheme="http://jr0cket.co.uk/tags/markdown/"/>
    
      <category term="depreciated" scheme="http://jr0cket.co.uk/tags/depreciated/"/>
    
  </entry>
  
  <entry>
    <title>Emacs Live - Instant Clojure Development Environment</title>
    <link href="http://jr0cket.co.uk/2013/01/emacs-live-instant-clojure-development-environment.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/emacs-live-instant-clojure-development-environment.html.html</id>
    <published>2013-01-14T23:36:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail"><p>Emacs is a really powerful tool for Clojure development, although without a guiding hand it can be a bit of a learning curve.  Using the <a href="https://github.com/overtone/emacs-live" target="_blank" rel="noopener">Emacs Live</a> its really simple to get a fully featured development environment for Clojure.  I will show you how to get Emacs Live installed and how to start using it for Clojure.</p><a id="more"></a><p>  I also recommend using <a href="http://emacsformacosx.com/" target="_blank" rel="noopener">EmacsForOSX</a> if you are on a Mac.</p><img src="http://1.bp.blogspot.com/-lqWITXmJQYY/UPACxNMM3rI/AAAAAAAAI4o/GfP54cumPSQ/s1600/emacs-live-clojure-repl-magit-leiningen-example.png" class="img-code"> <p><a href="https://github.com/overtone/emacs-live" target="_blank" rel="noopener">Emacs Live</a> is a collection of packages for Clojure that include: </p><ul><li><strong>Clojure mode</strong> - language support </li><li><strong>nREPL</strong> - interactive environment</li><li><strong>Magit</strong> - manage git repositories </li><li><strong>auto-complete</strong> - tab complete expression names &amp; show documentation</li><li><strong>undo-tree</strong> - undo and redo on steroids with a branching history</li><li><strong>yasnippets</strong> - abbreviations automatically expand into function templates</li></ul><h1 id="Installing-Emacs-Live"><a href="#Installing-Emacs-Live" class="headerlink" title="Installing Emacs Live"></a>Installing Emacs Live</h1><p>Emacs Live required Emacs 24 or greater, everything else is self contained.</p><p>You could just clone the github repository, but the provided install script makes sure everything is set up correctly and also creates a separate folder for your own personal settings.  This allows you to tweak Emacs Live to your own style without it getting clobbered by any updates.</p><p>Run the following in a terminal window (Mac or Linux):</p><script src="//gist.github.com/4504972.js"></script><p>Before anything is installed, the script will move any old Emacs configuration to <code>~/.emacs.d</code> to a folder called <code>~/.emacs.d-old</code>.</p><p>Once all the Emacs Live configuration files are installed, the script asks you if you want to create your own personal configuration.  If so, a new folder will be created called<br><code>~/.live-packs/your-current-username-pack</code>.</p><h1 id="How-to-tweak-Emacs-Live"><a href="#How-to-tweak-Emacs-Live" class="headerlink" title="How to tweak Emacs Live"></a>How to tweak Emacs Live</h1><p>Its really easy to add your own key bindings and other configurations to Emacs Live, using the personal pack the script created for you.  The personal pack has an <code>init.el</code> file in which you can add short simple configurations or load in longer configurations from the <code>config</code> or <code>lib</code> folders.</p><h2 id="Key-bindings"><a href="#Key-bindings" class="headerlink" title="Key bindings"></a>Key bindings</h2><p>Emacs live makes several changes to the default key bindings of Emacs.  If you want the default  key bindings back then you can simply switch off the Emacs Live key bindings by adding the following to the file <code>~/.emacs-live.el</code></p><pre><code>(live-ignore-packs &apos;(live/bindings-pack))</code></pre><p>Alternatively, you can learn to love the Emacs Live bindings, or tweak a few in your own personal pack.  I have added a keybinding for launching the Clojure repl and a pair of key bindings for changing the font size, making it easier to change fonts when giving a demo.</p><p>To make the change in my personal pack, I added the following to the file <code>~/.live-packs/jstevenson-pack/config/bindings.el</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;; Simpler key bindings for making text in buffers bigger and smaller</span><br><span class="line">(define-key global-map (kbd &quot;C-+&quot;) &apos;text-scale-increase)</span><br><span class="line">(define-key global-map (kbd &quot;C--&quot;) &apos;text-scale-decrease)</span><br><span class="line"></span><br><span class="line">;; Launch Clojure repl via Leiningen - M-x nrepl-jack-in</span><br><span class="line">(global-set-key (kbd &quot;C-c C-j&quot;) &apos;nrepl-jack-in)</span><br></pre></td></tr></table></figure><h2 id="Loading-in-bigger-changes"><a href="#Loading-in-bigger-changes" class="headerlink" title="Loading in bigger changes"></a>Loading in bigger changes</h2><p>To keep your <code>init.el</code> file easy to work with, larger customisations can be defined in their own <code>.el</code> files under the config diretory.  Then simply add a line to load in these config files in the file  <code>~/.live-packs/jstevenson-pack/config/init.el</code></p><p>See the example where I <a href="http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html">tweaked the mode line for Emacs when developing Clojure</a></p><h1 id="Upgrading-Emacs-Live"><a href="#Upgrading-Emacs-Live" class="headerlink" title="Upgrading Emacs Live"></a>Upgrading Emacs Live</h1><img src="http://2.bp.blogspot.com/-rWT1D_eoyFU/UPAFbJb-odI/AAAAAAAAI5I/ou7yYkCsw0U/s1600/emacs-live-update-git-fetch.png" class="img-code"> <p>As all the configuration files are hosted on Github then a simple <code>git pull</code> will bring in any new version.  As the install script clones the github repository, the remote github repository is already set up.</p><p>From inside your <code>~/.emacs.d</code> folder you can simple do a <code>git pull</code> when you know there is an update (notices are posted to the <a href="https://groups.google.com/forum/?fromgroups=#!topic/emacs-live/" target="_blank" rel="noopener">Emacs Live Google group</a>).</p><p>If you want to know if you are on the latest version or how many versions you are behind, you can use <code>git fetch</code> to get all the latest changes without applying them.  The output of git fetch will list any versions that have been created since you installed.</p><h1 id="Just-the-Docs"><a href="#Just-the-Docs" class="headerlink" title="Just the Docs"></a>Just the Docs</h1><p>Emacs Live has <a href="http://overtone.github.com/emacs-live/documentation.html" target="_blank" rel="noopener">documentation</a> using the Emacs Live theme on the Github pages for the Emacs Live project.</p><img src="http://2.bp.blogspot.com/-hiVZZWkLlbg/UPAGL_h-U4I/AAAAAAAAI5Q/J3CzFdhvziw/s1600/emacs-live-docs-themed.png" class="img-code"><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>For a developer new to Emacs and Clojure development, getting a great environment to work in is easy.  Learning how to use that environment well will take practice, but this is the case with any tools.  Muscle memory will kick in pretty quickly, so the more you use Emacs the more natural it will feel. </p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/emacs-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Emacs is a really powerful tool for Clojure development, although without a guiding hand it can be a bit of a learning curve.  Using the &lt;a href=&quot;https://github.com/overtone/emacs-live&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Emacs Live&lt;/a&gt; its really simple to get a fully featured development environment for Clojure.  I will show you how to get Emacs Live installed and how to start using it for Clojure.&lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/tags/dev-tools/"/>
    
      <category term="emacslive" scheme="http://jr0cket.co.uk/tags/emacslive/"/>
    
  </entry>
  
  <entry>
    <title>The Git Father - a Forking Badass T-Shirt</title>
    <link href="http://jr0cket.co.uk/2013/01/the-git-father-forking-badass-t-shirt.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/the-git-father-forking-badass-t-shirt.html.html</id>
    <published>2013-01-09T16:29:00.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail"><p>The Git Father. The only t-shirt to wear when teaching other people who to use git and Github. </p><img src="http://1.bp.blogspot.com/-l8pchRzUta0/UO2ZNVdVokI/AAAAAAAAI4I/BU5cyWtJmeA/s1600/the-git-father-forking-badass-clearvision.png" class="img-code"> <p><em>One day I will actually iron my t-shirts :)</em></p><p>Thanks to <a href="http://www.clearvision-cm.com/" target="_blank" rel="noopener">Clearvision</a> for creating such a great t-shirt.  Check out their <a href="http://www.go-git.com/" target="_blank" rel="noopener">Go Git website</a> for ideas on adopting git in your organisation.  </p><p>Thank you.<br><a href="http://www.twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;http://git-scm.com/images/logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;The Git Father. The only t-shirt to wear when teaching other people 
      
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Tweeking Emacs Modeline for Clojure Development</title>
    <link href="http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html.html</id>
    <published>2013-01-04T11:01:00.000Z</published>
    <updated>2022-01-02T20:20:15.310Z</updated>
    
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail"><p>Emacs is fun to configure and if you have the basics of LISP or Clojure then its pretty easy too.  After reading how to <a href="http://www.masteringemacs.org/articles/2012/09/10/hiding-replacing-modeline-strings/" target="_blank" rel="noopener">replace the text on the modeline</a> I decided to customise my mode-line to make it more efficient for Clojure development.  I’ll cover how I tweaked the mode line and added this customisation to my <a href="https://github.com/overtone/emacs-live" target="_blank" rel="noopener">Emacs Live</a> based configuration.</p><a id="more"></a><p>Instead of a long list of Major and Minor modes that are active, I now have symbols representing those modes.</p><p>In the screen-shot you can see I have the following modes running</p><p>λ    Clojure mode<br>τ    undo-tree<br>γ    yas<br>υ    volatile highlights<br>ηζ  nREPL minor mode<br>α    auto-complete<br>φ    paredit</p><img src="http://3.bp.blogspot.com/-vfMe4acOK5w/UOQuzoDiRBI/AAAAAAAAI3Q/53fhjdSEpHU/s1600/Emacs-clean-mode-line-for-clojure-and-nrepl.png" class="img-code"><p>Some other modes are active, but hidden with a null string as I am assuing they are running all the time.</p><h1 id="Configuring-Emacs-Live"><a href="#Configuring-Emacs-Live" class="headerlink" title="Configuring Emacs Live"></a>Configuring Emacs Live</h1><p>Adding these to the Emacs Live configuration I use is easy, assuming you used the “bro-grammer” script provided by <a href="http://plus.google.com/104881409052969541540" target="_blank" rel="noopener">+Sam Aaron</a>.  This script creates a <code>~/.live-pack</code> folder where you can add your own keybindings and configuration without it getting hit by Emacs Live updates.</p><p>I created a file called <code>clean-mode-line.el</code>, based on the one in the Mastering Emacs article.  The file is located in my personal live-packs folder at:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.live-packs/jr0cket-pack/config/clean-mode-line.el</span><br></pre></td></tr></table></figure><p>The code for the mode-line tweaks is a Github Gist:</p><script src="//gist.github.com/4434524.js?file=clean-mode-line.el"></script> <p>To use this new mode-line tweak, we ask Emacs Live to load the configuration in clean-mode-lime.el.  To do this, edit the <code>init.el</code> file in your live pack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.live-packs/jr0cket-pack/init.el </span><br></pre></td></tr></table></figure><p>Then add the following code:</p><script src="//gist.github.com/4434605.js?file=init.el"></script> <h1 id="Emacs-Tweaked"><a href="#Emacs-Tweaked" class="headerlink" title="Emacs Tweaked"></a>Emacs Tweaked</h1><p>When you open a Clojure document, the mode line now displays the major and minor modes as symbols.</p><img src="http://2.bp.blogspot.com/-yYcO9X9AGWU/UOQu0wmhK3I/AAAAAAAAI3g/rZxXuAQ1Z1E/s1600/Emacs-clean-mode-line-for-clojure.png" class="img-code"><p>Starting the Clojure REPL using <code>M-x nrepl-jack-in</code> gives you a similar modeline, this time with the major mode being <code>nrepl-mode</code>.</p><img src="http://3.bp.blogspot.com/-vEeUhbx-sWo/UOQu0OplJJI/AAAAAAAAI3Y/wF_I-g9J3rc/s1600/Emacs-clean-mode-line-for-clojure-nrepl.png" class="img-code"><p>Switching back to a Clojure file after running nREPL shows <code>Clojure</code> as the major mode and <code>nREPL</code> running as the minor mode.</p><img src="http://3.bp.blogspot.com/-vfMe4acOK5w/UOQuzoDiRBI/AAAAAAAAI3Q/53fhjdSEpHU/s1600/Emacs-clean-mode-line-for-clojure-and-nrepl.png" class="img-code"><h2 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h2><p>The custom mode line was really easy to set up, thanks to the great info in the <a href="http://www.masteringemacs.org/articles/2012/09/10/hiding-replacing-modeline-strings/" target="_blank" rel="noopener">Matering Emacs article</a>.  The tricky part was finding the specific name for the nREPL minor mode that was running.  Other than that it took a couple of minutes, most of which was deciding which symbols to use.  I added a few others at the end of the file in case I change my mind or you want to use something more meaningful to yourself. </p><p>I havent tried this with Swank, but I assume that all it would take is adding of the swank mode to the clean-mode-line.el file.</p><p>When I get round to using other modes, I will see if I can add other symbols to my configuration where it makes sense.  Let me know if you find this useful and what symbols you use.   </p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;Emacs is fun to configure and if you have the basics of LISP or Clojure then its pretty easy too.  After reading how to &lt;a href=&quot;http://www.masteringemacs.org/articles/2012/09/10/hiding-replacing-modeline-strings/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;replace the text on the modeline&lt;/a&gt; I decided to customise my mode-line to make it more efficient for Clojure development.  I’ll cover how I tweaked the mode line and added this customisation to my &lt;a href=&quot;https://github.com/overtone/emacs-live&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Emacs Live&lt;/a&gt; based configuration.&lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/tags/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title>Password Protected SSH Key for Github for Mac &amp; Linux</title>
    <link href="http://jr0cket.co.uk/2012/12/password-protected-ssh-key-for-github.html.html"/>
    <id>http://jr0cket.co.uk/2012/12/password-protected-ssh-key-for-github.html.html</id>
    <published>2012-12-31T15:57:00.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    
    <content type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-vIpCWBThzsw/T8ZKPxPTC8I/AAAAAAAAIHU/di86sKgUYA8/s1600/public-private-keys.jpg" class="img-thumbnail"> <p>Secure Shell (SSH) is an invaluable tool to help developers manage code and data over different computers and services, eg. <a href="http://github.com" target="_blank" rel="noopener">Github</a>, <a href="http://www.heroku.com" target="_blank" rel="noopener">Heroku</a>.  By creating a public/private key it also means you dont have to enter a username &amp; password each time you use the service.  Ideally you should create a public/private key using a long passphrase, so that is what I will cover here.</p><a id="more"></a> <h2 id="Why-use-a-secure-key"><a href="#Why-use-a-secure-key" class="headerlink" title="Why use a secure key?"></a>Why use a secure key?</h2><p>To make using SSH a great experience to use and yet keeping it secure as possible requires you to set up an public / private key combination that is protected by a long pass-phrase.  Specifically you are protecting your private key as you distribute your public key (which is why its called public).  Imagine the pass-phrase as a kind of long password, which you will add to something called a keychain on your laptop so you only have to enter this long password once.</p><img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-topic"><h2 id="I-don’t-want-to-keep-typing-my-long-password-on-every-commit"><a href="#I-don’t-want-to-keep-typing-my-long-password-on-every-commit" class="headerlink" title="I don’t want to keep typing my long password on every commit?"></a>I don’t want to keep typing my long password on every commit?</h2><p>Of course not, that would be a real pain.</p><p>When using a password protected SSH key with Mac OSX and Linux you can add your SSH key password to the keychain (keyring in Linux, but its the same thing) of your login account.</p><p>When you first connect to github using your newly added key you will be prompted with a dialog box to add the password for your SSH key to your keychain.  Enter the password for your keychain in this prompt, it should be the same as your computer login password (unless you specifically changed it).</p><h2 id="Creating-a-password-protected-SSH-key"><a href="#Creating-a-password-protected-SSH-key" class="headerlink" title="Creating a password protected SSH key"></a>Creating a password protected SSH key</h2><p>Creating an SSH key pair with a long pass-phrase is just the same process as that without, except you obviously specify the long password.</p><p>In the following example, I am specifying the email I used for the Github account I own, using the <code>-C</code> option for <code>ssh-keygen</code>.</p><p>I am also using a custom file name.  In doing so, I need to provide the full path to the file or otherwise ssh-keygen fails to create the file.  It seems that even the <code>~/</code> shortcut to your home folder also fails.</p><p>As I am using a custom name for the keys, then I will need specific a host configuration before I am done.</p><img src="http://3.bp.blogspot.com/-Y7vVzBfsOZE/UOG0phBIZHI/AAAAAAAAI2w/doqqeqnO3fQ/s1600/github-ssh-key-generation-secure.png" class="img-code"><h2 id="Adding-a-Host-configuration"><a href="#Adding-a-Host-configuration" class="headerlink" title="Adding a Host configuration"></a>Adding a Host configuration</h2><p>If your public key is called id_rsa.pub then you should not need a host configuration.  As I am using a custom name to generate the SSH keys, I need to add a host definition to my SSH configuration.  Its pretty easy to add a new definition, simply edit the ~/.ssh/config file and add a definition as follows</p><img src="http://2.bp.blogspot.com/-Wt1uj7Hxnec/UKaKa29sKwI/AAAAAAAAIjA/XtmLKuvJQ-g/s1600/ssh-host-config-github-secure.png" class="img-code"><h2 id="Adding-Keys-a-bad-Developer-experience"><a href="#Adding-Keys-a-bad-Developer-experience" class="headerlink" title="Adding Keys - a bad Developer experience"></a>Adding Keys - a bad Developer experience</h2><img src="http://3.bp.blogspot.com/-0xWwyDAsFGU/UKaiV_bcAWI/AAAAAAAAIjY/iMdnVj8lVNQ/s1600/github-profile-edit.png" class="img-code"><p>The adding of keys to your Github account is a very poor experience for the developer, as it requires a cut-n-paste rather than allowing you to upload your key file.</p><p>Adding keys to <strong><a href="https://devcenter.heroku.com/articles/keys" target="_blank" rel="noopener">Heroku</a></strong> is much nicer, they have a <strong><a href="https://toolbelt.heroku.com/" target="_blank" rel="noopener">toolbelt</a></strong> that automatically detects your public key file and upload it. </p><p>I had a few problems when copy/pasting my key from the editors that come with the Mac, until I found reference to the command <code>pbcopy</code>.</p><p>Open up a terminal and enter the following command to copy your public key into the Mac’s clipboard.  Then simply paste the key into the Github webpage for adding a new key. </p><pre><code>pbcopy &lt; ~/.ssh/id_rsa.pub</code></pre><p>Bitbucket is not much better, although at least they tell you about pbcopy in the documentation for adding a key.  When I used Assembla.com, at least you could upload your key public key as a file.</p><p>Once you have uploaded your public key, don’t forget to give it a quick test to make sure its all working.  Using the command line, use the ssh command to connect to github</p><pre><code>ssh -T git@github.com</code></pre><img src="http://3.bp.blogspot.com/-pYOW0NB6RfA/UKaiX5iv1oI/AAAAAAAAIjg/SZBS1NMG11c/s1600/github-testing-successful.png" class="img-code"><p>This command will use your SSH key to connect to Github and show you if you have successfully set up your key for your account on your Mac.  Unlike normal SSH access, you cant actually do anything once you connect.</p><p>Thank you.</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://2.bp.blogspot.com/-vIpCWBThzsw/T8ZKPxPTC8I/AAAAAAAAIHU/di86sKgUYA8/s1600/public-private-keys.jpg&quot; class=&quot;img-thumbnail&quot;&gt; 
&lt;p&gt;Secure Shell (SSH) is an invaluable tool to help developers manage code and data over different computers and services, eg. &lt;a href=&quot;http://github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github&lt;/a&gt;, &lt;a href=&quot;http://www.heroku.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Heroku&lt;/a&gt;.  By creating a public/private key it also means you dont have to enter a username &amp;amp; password each time you use the service.  Ideally you should create a public/private key using a long passphrase, so that is what I will cover here.&lt;/p&gt;
    
    </summary>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
    
      <category term="github" scheme="http://jr0cket.co.uk/tags/github/"/>
    
      <category term="heroku" scheme="http://jr0cket.co.uk/tags/heroku/"/>
    
      <category term="security" scheme="http://jr0cket.co.uk/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Driving Git With Emacs - Part Two - May the Log Be With You</title>
    <link href="http://jr0cket.co.uk/2012/12/driving-git-with-emacs-part-two-may-log.html.html"/>
    <id>http://jr0cket.co.uk/2012/12/driving-git-with-emacs-part-two-may-log.html.html</id>
    <published>2012-12-30T11:48:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/emacs-logo.png" class="img-thumbnail"><p>In <a href="http://jr0cket.co.uk/2012/12/driving-git-with-emacs-pure-magic-with.html">part one</a> I showed how easy it is to version a project using Git from within Emacs, using the Magit package.  This time we look at the git log within Magit.</p><p>Working with the log gives you a lot more detail about your changes, helps you compare local and remote repo commits.  All of which helps you understand when you should push your code.</p><a id="more"></a><h1 id="Git-logs-with-Magit"><a href="#Git-logs-with-Magit" class="headerlink" title="Git logs with Magit"></a>Git logs with Magit</h1><p>On the command line you can use git log to see your change history, although it can be a bit fiddly to set up git to give you a pretty view of those logs.  In Magit you can just get on a explore the logs</p><p>Inside the Magit buffer, press <code>l</code> to show the log menu and then either <code>l</code> for the short for log or <code>L</code> for the long form of the log.</p><pre><code>l l - short logl L - long log</code></pre><p><img src="http://4.bp.blogspot.com/-0QAfewaMsLw/UN-KyXzkaqI/AAAAAAAAI0I/SXTUvdWTyWY/s1600/Emacs-git-log-menu.png" alt="Emacs Magit - the log menu - l"></p><p>Selecting the short log details allows you to see more commits, but you only see the commit message and not the files that have changes.</p><p>In the following examples both the remote (github repository) and local repository are at the same commit - <code>e447b51</code>.  So you can easily tell if there are any local commits you have not pushed to Github.</p><p><img src="http://4.bp.blogspot.com/-ABVkJoYeq34/UN-VZ1ROTxI/AAAAAAAAI1Q/UNohWmIcPYQ/s1600/Emacs-git-log-short.png" alt="Emacs Magit log short listing - l l"></p><p>Selecting the long log output, <code>l L</code>, you see more details of each commit, including the files changed, author and timestamp.</p><p><img src="http://1.bp.blogspot.com/-0fxK4fEU8nQ/UN-KzcmzocI/AAAAAAAAI0M/jS9noFeIR5Q/s1600/Emacs-git-log-uptodate.png" alt="Emacs Magit log long output - l L"></p><p>To see the changes within a commit, move the cursor over a commit number in the log and press <code>space</code>.  This brings up another buffer which you can scroll through.  You don’t even need to switch to this new buffer as if you keep pressing <code>space</code> it will scroll through the text of the change.</p><p><img src="http://2.bp.blogspot.com/-H5qNZ0NxDu4/UN-OaayK6mI/AAAAAAAAI0w/qoJt89QCdik/s1600/Emacs-git-log-commit-details.png" alt="Emacs Magit Log - view the changes in a commit - l L space"></p><p>  The magit log also has a margin that shows the name and relative time of each commit.  This can be very useful information to have at hand, although it does take up more space in the buffer.</p><p><img src="/images/emacs-magit-log-toggle-margin-on.png" alt="Emacs Magit - Log margin on"></p><p>  To toggle the magit log margin, use <code>h</code> or <code>M-x magit-log-toggle-margin</code></p><p><img src="/images/emacs-magit-log-toggle-margin-off.png" alt="Emacs Magit - Log margin off"></p><h1 id="Comparing-Commits-diff-with-Magit"><a href="#Comparing-Commits-diff-with-Magit" class="headerlink" title="Comparing Commits (diff) with Magit"></a>Comparing Commits (diff) with Magit</h1><p>In the following example, the local repository is ahead of the Github repository by one commit.  The magit log can be used to compare commits.</p><p>Move the cursor over the first commit and press <code>.</code> (full stop).  Then put the cursor over the second commit and press <code>=</code>.</p><p><img src="http://2.bp.blogspot.com/-3yRc4uinS9Q/UOAkTMBO-EI/AAAAAAAAI1w/-zguUhcRcME/s1600/Emacs-git-log-short-commit-contents.png" alt="Emacs Magit - compare two commits using the short log - l l . ="></p><p>To exit buffer that opened the diff, simply press <code>q</code> in the Magit buffer.</p><h1 id="Summary-of-Magit-log"><a href="#Summary-of-Magit-log" class="headerlink" title="Summary of Magit log"></a>Summary of Magit log</h1><p>I tend to just use the short form of the log and compare commits every now and again.  If I havent pushed a few commits up to Github for a while, its a handy way to check if I should push and what I am pushing.</p><p>Of course if I write good commit messages and commit often to my local repo, then its much easier to tell what I am pushing from just the short log.</p><p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/emacs-logo.png&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;http://jr0cket.co.uk/2012/12/driving-git-with-emacs-pure-magic-with.html&quot;&gt;part one&lt;/a&gt; I showed how easy it is to version a project using Git from within Emacs, using the Magit package.  This time we look at the git log within Magit.&lt;/p&gt;
&lt;p&gt;Working with the log gives you a lot more detail about your changes, helps you compare local and remote repo commits.  All of which helps you understand when you should push your code.&lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/categories/emacs/"/>
    
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/tags/dev-tools/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="magit" scheme="http://jr0cket.co.uk/tags/magit/"/>
    
  </entry>
  
</feed>
