<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[jr0cket]]></title>
  <subtitle><![CDATA[community developer]]></subtitle>
  <link href="categories/dev-tools/atom.xml" rel="self"/>
  <link href="http://jr0cket.co.uk/"/>
  <updated>2022-01-02T20:20:15.310Z</updated>
  <id>http://jr0cket.co.uk/</id>
  
  <author>
    <name><![CDATA[John Stevenson]]></name>
    <email><![CDATA[john@jr0cket.co.uk]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Tweaking Light Table for a Great Clojure Experience]]></title>
    <link href="http://jr0cket.co.uk/2015/01/tweaking-light-table-for-a-great-clojure-experience.html"/>
    <id>http://jr0cket.co.uk/2015/01/tweaking-light-table-for-a-great-clojure-experience.html</id>
    <published>2015-01-03T22:27:09.000Z</published>
    <updated>2022-01-02T20:20:15.310Z</updated>
    <content type="html"><![CDATA[<img src="/images/lighttable-logo.png" class="img-thumbnail">
<p>  <a href="http://lighttable.com" target="_blank" rel="noopener">Light Table</a> provides a great development environment for Clojure, ClojureScript &amp; JavaScript.  With a few tweaks and some of the many plugins you can make Light Table do even more.  Here are a few of the tweaks and plugins I use for my development with Light Table.</p>
<a id="more"></a>
<h4 id="Ubuntu-Fonts"><a href="#Ubuntu-Fonts" class="headerlink" title="Ubuntu Fonts"></a>Ubuntu Fonts</h4><p>  The <a href="http://font.ubuntu.com/" target="_blank" rel="noopener">Ubuntu fonts</a> are very clear and easy on the eyes, so are great for coding with.  I use the Ubuntu Mono font for all my editors by adding the following line to my user behaviors</p>
<p>  Open the command panel in Light Table with <code>Ctrl-Space</code> and type <code>user behaviors</code>.  Then edit the file that opens and add the following line</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">:editor</span> <span class="symbol">:lt.objs.style/font-settings</span> <span class="string">"Ubuntu Mono"</span> <span class="number">16</span> <span class="number">1.2</span>]</span><br></pre></td></tr></table></figure>
<p>  When I run workshops or other demos I increase the font size to 20, to make the code easier to read from a distance.</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">:editor</span> <span class="symbol">:lt.objs.style/font-settings</span> <span class="string">"Ubuntu Mono"</span> <span class="number">20</span> <span class="number">1.2</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>You can use Ubuntu Fonts with operating systems other than Ubuntu by downloading the fonts from <a href="http://font.ubuntu.com/" target="_blank" rel="noopener">font.ubuntu.com</a></p>
</blockquote>
<h4 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a>Themes</h4><p>  The default theme for Light Table is pretty good, however my prefered Light Table font is called <em>Tommorow Night</em> and I configure my user behaviors to use this theme by adding the following line:</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">:editor</span> <span class="symbol">:lt.objs.style/set-theme</span> <span class="string">"tomorrow-night"</span>]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>There is also an Ubuntu theme plugin that I have just spotted, so I am trying that out although I want to tweak some of the colours before I make the switch.</p>
</blockquote>
<h4 id="Bracket-fun"><a href="#Bracket-fun" class="headerlink" title="Bracket fun"></a>Bracket fun</h4><p>From Light Table 0.7.0 onwards parens are not auto-closed anymore, so when you type <code>(</code> then you have to also type <code>)</code>.  Coming from Emacs, I find this limiting, so luckily you can add this behaviour back in by editing your user behaviors.  </p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">:app</span> <span class="symbol">:lt.objs.settings/pair-keymap-diffs</span>]</span><br></pre></td></tr></table></figure>
<h4 id="Emacs-keybindings"><a href="#Emacs-keybindings" class="headerlink" title="Emacs keybindings"></a>Emacs keybindings</h4><p>  The Emacs plugin is a wrapper around the Code Mirror keybindings for Emacs.  Installing the Emacs plugin with give you many of the Emacs keybindings you enjoy and you can easily customise them by changing the keybindings mapping in the plugin.</p>
<p>  See my previous post on how to use the <a href="http://localhost:4004/2015/01/clojure-with-lighttable-in-emacs-mode.html" target="_blank" rel="noopener">Emacs plugin with Light Table</a>. </p>
<h4 id="Git-Status-Bar"><a href="#Git-Status-Bar" class="headerlink" title="Git Status Bar"></a>Git Status Bar</h4><p>  The Git status bar plugin simply indicates the Git branch your current editors’ file is in, assuming it is under version control.</p>
<img src="/images/lighttable-plugin-git-status-bar.png" class="img-code">
<p>  Install using the plugin manager and restart Light Table (you may just be able to select “Reload App Behaviours” from the Light Table commands).  Then open a file under version control and you will see its Git branch in the right corner of the status bar (the bar at the bottom of Light Table).</p>
<blockquote>
<p>Git branch / status will only show for files that are in repositories whose root is in your workspace.</p>
</blockquote>
<h4 id="Gitlight"><a href="#Gitlight" class="headerlink" title="Gitlight"></a>Gitlight</h4><p>  Gitlight plugin provides a visual Git client that can stage and commit changes, push &amp; pull changes with remote repositories and show visual diffs of changes.  Install Gitlight from the Light Table plugin manager and restart Light Table (you may just be able to select “Reload App Behaviours” from the Light Table commands).</p>
<p>  Use Gitlight by opening the command panel and type <code>gitlight</code>, you will see a list of available commands</p>
<img src="/images/lighttable-gitlight-commands.png" class="img-code">
<p>  If you open a file from a project managed by git you can see the status of all the files in that project using the command <code>gitlight-status</code></p>
<img src="/images/lighttable-gitlight-status-window.png" class="img-code">  
<p>  If you select diff for any of the files in the project, you get a nice visual comparison of the changes between what is committed and your working copy.</p>
<img src="/images/lighttable-gitlight-diff-visual.png" class="img-code">    
<h4 id="Modific-show-changes-since-last-Git-commit"><a href="#Modific-show-changes-since-last-Git-commit" class="headerlink" title="Modific - show changes since last Git commit"></a>Modific - show changes since last Git commit</h4><p>  When you save a file, any changes you made since it was last commited to Git are marked by coloured lines at the left hand side of the editor window, also known as <em>gutter marks</em>. </p>
<img src="/images/lighttable-plugin-modific-example.png" class="img-code">
<blockquote>
<p>modific example with red, green and yellow highlights</p>
</blockquote>
<ul>
<li>Red    = lines have been deleted  </li>
<li>Green  = new lines have been added</li>
<li>Yellow = text that has be modified</li>
</ul>
<p>You can jump between changes using <code>Ctrl+Shift+PageUp/PageDown</code>, show the original version by putting the cursor on a changed line and hit <code>Ctrl+Alt+c</code> and revert a change by putting the cursor on a changed line and hit <code>Ctrl+Alt+r</code></p>
<p>  Install modific from the Light Table plugin manager and restart Light Table.  Then open a file from workspace project that is under version control.  Now any change you make will be highlighted.</p>
<h4 id="Plugins-to-try-next"><a href="#Plugins-to-try-next" class="headerlink" title="Plugins to try next"></a>Plugins to try next</h4><p>  There are lots of other plugins I have not tried yet.  Many plugins also provide additional language support.</p>
<p>  Here are a few plugins I plan to try next: </p>
<ul>
<li><a href="https://github.com/chadhq/slamhound-lt" target="_blank" rel="noopener">Slamhound</a> - refactor your Clojure namespace</li>
<li><a href="https://github.com/vgrichina/lt-howdoi" target="_blank" rel="noopener">howdoi</a> - pull in code solutions from the web</li>
<li><a href="https://github.com/joshuafcole/recall" target="_blank" rel="noopener">recall</a> - workspace Persistence </li>
<li><a href="https://github.com/bfabry/workspace-nav" target="_blank" rel="noopener">workspace nav</a> - Navigate the workspace view via the keyboard </li>
</ul>
<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>  Light Table provides a lot of great features out of the box, expecially for Clojure, ClojureScript and JavaScript development.  Using tweaks and plugins, Light Table is easy to tailor int a more personalised development experience.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/lighttable-logo.png" class="img-thumbnail">
<p>  <a href="http://lighttable.com" target="_blank" rel="noopener">Light Table</a> provides a great development environment for Clojure, ClojureScript &amp; JavaScript.  With a few tweaks and some of the many plugins you can make Light Table do even more.  Here are a few of the tweaks and plugins I use for my development with Light Table.</p>]]>
    
    </summary>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="lighttable" scheme="http://jr0cket.co.uk/tags/lighttable/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Anyone Can Deploy Your App With Heroku Button]]></title>
    <link href="http://jr0cket.co.uk/2014/08/anyone-can-deploy-your-app-with-heroku-button.html"/>
    <id>http://jr0cket.co.uk/2014/08/anyone-can-deploy-your-app-with-heroku-button.html</id>
    <published>2014-08-11T08:53:22.000Z</published>
    <updated>2022-01-02T20:20:15.290Z</updated>
    <content type="html"><![CDATA[<img src="/images/heroku-logo.png" class="img-thumbnail">
<p><a href="https://devcenter.heroku.com/articles/heroku-button" target="_blank" rel="noopener">Heroku Button</a> provides a quick &amp; easy way for anyone to deploy your apps, for free, with just a browser.  Simply <a href="https://devcenter.heroku.com/articles/heroku-button#creating-the-app-json-file" target="_blank" rel="noopener">create a manifest file for your app</a> and add the <a href="https://devcenter.heroku.com/articles/heroku-button#adding-the-heroku-button" target="_blank" rel="noopener">Heroku Button code</a> to your Github repository or Website.  Heroku takes care of the rest (server, database, deployment, scaling etc).  </p>
<p>Experience Heroku Button for yourself with our <a href="https://heroku.com/deploy?template=https://github.com/heroku/node-js-sample" target="_blank" rel="noopener">simple NodeJS app</a>. </p>
<a id="more"></a>
<p>Once you press the Heroku Button, you see a deployment page for you app.  The name, description and logo come from the <code>app.json</code> manifest file.</p>
<img src="/images/heroku-button-sample-nodejs.png" class="img-code">
<p>Once you press the <em>Deploy for Free</em> button, Heroku does the work and creates a new App for you live on the Internet</p>
<img src="/images/heroku-button-deploy-results.png" class="img-code">
<p>Now you can view your app as well as access your own copy of the code.</p>
<h1 id="Why-use-Heroku-Button"><a href="#Why-use-Heroku-Button" class="headerlink" title="Why use Heroku Button"></a>Why use Heroku Button</h1><p>Here are just a few thoughts about why you may want to use Heroku Button.</p>
<h2 id="App-Creators"><a href="#App-Creators" class="headerlink" title="App Creators"></a>App Creators</h2><p>Its easy to show off your work to prospective employers so they can be quickly impressed by your skills.  You can also share your apps with your friends and co-workers as well as making it easy to test your app at any time.</p>
<h2 id="Framework-developers"><a href="#Framework-developers" class="headerlink" title="Framework developers"></a>Framework developers</h2><p>Share demos that allow developers to understand the benefits of your framework quickly and show off what they could create.</p>
<h2 id="Hackathon-teams"><a href="#Hackathon-teams" class="headerlink" title="Hackathon teams"></a>Hackathon teams</h2><p>Provide an easy way for judges to play around with your app, so they can get a better appreciation of what you have created</p>
<h1 id="Creating-your-first-button"><a href="#Creating-your-first-button" class="headerlink" title="Creating your first button"></a>Creating your first button</h1><p>Creating an Heroku Button for your app is very simple and has 2 parts to it:</p>
<p>1) Create an app manifest file for your project - <code>app.json</code><br>2) Add the Heroku Button to your Github Repository or any website (code provided)</p>
<p>The only requirement is that your code be available via a public repository on Github or other git repository  </p>
<h2 id="Create-an-app-manifest-file"><a href="#Create-an-app-manifest-file" class="headerlink" title="Create an app manifest file"></a>Create an app manifest file</h2><p>Create an <code>app.json</code> file in the root of your project.  This file contains the name, description and an image link for your app (eg. a logo).  This should provide people with an understanding of what they are going to deploy.</p>
<p>The <code>app.json</code> file should also contain any configuration (environment) variables and Heroku addons (databases, etc) your app needs.</p>
<h2 id="Example-manifest-file"><a href="#Example-manifest-file" class="headerlink" title="Example manifest file"></a>Example manifest file</h2><p>The Heroku example NodeJS app is very easy to define in the manifest file, as it does not use any Heroku addons or require any environment variables.  The app itself is assembled on Heroku using Node Pakage manager and <a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs" target="_blank" rel="noopener">Heroku support for NodeJS apps</a>.</p>
<figure class="highlight json"><figcaption><span>app.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Node.js Sample"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"A barebones Node.js app using Express 4"</span>,</span><br><span class="line">  <span class="attr">"repository"</span>: <span class="string">"https://github.com/heroku/node-js-sample"</span>,</span><br><span class="line">  <span class="attr">"logo"</span>: <span class="string">"https://node-js-sample.herokuapp.com/node.svg"</span>,</span><br><span class="line">  <span class="attr">"keywords"</span>: [<span class="string">"node"</span>, <span class="string">"express"</span>, <span class="string">"static"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Adding-Heroku-Button-for-your-app"><a href="#Adding-Heroku-Button-for-your-app" class="headerlink" title="Adding Heroku Button for your app"></a>Adding Heroku Button for your app</h2><p>You could just use a URL link to deploy you app, however, Heroku has provided you with a button image and all the code you need to use it.  Using a button makes it very obvious to see that your app is easily deployable.</p>
<p><strong>Markdown</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![Deploy my app to Heroku</span>](<span class="link">https://www.herokucdn.com/deploy/button.png</span>)]</span><br><span class="line">  (https://heroku.com/deploy?template=https://github.com/heroku/node-js-sample)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>If you expect people to fork your Github repository and want them to deploy their own versions of the code, you can omit the template query parameter (everything after the <code>?</code>).  Heroku Button will infer its the repository the button was clicked on if there is no parameter.</p>
</blockquote>
<p><strong>HTML</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://heroku.com/deploy?template=https://github.com/heroku/node-js-sample"</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://www.herokucdn.com/deploy/button.png"</span> <span class="attr">alt</span>=<span class="string">"Deploy my App to Heroku"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>If you are using HTML you can of course add any styles you want to the button using CSS.</p>
</blockquote>
<h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Heroku Button enables anyone to play with your apps, encouraging them to give you meaningful feedback and showing them what they can create if they get involved with your project.</p>
<p>If you create an Heroku Button with your app, please tweet about it using <a href="https://twitter.com/search?q=%23herokubutton" target="_blank" rel="noopener">#herokubutton</a>.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/heroku-logo.png" class="img-thumbnail">
<p><a href="https://devcenter.heroku.com/articles/heroku-button" target="_blank" rel="noopener">Heroku Button</a> provides a quick &amp; easy way for anyone to deploy your apps, for free, with just a browser.  Simply <a href="https://devcenter.heroku.com/articles/heroku-button#creating-the-app-json-file" target="_blank" rel="noopener">create a manifest file for your app</a> and add the <a href="https://devcenter.heroku.com/articles/heroku-button#adding-the-heroku-button" target="_blank" rel="noopener">Heroku Button code</a> to your Github repository or Website.  Heroku takes care of the rest (server, database, deployment, scaling etc).  </p>
<p>Experience Heroku Button for yourself with our <a href="https://heroku.com/deploy?template=https://github.com/heroku/node-js-sample" target="_blank" rel="noopener">simple NodeJS app</a>. </p>]]>
    
    </summary>
    
      <category term="heroku" scheme="http://jr0cket.co.uk/tags/heroku/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Staging Patches for Cleaner Git Commits]]></title>
    <link href="http://jr0cket.co.uk/2014/07/staging-patches-with-git-for-cleaner-commits.html"/>
    <id>http://jr0cket.co.uk/2014/07/staging-patches-with-git-for-cleaner-commits.html</id>
    <published>2014-07-15T21:58:36.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    <content type="html"><![CDATA[<img src="/images/git-logo.png" class="img-thumbnail">
<p>Some times you work on your code or configuration files and realise you have made more changes than sensibly fit into one commit.  Using patches you can easily select only the changes want rather than adding all the changes in a file.  You dont even have to create a seperate patch file.</p>
<a id="more"></a>
<p>You can use the git via the interactive mode <code>git add -i</code>, however its just as easy to use the command <code>git add --patch</code> or its short form <code>git add -p</code>.  The <code>--patch</code> or <code>-p</code> option allows you to select what git calls <em>hunks</em>, lines git sees as a change within a file.  A hunk may be a change to one line or changes across several lines grouped together. </p>
<pre><code>git add -p .
</code></pre><p>This command will prompt to you accept each <em>hunk</em> through all the files that have modifications since the last commit.</p>
<p>If you just want to pick out changes from a specific file or collection of files you can narrow the scope by specifying the filename or filename pattern</p>
<pre><code>git add -p filename
git add -p *.md 
git add -p config.*
</code></pre><h1 id="An-example"><a href="#An-example" class="headerlink" title="An example"></a>An example</h1><p>In this example there are several lines of changes in the <code>article.styl</code> file.  Using the <code>git add -p</code> command we are shown each <em>hunk</em> in turn as a diff, so we can compare the current version with the changes in the <em>hunk</em>.  We then decide if we want to add the changed lines or not.  </p>
<p>We say yes to the first <em>hunk</em> and no to the second.</p>
<img src="/images/hexo-theme-git-staging-patches.png" class="img-code">
<p>Once we have added or ingnored all the <em>hunks</em> in the file the interactive staging ends.  If we are ready we can then do a commit as normal.</p>
<h1 id="Splitting-the-hunks"><a href="#Splitting-the-hunks" class="headerlink" title="Splitting the hunks"></a>Splitting the hunks</h1><p>Sometimes git chooses hunks that include too many changes.  If we see a hunk we want to break down during the interactive staging, we can select the <code>s</code> option.  We are then shown the same <em>hunk</em> aft it has been split.</p>
<p>In the following example, our editor has added a new line to the file that we added a twitter account to.  We only want to add the twitter account, so split the hunk to get the twitter line as its own <em>hunk</em>.</p>
<p>Then we add the <em>hunk</em> with the twitter change in it by selecting <code>y</code> and do not include the new line change by skipping the next <em>hunk</em> by pressing <code>n</code>.</p>
<img src="/images/git-staging-interactive-split-hunk.png" class="img-code">
<h1 id="More-Interactive-Staging-options"><a href="#More-Interactive-Staging-options" class="headerlink" title="More Interactive Staging options"></a>More Interactive Staging options</h1><p>There are many more options to help you when your are staging changes interactively.  Using the <code>?</code> key at any time during interactive staging will show you a brief description of those options.</p>
<img src="/images/git-staging-interactive-options.png" class="image-code">
<p>For more detailed descriptoin of interactive staging and the options available, see the git manpages via the command <code>git help add</code> or <a href="http://git-scm.com/docs/git-add" target="_blank" rel="noopener">git add documentation online</a>.</p>
<h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>By staging patches I can very easily see the exact changes I am assembling for my next commit.  I can then include only the code &amp; configuration changes that are ready to be part of the next commit.</p>
<p>Using this patch technique for staging avoids unstaging files (git reset -soft), editing them and then adding them again.  That is a real pain.</p>
<p>And finally, staging patches keeps my commits nice and simple and focused.  I get a detailed and accurate history of my changes and that makes its really easy for others to merge or cherry-pick my commits.</p>
<p>Read the <a href="http://git-scm.com/book/en/Git-Tools-Interactive-Staging" target="_blank" rel="noopener">Git-scm guide on Interactive Staging</a> if you want to see more tooling around this topic.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/git-logo.png" class="img-thumbnail">
<p>Some times you work on your code or configuration files and realise you have made more changes than sensibly fit into one commit.  Using patches you can easily select only the changes want rather than adding all the changes in a file.  You dont even have to create a seperate patch file.</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Managing Hexo Blog Content With Git Submodules]]></title>
    <link href="http://jr0cket.co.uk/2014/05/managing-hexo-blog-content-with-git-submodules.html"/>
    <id>http://jr0cket.co.uk/2014/05/managing-hexo-blog-content-with-git-submodules.html</id>
    <published>2014-05-27T06:09:44.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    <content type="html"><![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p> You can use Git to manage version of your content effectively.  You can also use Git to manage any changes you make to the theme you use.</p>
<p>Rather than keep all these seperate changes in one repository, you can use Git submodules to manage your theme and content changes seperately.</p>
<a id="more"></a>
<blockquote>
<p>In have detailed how I used <a href="/hexo/using-git-submodules-for-custom-hexo-theme.html">Git Submodules for managing content seperately from a custom theme</a> and how to <a href="/2014/04/getting-started-with-hexo---a-modern-static-site-generator/">get started with Hexo</a></p>
</blockquote>
<img src="https://lh3.googleusercontent.com/-VuoPUgPuNV8/U4uIHw5YjoI/AAAAAAAAOTs/7PF8HvWrwIQ/w320-h240-no/git-submodules-concept.png" class="img-code">
<p>Thank you<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/hexo-logo.png" class="img-thumbnail">
<p> You can use Git to manage version of your content effectively.  You can also use Git to manage any changes you make to the theme you use.</p>
<p>Rather than keep all these seperate changes in one repository, you can use Git submodules to manage your theme and content changes seperately.</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://jr0cket.co.uk/tags/hexo/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git Submodules Pros and Cons]]></title>
    <link href="http://jr0cket.co.uk/2014/05/git-submodules-pros-and-cons.html"/>
    <id>http://jr0cket.co.uk/2014/05/git-submodules-pros-and-cons.html</id>
    <published>2014-05-26T14:14:42.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    <content type="html"><![CDATA[<img src="/images/git-logo.png" class="img-thumbnail">
<p>Git is the version control system of choice by most developers, however when it comes to Git Submodules there is some contention as to their value.  I have used them successfully and when you understand where they fit in you can use them to benefit your own projects too.</p>
<p>I’ll explain what Git Submodules as well as why some developers are using them and some developers warn you not to.</p>
<a id="more"></a>
<h1 id="Git-Submodules-Overview"><a href="#Git-Submodules-Overview" class="headerlink" title="Git Submodules Overview"></a>Git Submodules Overview</h1><img src="/images/git-submodules-abstract.png" class="img-topic">
<p>A submodule appears to be just a subdirectory of another git repository.  Actually its a full and seperate git repository itself with its own commit history. </p>
<p>Submodules are not clones or branches of a single repository and I would advise against merging submodules into the main repository.</p>
<p>You can have many submodules within a git repository and even have submodules in a submodule.</p>
<p>Submodules are useful if you have a code or content in one git repository that you want to use with several other git managed projects, yet you still want to keep the change history seperate.  For example, you may be using a library that is under active development and you need to develop you code along with any changes.</p>
<p>Git Submodules allow you to share two or more repositories as though they were one.  Each repository maintains its own seperate change history and submodules are updated independently of the main repository.  When you clone or pull a repository with a submodule, the repository has a link to where to get the submodle code from.</p>
<h1 id="My-blog-A-simple-example-of-Git-Submodules"><a href="#My-blog-A-simple-example-of-Git-Submodules" class="headerlink" title="My blog: A simple example of Git Submodules"></a>My blog: A simple example of Git Submodules</h1><img src="/images/hexo-submodules-theme-devguides.png" class="img-topic">
<p>I use Hexo.io, a static site generator, to create this blog you are reading.  I create all my content in markdown and push it to a github repository as a backup.  The generated site is also deployed as a Github Pages site.</p>
<p>I started using a Git Submodule with my project as I wanted to make significant changes to the default theme that Hexo uses.  However, I didnt want to add the theme or my changes to the repository I am managing all my content, as I dont want to tie the content to a particular platform.</p>
<p>So by forking the Hexo defalut theme into a seperate repository, I can then add the theme repository as a submodule of my content repository.  I can create a history of changes to the theme and roll back if there are bugs without having to worry about dropping content changes.</p>
<p>I also have an existing repository for a series of developer guides I created, which I can also add as a sub-module and still keep that repository seperate for those who wish to only work with my guides (and not my full content).  </p>
<h2 id="Prezto-A-bigger-example-of-submodules-in-actions"><a href="#Prezto-A-bigger-example-of-submodules-in-actions" class="headerlink" title="Prezto: A bigger example of submodules in actions"></a>Prezto: A bigger example of submodules in actions</h2><p>I use a project calle Prezto which provides a great setup for using Zsh.  The Prezto project pulls in several other projects, each of which configures specific features of Zsh.  Rather than pull all the code into one repository, submodules means that updates from the other projects are easily incorporated into the main Prezto project.</p>
<h1 id="Git-Submodules-usage"><a href="#Git-Submodules-usage" class="headerlink" title="Git Submodules usage"></a>Git Submodules usage</h1><p>To start using git submodules you first need a Git repository, this can be a new repository or an existing one.  Lets call this the <em>main repository</em>.</p>
<p>In the root of the main repository, you add a submodule using the <code>git submodule add</code> command as follows:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git submodule  add -b &lt;branch&gt; --name &lt;name&gt;  &lt;repository&gt;</span><br><span class="line"></span><br><span class="line">git submodule add &lt;repository-url&gt; &lt;sub-directory-name&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>In the man repository you can now see a directory called … [TODO: Is the directory named after <name> ?]</name></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] status [--cached] [--recursive] [--] [&lt;path&gt;...]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] init [--] [&lt;path&gt;...]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] update [--init] [--remote] [-N|--no-fetch]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] summary [--cached|--files] [(-n|--summary-limit) &lt;n&gt;]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] sync [--] [&lt;path&gt;...]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule [--quiet] foreach [--recursive] &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure>
<p>To see the full list of options, please read the <a href="http://git-scm.com/docs/git-submodule" target="_blank" rel="noopener">Git Submodules onlne man pages</a>.</p>
<h1 id="Reasons-not-to-use-Git-Submodules"><a href="#Reasons-not-to-use-Git-Submodules" class="headerlink" title="Reasons not to use Git Submodules"></a>Reasons not to use Git Submodules</h1><p>Git Submodules add complexity to your version control system and you should ensure using Submodules is more of a benefit than that complexity.  If you ever plan on merging submodules into the main repository, this is possible but its probably better to not use submodules in the first place.</p>
<h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Git Submodules are a great way to distribute several repositories all as one.  Each Submodule should be treated as a completely seperate repository to get the most sence out of using Git Submodules.  Take the time to learn how to use Submodules and you will find them easy to use and very helpful in the right situations.</p>
<ul>
<li><a href="http://git-scm.com/book/en/Git-Tools-Submodules" target="_blank" rel="noopener">Git-scm: Git tools - submodules</a></li>
<li><a href="http://git-scm.com/docs/git-submodule" target="_blank" rel="noopener">Git-scm: Git Submodules man page</a></li>
<li><a href="http://blogs.atlassian.com/2013/03/git-submodules-workflows-tips/" target="_blank" rel="noopener">Atlassian: Git Submodule workflow tips</a></li>
<li><a href="http://git-scm.com/docs/git-submodule" target="_blank" rel="noopener">Git Submodules onlne man pages</a></li>
</ul>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/git-logo.png" class="img-thumbnail">
<p>Git is the version control system of choice by most developers, however when it comes to Git Submodules there is some contention as to their value.  I have used them successfully and when you understand where they fit in you can use them to benefit your own projects too.</p>
<p>I’ll explain what Git Submodules as well as why some developers are using them and some developers warn you not to.</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sublime Text on Ubuntu]]></title>
    <link href="http://jr0cket.co.uk/2013/09/sublime-text-on-ubuntu.html.html"/>
    <id>http://jr0cket.co.uk/2013/09/sublime-text-on-ubuntu.html.html</id>
    <published>2013-09-03T11:32:00.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-zZtRA_8X4Xg/UiXECID9V5I/AAAAAAAAK9s/ucg-FQrgWso/s1600/sublime-text-screenshot.png" class="img-thumbnail">
<p><a href="http://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text</a>&nbsp;is a really popular text editor will great language support and a lot of plugin features that are geared towards software developers.</p>
<p>Although I’m usually in Emacs, lots of people have asked me how best to set Sublime Text on Ubuntu, so here is my prefered method.</p>
<a id="more"></a>
<h2 id="Download-Sublime-Text"><a href="#Download-Sublime-Text" class="headerlink" title="Download Sublime Text"></a>Download Sublime Text</h2><p>As Sublime is not part of the Ubuntu package management system (apt-get), it requires a manual download and install. &nbsp;Download the latest version from the <a href="http://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text front page</a> (it should give you a button specific to the OS you are currently using, i.e. Ubuntu). </p>
<p>The download will be an archive file like zip but using the Unix commands tar and bzip2.</p>
<h2 id="Extract-the-Sublime-Text-archive"><a href="#Extract-the-Sublime-Text-archive" class="headerlink" title="Extract the Sublime Text archive"></a>Extract the Sublime Text archive</h2><p>You can extract the whole archive by right-clicking on the file in the file browser (nautilus) and selecting <em>Extract here</em></p>
<blockquote>
<p>You can also double clicking and selecting the Extract button when the archive manager app opens or use the following command in a terminal: tar jvxf “Sublime Text 2.0.2 x64.tar.bz2”</p>
</blockquote>
<h2 id="Install-Sublime-Text-in-opt"><a href="#Install-Sublime-Text-in-opt" class="headerlink" title="Install Sublime Text in /opt"></a>Install Sublime Text in /opt</h2><p>I usually place 3rd party software in the folder <code>/opt</code> although you could use <code>/usr/local</code>.</p>
<blockquote>
<p>You just create an apps folder in your own home directory if you use only one login account with Ubuntu.</p>
</blockquote>
<p>Create a &nbsp;folder to contain the Sublime Text app using the following command in a terminal: </p>
<pre><code>sudo mkdir /opt/sublime
</code></pre><blockquote>
<p>I am assuming that we will download new versions occasionally and have other apps installed in /opt.</p>
</blockquote>
<p>Move the folder and all its contents extracted from the sublime text archive file:</p>
<pre><code>sudo mv ~/Downloads/Sublime\ Text\ 2 &amp;nbsp;/opt/sublime
</code></pre><p>Create a symbolic link called <code>current</code> that points to the folder you have just moved. </p>
<pre><code>ln -s /opt/sublime/Sublime\ Text\ 2 &amp;nbsp;/opt/sublime/current
</code></pre><blockquote>
<p>If you do upgrade the version of Sublime, simply download the new version and extract it into the /opt/sublime folder, then just delete the symbolic link and create a new one to point to the new folder.</p>
</blockquote>
<h2 id="Add-Sublime-Text-to-path-to-run-it-from-anywhere"><a href="#Add-Sublime-Text-to-path-to-run-it-from-anywhere" class="headerlink" title="Add Sublime Text to path to run it from anywhere"></a>Add Sublime Text to path to run it from anywhere</h2><p>Rather than add the sublime folder to the path and making it messy, I create a little bash script that simply calls sublime. &nbsp;Create a new file by launching an editor, use <span style="font-family: Courier New, Courier, monospace;">gksudo</span> if you are launching a graphical editor as the file will be created in the protected part of the file system:</p>
<pre><code>gksudo gedit /usr/local/bin/sublime
</code></pre><p>Add the following script to this file that will change to the folder where the sublime binaries live and then run its usual starup script. &nbsp;The <code>$*</code> ensures that any parameters such as file names you pass to the script are passed on to the sublime start-up script.</p>
<pre><code>#!/bin/sh
cd /opt/sublime/current
./sublime_text $* &amp;
</code></pre><p>Save the file and close the editor.  You have make a new script called sublime on the executable path. &nbsp;However, we still need to give this new script permission to be executed.</p>
<p>Use the following command in a terminal window to make the bash script file executable for every user:</p>
<pre><code>sudo chmod a+x /usr/local/bin/sublime
</code></pre><p>You can now call sublime from anywhere and even call it with a file name or path/file name arguments.</p>
<p>Enjoy Sublime text and if you find its not for you there is always Emacs :)</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://4.bp.blogspot.com/-zZtRA_8X4Xg/UiXECID9V5I/AAAAAAAAK9s/ucg-FQrgWso/s1600/sublime-text-screenshot.png" class="img-thumbnail">
<p><a href="http://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text</a>&nbsp;is a really popular text editor will great language support and a lot of plugin features that are geared towards software developers.</p>
<p>Although I’m usually in Emacs, lots of people have asked me how best to set Sublime Text on Ubuntu, so here is my prefered method.</p>]]>
    
    </summary>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="sublimetext" scheme="http://jr0cket.co.uk/tags/sublimetext/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hey Prezto - Zsh for Command Line Heaven]]></title>
    <link href="http://jr0cket.co.uk/2013/09/hey-prezto-zsh-for-command-line-heaven.html"/>
    <id>http://jr0cket.co.uk/2013/09/hey-prezto-zsh-for-command-line-heaven.html</id>
    <published>2013-09-02T15:11:00.000Z</published>
    <updated>2022-01-02T20:20:15.302Z</updated>
    <content type="html"><![CDATA[<img src="http://3.bp.blogspot.com/-OCKvFRcGPLk/UTUY7NXSS6I/AAAAAAAAJI0/RJT6XMB05I4/s1600/Zshell-silver-rotating.gif" class="img-thumbnail">
<p>Using the command line is a powerful and quick way of doing many developer tasks.  The <a href="http://en.wikipedia.org/wiki/Shell_(computing" target="_blank" rel="noopener">command line shell</a>) for Linux &amp; MacOSX is a whole world apart from the very basic experience of DOS. Zsh (Z Shell) makes the Linux &amp; MacOSX shell experience even better.</p>
<p>I learnt to use the command line with bash, the default Linux shell.  Although as soon as you play with zsh for a few minutes, you quickly get hooked.  zsh gives you <a href="http://www.acm.uiuc.edu/workshops/zsh/why.html" target="_blank" rel="noopener">lots of features</a>, including:</p>
<ul>
<li>auto-completion on steroids</li>
<li>command relative completions</li>
<li>navigable completions list</li>
<li>amazingly fast completions</li>
<li>auto corrections for when your fingers slip</li>
<li>custom prompts, a right hand prompt and themes</li>
<li>shared history over all terminals</li>
<li>history sub-string search</li>
</ul>
<p>You can add libraries to bash and configure it to do these things as well, although I havent seen an projects to help you quickly do so.</p>
<p>Still not convinced, then take a look at Brendan Rapps presentation “<a href="http://www.slideshare.net/jaguardesignstudio/why-zsh-is-cooler-than-your-shell-16194692" target="_blank" rel="noopener">Why Zsh is cooler than your shell</a>“</p>
<h1 id="Get-going-with-Zsh"><a href="#Get-going-with-Zsh" class="headerlink" title="Get going with Zsh"></a>Get going with Zsh</h1><p>You can just install zsh and configure it yourself.  On the Mac, Zsh is installed by default.  On Ubuntu its available in the software center or via the command line:</p>
<pre><code>sudo apt-get install zsh
</code></pre><p>Configuring Zsh yourself would take a bit of discovery, so I prefer to use something a bit more out of the box.  Luckily there are two projects to choose from that configure everything for you.</p>
<h1 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a></h1><p>This is a popular project that provides an out of the box zsh setup and its really easy to use.  However, something is making it a little slow when I tried it on the MacBook Pro and Linux.  Comments around this project suggest its written in more of a bash way than zsh, so that may be the reason for a performance slow down.</p>
<p>After a few days I decided to remove oh-my-zsh and try an alternative project.</p>
<h1 id="Prezto"><a href="#Prezto" class="headerlink" title="Prezto"></a><a href="https://github.com/sorin-ionescu/prezto" target="_blank" rel="noopener">Prezto</a></h1><p>Prezto has been rewritten by the author who wanted to achieve a good zsh setup by ensuring all the scripts are making use of zsh syntax.  It has a few more steps to install but should only take a few minutes extra.</p>
<h2 id="Installing-Prezto"><a href="#Installing-Prezto" class="headerlink" title="Installing Prezto"></a>Installing Prezto</h2><p>In the root of your home account, clone the prezto github project using any git client.</p>
<pre><code>git clone --recursive https://github.com/sorin-ionescu/prezto.git &quot;${ZDOTDIR:-$HOME}/.zprezto&quot;
</code></pre><blockquote>
<p>If you don’t have a Git client either download it from the <a href="http://git-scm.com/" target="_blank" rel="noopener">git-scm website</a> or use the Ubuntu package manager to install the package called git (<code>sudo apt-get install git</code>).</p>
</blockquote>
<p>All prezto files are contained within a foloder called <code>.zprestorc</code> in the root of your home folder.  In order to use Prezto configuration for zsh, symlinks are used.</p>
<blockquote>
<p>The project gives you a script to run although this didn’t work for me and I just created the symlinks manually.</p>
</blockquote>
<h2 id="Create-the-symlinks-manually"><a href="#Create-the-symlinks-manually" class="headerlink" title="Create the symlinks manually"></a>Create the symlinks manually</h2><p>In the root of your home folder, create the sym-links using the Unix symbolic link command as follows:</p>
<pre><code>ln -s ~/.zprezto/runcoms/zlogin ~/.zlogin
ln -s ~/.zprezto/runcoms/zlogout ~/.zlogout
ln -s ~/.zprezto/runcoms/zpreztorc ~/.zpreztorc
ln -s ~/.zprezto/runcoms/zprofile ~/.zprofile
ln -s ~/.zprezto/runcoms/zshenv ~/.zshenv
ln -s ~/.zprezto/runcoms/zshrc ~/.zshrc
</code></pre><p>Check that the links have all been created successfully.  Type the command ls -la and you should see the following in your terminal (although possibly without colour)</p>
<img src="http://3.bp.blogspot.com/-mdwsHb5FkGg/UiSqw8hI1mI/AAAAAAAAK7I/TYPgGmWWuBA/s1600/zsh-symlinks.png" class="img-code">
<p>zprezto uses a series of symlinks to configure zsh with lots of nice defaults</p>
<blockquote>
<p>I have been thinking of changing the use of sym-links and just have the specific files include the Prezto files first, then add any customisations required.  This would help to keep my changes in place when I updated Prezto.</p>
</blockquote>
<h1 id="Run-zsh"><a href="#Run-zsh" class="headerlink" title="Run zsh"></a>Run zsh</h1><p>Now you have zsh configured with prezto, its time to try it out.  Open a terminal window and run zsh using the command:</p>
<pre><code>zsh
</code></pre><p>Set zsh as the default shell</p>
<p>To set zsh as our default shell then run the change shell (chsh) command:</p>
<pre><code>chsh -s /usr/bin/zsh
</code></pre><p>On Ubuntu, this didn’t seem to work.  I also had to configure Gnome Terminal to run zsh as a custom command.</p>
<img src="http://4.bp.blogspot.com/-t5Pv8i_1gCI/UTUV_FUoinI/AAAAAAAAJIs/-zIeS__lNeo/s1600/terminal-zsh-custom-command.png" class="img-code">
<p>Now when I open a new terminal window or tab, the command line is running Zsh.</p>
<h1 id="Showing-Git-branch-by-switching-on-zsh-modules"><a href="#Showing-Git-branch-by-switching-on-zsh-modules" class="headerlink" title="Showing Git branch by switching on zsh modules"></a>Showing Git branch by switching on zsh modules</h1><p>Several of the prezto zsh modules are switched on by default, however Git is not one of them.  If you want to see the current branch you are working on in Git then add the git module to the zprezto configuration.</p>
<p>Edit the file <code>~/.zprezto</code></p>
<p>Find the section in the file that defined modules to load and add a line with the git module.  Here is what that section would look like once you have edited it.</p>
<pre><code># Set the Prezto modules to load (browse modules).
# The order matters.
zstyle &apos;:prezto:load&apos; pmodule \
  &apos;environment&apos; \
  &apos;terminal&apos; \
  &apos;editor&apos; \
  &apos;history&apos; \
  &apos;directory&apos; \
  &apos;spectrum&apos; \
  &apos;utility&apos; \
  &apos;completion&apos; \
  &apos;git&apos; \
  &apos;archive&apos; \
  &apos;prompt&apos;
</code></pre><h1 id="Creating-my-own-prezto-theme"><a href="#Creating-my-own-prezto-theme" class="headerlink" title="Creating my own prezto theme"></a>Creating my own prezto theme</h1><p>The default sorin them is okay, but takes up a bit much room on the prompt than I like.</p>
<img src="http://3.bp.blogspot.com/-hi59uLe-cTE/UTUa41BodSI/AAAAAAAAJI8/ZoDa9OxOmvY/s1600/zpresto-default-theme.png" class="img-code">
<p>I created my own theme as a slight variation from the default sorin theme.  I removed &gt;&gt;&gt; characters used to separate the prompt from commands as they seemed largely unnecessary.  As I only use git then I didnt feel the need to specify the version control tool used (eg. git, mercurial).  Finally, I changed the colours round a little.</p>
<p>I kept the right hand prompt as part of my theme. Its a quick way to show the status of any changes in your local git repository.<br><img src="http://1.bp.blogspot.com/-Q7quGwje_w4/UTUoVbZZRmI/AAAAAAAAJJU/f4udzvNaOnM/s1600/zprezto-prompt-jr0cket-context-specific.png" class="img-code"></p>
<p>The prompt shows the current folder name, with any parent folders abbreviated to their initial.  The path up to and including the home folder is represented by <code>~</code>.</p>
<p>When you enter a folder managed by git, then the right hand prompt kicks in and shows icons representing the current git status.  Whilst in the folder you can see if you have changes that untracked, deleted or stage.  You can easily tell if you are behind or ahead of the default remote repository.  You can also see if you have some changes stashed away.</p>
<p>My zsh theme is available as part of my <a href="https://github.com/jr0cket/dot-files-ubuntu" target="_blank" rel="noopener">dot-files-ubuntu</a> or <a href="https://github.com/jr0cket/dot-files-macosx" target="_blank" rel="noopener">dot-files-macosx</a> repositories.</p>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Whist <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a> is really simple to use, the <a href="https://github.com/sorin-ionescu/prezto" target="_blank" rel="noopener">Prezto</a> project seems to have maintainters with greater experience of zsh.</p>
<p>On Ubuntu I am using prezto and although it is a bit more involved to understand at first, it runs really really fast.  The only thing I wanted to change with prezto was the theme, so not really that much to learn.</p>
<p>Everything that I was doing with oh-my-zsh seems to work in Prezto without adding in extra plugins to the Zsh configuration.</p>
<p>So although oh-my-zsh is a great project, I’d recommend using Prezto to have a great Zsh experience.  Take a look at my dotfiles on github (<a href="https://github.com/jr0cket/dot-files-ubuntu" target="_blank" rel="noopener">dot-files-ubuntu</a> or <a href="https://github.com/jr0cket/dot-files-macosx" target="_blank" rel="noopener">dot-files-macosx</a>) to see how I created a custom theme.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://3.bp.blogspot.com/-OCKvFRcGPLk/UTUY7NXSS6I/AAAAAAAAJI0/RJT6XMB05I4/s1600/Zshell-silver-rotating.gif" class="img-thumbnail">]]>
    </summary>
    
      <category term="zsh" scheme="http://jr0cket.co.uk/tags/zsh/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Add Colour to Your Clojure REPL With Leiningen and ASCII Codes]]></title>
    <link href="http://jr0cket.co.uk/2013/08/add-colour-to-your-clojure-repl-with.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/add-colour-to-your-clojure-repl-with.html.html</id>
    <published>2013-08-30T08:18:00.000Z</published>
    <updated>2022-01-02T20:20:15.290Z</updated>
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-pc_s02W-R9w/TzFLaS-sQcI/AAAAAAAAEbU/xWhovBljYE8/s1600/clojure-logo-with-name.png" class="img-topic"> 
<p>Sometimes its the little things that make a difference and after seeing how easily customise the Clojure REPL prompt with <a href="http://leiningen.org/" target="_blank" rel="noopener">Leiningen</a> I had a little hack with words, symbols and colours and came up with something nicer (in my opinion).</p>
<a id="more"></a>
<h1 id="The-standard-Clojure-REPL-with-Leiningen"><a href="#The-standard-Clojure-REPL-with-Leiningen" class="headerlink" title="The standard Clojure REPL with Leiningen"></a>The standard Clojure REPL with Leiningen</h1><p>The standard Clojure REPL prompt is practical, yet a little mundane to look at.  As we see in the screenshot it gives a clear indication of the namespace we are working in, but little else.  If you have other REPLs, run time environments or terminal sessions going then its all too easy to enter your code at the wrong prompt.</p>
<img src="http://2.bp.blogspot.com/-fn8ros3ocTY/UiBGuI35T-I/AAAAAAAAK6Y/eM_FIKKJ3Qc/s1600/clojure-repl-standard-prompt-and-welcome.png" class="img-code"> 
<h1 id="My-design-for-a-colourful-Clojure-REPL"><a href="#My-design-for-a-colourful-Clojure-REPL" class="headerlink" title="My design for a colourful Clojure REPL"></a>My design for a colourful Clojure REPL</h1><p>To make it clear that we are in a Clojure REPL I changed the colour of the namespace to blue, wrapped with green brackets (blue and green are the colours in the Clojure logo).  I also change the symbol used in the font to be the  <code>cλ</code> symbol.  I use the combination of c-lambda to denote this is the Clojure implementation of a Lamdba oriented language (is that such a thing or did I just make that up?).  This c-lambda symbol is the same I use to <a href="http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html">denote Clojure-mode and nrepl-mode in Emacs</a>.</p>
<img src="http://2.bp.blogspot.com/-m8g6eMFUuAM/UiBSzLOObHI/AAAAAAAAK64/hIUMUCXiGl4/s1600/clojure-repl-definition-and-emacs-mode-line-customisations.png" class="img-code"> 
<blockquote>
<p>See my article on <a href="http://jr0cket.co.uk/2013/01/tweeking-emacs-modeline-for-clojure.html">Emacs mode line customisation</a> to create </p>
</blockquote>
<h1 id="Configuring-the-Clojure-REPL-prompt-with-Leinginen"><a href="#Configuring-the-Clojure-REPL-prompt-with-Leinginen" class="headerlink" title="Configuring the Clojure REPL prompt with Leinginen"></a>Configuring the Clojure REPL prompt with Leinginen</h1><img src="http://1.bp.blogspot.com/-rxD8__T6tzA/TzFNNTKKLwI/AAAAAAAAEb8/k10iLxa3I70/s1600/leiningen-face.jpg" class="img-code">
<p>To configure your prompt you can edit the <code>project.clj</code> file in the root of a Clojure project and add the keyword <code>:repl-options</code> with a set containing your customisations.</p>
<p>Here is a very simple example that changes the welcome message you see when the REPL first starts, as well as changing the prompt to output a message followed by the current namespace:</p>
<pre><code>:repl-options {

    ;; custom prompt
    prompt (fn [ns] (str &quot;You are hacking in &quot; ns &quot;=&gt; &quot; ))

    ;; Welcome message when the repl session starts.
    :welcome (println &quot;Its  REPL time!&quot;)}
</code></pre><p>In the following  example I have added colour using <a href="http://stackoverflow.com/questions/5762491/how-to-print-color-in-console-using-system-out-println" target="_blank" rel="noopener">ASCII codes I found on Stack Overflow</a>.  It makes the definition of the prompt a little messy looking, however the prompt itself is much nicer than the standard one. </p>
<blockquote>
<p>Remember to reset the colour at the end of the prompt definition or all your input into the REPL will be the same colour as the prompt.</p>
</blockquote>
<pre><code>:repl-options {
     :prompt (fn [ns] (str &quot;\u001B[35m[\u001B[34m&quot; ns &quot;\u001B[35m]\u001B[33mcλ:\u001B[m &quot; ))

     :welcome (println &quot;Time for  REPL Driven Development!&quot;)}&lt;/span&gt;**
</code></pre><p>This customisation looks like:</p>
<img src="http://1.bp.blogspot.com/-_KsZRMlUN7M/UiBLzV-wuZI/AAAAAAAAK6o/adyJ_a1fVQE/s1600/clojure-repl-custom-colour-text.png" class="img-code" title="Customised Clojure REPL prompt with welcome message, configured in Leiningen"> 
<h1 id="The-ASCII-codes-and-their-colours"><a href="#The-ASCII-codes-and-their-colours" class="headerlink" title="The ASCII codes and their colours"></a>The ASCII codes and their colours</h1><p>To make the above customisation easier to read, here are the actual colours of the ASCII codes I used above.</p>
<ul>
<li><code>\u001B[32m</code> is green for the brackets around the namespace</li>
<li><code>\u001B[34m</code> is blue for the name space name</li>
<li><code>\u001B[33m</code> is yellow for the Lambda character (yellow matches my shell prompt ~)</li>
<li><code>\u001B[m</code>   resets the colour changes back to the default (white in this case)</li>
</ul>
<blockquote>
<p>If there was a way to use colour names rather than ASCII codes in the prompt configuration, that would make the configuration so much nicer to work with.  This may be a limitation of the terminal though, rather than Leiningen.</p>
</blockquote>
<h1 id="Other-REPL-prompt-tweaks"><a href="#Other-REPL-prompt-tweaks" class="headerlink" title="Other REPL prompt tweaks"></a>Other REPL prompt tweaks</h1><p>Other customisations you could make to your REPL prompt include adding the project name, version, etc.  As the customisation is specified in your Clojure <code>project.clj</code> then your prompt can be as project specific as you like.</p>
<h1 id="Adding-the-Lambda-symbol-using-Emacs"><a href="#Adding-the-Lambda-symbol-using-Emacs" class="headerlink" title="Adding the Lambda symbol using Emacs"></a>Adding the Lambda symbol using Emacs</h1><p>I am using Emacs for my editor, so a quick look on Stack Overflow showed me <a href="http://stackoverflow.com/questions/10192341/how-to-enter-greek-characters-in-emacs" target="_blank" rel="noopener">how to enter Greek characters in Emacs</a> to create the Lambda character in the prompt.  The way to add the lambda symbol to a file in Emacs is with the command:</p>
<pre><code>M-x ucs-insert 03bb
</code></pre><p>The <code>03bb</code> code is Unicode for the lambda symbol - λ.</p>
<h1 id="Create-your-own-Leiningen-Clojure-templates"><a href="#Create-your-own-Leiningen-Clojure-templates" class="headerlink" title="Create your own Leiningen Clojure templates"></a>Create your own Leiningen Clojure templates</h1><p>Assuming you like the custom prompt and want it in all your projects,  you can use the <a href="https://github.com/tcw/lein-create-template" target="_blank" rel="noopener">lein-create-template</a> plugin to create your own project template for lein new.  So when you create a new project with leiningen you can run the command:</p>
<pre><code>lein new my-custom-template project-name
</code></pre><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Its quick and easy to customise your Clojure REPL prompt when using Leiningen,  so why not make the developer experience just that little bit nicer and maybe prevent typing code into the wrong terminal window.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://4.bp.blogspot.com/-pc_s02W-R9w/TzFLaS-sQcI/AAAAAAAAEbU/xWhovBljYE8/s1600/clojure-logo-with-name.png" class="img-topic"> 
<p>Sometimes its the little things that make a difference and after seeing how easily customise the Clojure REPL prompt with <a href="http://leiningen.org/" target="_blank" rel="noopener">Leiningen</a> I had a little hack with words, symbols and colours and came up with something nicer (in my opinion).</p>]]>
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="leiningen" scheme="http://jr0cket.co.uk/tags/leiningen/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Getting Started With Nodejs and Express Framework]]></title>
    <link href="http://jr0cket.co.uk/2013/08/getting-started-with-nodejs-and-express.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/getting-started-with-nodejs-and-express.html.html</id>
    <published>2013-08-19T14:12:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-iCH8QV8CGAY/UgfW0SNj9bI/AAAAAAAAK3I/qE6rmyNEhOI/s1600/nodejs-logo-nodes.png" class="img-thumbnail"> 
<p><a href="http://nodejs.org/" target="_blank" rel="noopener">nodejs</a> is an important aspect in making JavaScript so popular for modern development and frameworks like <a href="http://expressjs.com/" target="_blank" rel="noopener">Express</a> make development with node more productive.  It is really easy to get going with <a href="http://nodejs.org/" target="_blank" rel="noopener">nodejs</a> &amp; <a href="http://expressjs.com/" target="_blank" rel="noopener">Express</a> and you can deploy your app live via <a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku</a> too.</p>
<a id="more"></a>
<h1 id="Express-Framework"><a href="#Express-Framework" class="headerlink" title="Express Framework"></a>Express Framework</h1><p><a href="http://expressjs.com/" target="_blank" rel="noopener">Express</a> is a minimal and flexible node.js web application framework. You can easily create single &amp; multi-page web apps or use it with other languages to build hybrid web applications. Express makes using node.js much less of a learning curve, although you can still get to the raw node power once you are ready. </p>
<h1 id="Creating-your-first-nodejs-Express-app"><a href="#Creating-your-first-nodejs-Express-app" class="headerlink" title="Creating your first nodejs Express app"></a>Creating your first nodejs Express app</h1><p>Assuming you already have nodejs installed (<a href="http://blog.jr0cket.co.uk/2013/03/starting-nodejs-development-on-ubuntu.html" target="_blank" rel="noopener">install node on Ubuntu</a>) along with npm ,the nodejs package manager, then you are good to go.</p>
<h1 id="Create-your-project"><a href="#Create-your-project" class="headerlink" title="Create your project"></a>Create your project</h1><p>Create a folder for your application</p>
<pre><code>mkdir first-node-express
</code></pre><h1 id="Define-project-dependencies"><a href="#Define-project-dependencies" class="headerlink" title="Define project dependencies"></a>Define project dependencies</h1><p>Create a <code>package.json</code> file to define your project and its dependencies.  Express is treated as a dependency for the project and you simply specify the version of Express you want to include.</p>
<p>To see what version of express is available, use the node package manager to find out</p>
<pre><code>npm info express version
</code></pre><p>Edit the <code>package.json</code> file and define your project as follows</p>
<pre><code>{
  &quot;name&quot;: &quot;node-express-simple&quot;,
  &quot;description&quot;: &quot;A simple node express based website&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;private&quot;: true,
  &quot;dependencies&quot;: {
    &quot;express&quot;: &quot;3.3.5&quot;
  }
}
</code></pre><blockquote>
<p>the name of the project should not contain spaces</p>
</blockquote>
<h1 id="Add-libraries-that-Express-and-Node-require"><a href="#Add-libraries-that-Express-and-Node-require" class="headerlink" title="Add libraries that Express and Node require"></a>Add libraries that Express and Node require</h1><p>Now the project dependencies are defined, use the node package manager to pull down those dependencies from the Internet.</p>
<pre><code>npm install
</code></pre><p>You can view the dependencies of your project at any time by using the command:</p>
<pre><code>npm ls
</code></pre><h1 id="Create-a-simple-route"><a href="#Create-a-simple-route" class="headerlink" title="Create a simple route"></a>Create a simple route</h1><p>In a text file called <code>web.js</code> define a simple route that will handle a request sent to the default address of your application, for example <code>/</code>. </p>
<blockquote>
<p>You can call this file anything you like, but its often web.js, app.js or server.js</p>
</blockquote>
<pre><code>// define a simple text response
app.get(&apos;/&apos;, function(request, responce){
  responce.send(&apos;Hello nodejs express World&apos;);
});
</code></pre><p>In the above example we are using response.send() to add a Content type and Content-Length to the response so they dont have to define them manually.</p>
<img src="http://4.bp.blogspot.com/-iCH8QV8CGAY/UgfW0SNj9bI/AAAAAAAAK3I/qE6rmyNEhOI/s1600/nodejs-logo-nodes.png" class="img-code"> 
<h1 id="Define-a-node-server-to-listen-to-requests"><a href="#Define-a-node-server-to-listen-to-requests" class="headerlink" title="Define a node server to listen to requests"></a>Define a node server to listen to requests</h1><p>In the same <code>web.js</code> file as above, add code to listen on a specific port and also send any logging information to the console from where your node app was run from.</p>
<pre><code>// bind to a port &amp;amp; listen for connections 
app.listen(3000);
console.log(&apos;Node express app listening on port 3000&apos;);
</code></pre><blockquote>
<p>It can be useful to define a $PORT variable and use that variable in your code, especially if you use multiple environments like development, testing and production.  Also some platform as a service approaches provide a port variable on which your application must listen (eg. Heroku.com).</p>
</blockquote>
<h1 id="Run-the-app-locally-with-the-node-command"><a href="#Run-the-app-locally-with-the-node-command" class="headerlink" title="Run the app locally with the node command"></a>Run the app locally with the node command</h1><p>To run your application, use the command called <code>node</code> and pass it the name of the file your application is in.  In this case <code>web.js</code>.</p>
<pre><code>node web.js
</code></pre><p>You should see output on the console showing you that node is running and listening on the port you specified.</p>
<pre><code>Node express app listening on port 3000
</code></pre><p>You can now <a href="http://localhost:3000/" target="_blank" rel="noopener">open your new node express website</a>.   You should just see the text messages displayed in your browser.</p>
<h1 id="Update-your-Node-Express-app-code-a-little-for-Heroku"><a href="#Update-your-Node-Express-app-code-a-little-for-Heroku" class="headerlink" title="Update your Node Express app code a little for Heroku"></a>Update your Node Express app code a little for Heroku</h1><p>To make the application a little more robust lets make a couple of changes to the port it runs on and the logging message.</p>
<p>Edit the <code>web.js</code> file and change the <code>app.listener</code> code to be set by an Heroku environment variable (or default to port 5000 if no variable set).  The console log code is also changed to include the port the app is running on just to be sure.</p>
<pre><code>var port = process.env.PORT || 5000;
app.listen(port, function() {
  console.log(&quot;Listening on &quot; + port);
});
</code></pre><p>We are also going to tell Heroku the process we want to run for our application, using a simple text file called <code>Procfile</code></p>
<blockquote>
<p>the file name is Procfile without any extension and P should be capitalised, it should be in the root of your project folder.</p>
</blockquote>
<p>Edit the <code>Procfile</code> and add the following line to run a web process using node and our application file.</p>
<pre><code>web: node web.js
</code></pre><h1 id="Add-your-project-to-a-local-git-repository"><a href="#Add-your-project-to-a-local-git-repository" class="headerlink" title="Add your project to a local git repository"></a>Add your project to a local git repository</h1><p>I’m assuming you have Git already installed.  </p>
<blockquote>
<p>If you need to install Git, visit the <a href="http://git-scm.com/" target="_blank" rel="noopener">Git-SCM Website</a> or install the <a href="https://toolbelt.heroku.com/" target="_blank" rel="noopener">Heroku toolbelt</a></p>
</blockquote>
<p>Commit your code to your local git repository using the following commands:</p>
<pre><code>git init
git add Procfile web.js package.json
git commit -m &quot;new project created&quot;
</code></pre><h1 id="Create-an-Heroku-application-for-deployment"><a href="#Create-an-Heroku-application-for-deployment" class="headerlink" title="Create an Heroku application for deployment"></a>Create an Heroku application for deployment</h1><p>Assuming your project is managed with git and you have an <a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku account</a> and the <a href="https://toolbelt.heroku.com/" target="_blank" rel="noopener">Heroku toolbelt</a>, then you can simply create a space for your application on Heroku with the command:</p>
<pre><code>heroku create
</code></pre><p>This adds a remote URL for the git repository on Heroku that your application will be deployed from.  You can use <code>git remote -v</code> to check it has been added.</p>
<h1 id="Deploy-your-application-to-Heroku"><a href="#Deploy-your-application-to-Heroku" class="headerlink" title="Deploy your application to Heroku"></a>Deploy your application to Heroku</h1><p>Your code is managed by your local Git repository as one or more commits, so all you have to do is push those commits to Heroku and trigger a deployment.</p>
<pre><code>git push heroku master
</code></pre><h1 id="Start-your-application-on-Heroku"><a href="#Start-your-application-on-Heroku" class="headerlink" title="Start your application on Heroku"></a>Start your application on Heroku</h1><p>The final step to get your application running is to tell Heorku to run a process for your node server.  The following command will use the process defined in the Profile you created earlier.</p>
<pre><code>heroku ps:scale web=1
</code></pre><p>Now you can see your application running live on the Internet by navigating to the application address shown at the end of the deployment (URL) or simply type:</p>
<pre><code>heroku open
</code></pre><h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Creating a web app with Nodejs and Express is pretty quick and deploying on Heroku is easy, giving you a live app you can continue to build upon.</p>
<p>Next I’ll look at doing more interesting things with Express, such as using it to generate an application skeleton.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://4.bp.blogspot.com/-iCH8QV8CGAY/UgfW0SNj9bI/AAAAAAAAK3I/qE6rmyNEhOI/s1600/nodejs-logo-nodes.png" class="img-thumbnail"> 
<p><a href="http://nodejs.org/" target="_blank" rel="noopener">nodejs</a> is an important aspect in making JavaScript so popular for modern development and frameworks like <a href="http://expressjs.com/" target="_blank" rel="noopener">Express</a> make development with node more productive.  It is really easy to get going with <a href="http://nodejs.org/" target="_blank" rel="noopener">nodejs</a> &amp; <a href="http://expressjs.com/" target="_blank" rel="noopener">Express</a> and you can deploy your app live via <a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku</a> too.</p>]]>
    
    </summary>
    
      <category term="nodejs" scheme="http://jr0cket.co.uk/tags/nodejs/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Getting to Grips With Git - Understanding the Git & Github Workflow]]></title>
    <link href="http://jr0cket.co.uk/2013/08/getting-to-grips-with-git-understanding-the-simple-workflow.html.html"/>
    <id>http://jr0cket.co.uk/2013/08/getting-to-grips-with-git-understanding-the-simple-workflow.html.html</id>
    <published>2013-08-01T10:09:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Learning to use Git to version your development projects can seem a little strange at first, although once you have a few basics it quickly becomes a natural and fast tool to use.</p>
<p>Here are some of the basics of the Git and Github workflow in word and pictures, created from my mission to teach the world (starting with London) to use Git effectively. &nbsp;If you just want an overview of the basic commands, see my <a href="http://jr0cket.github.io/developer-guides/git-quickstart-guide.pdf" target="_blank" rel="noopener">Git Quickstart Guide</a>.</p>
<a id="more"></a>
<h1 id="Understanding-the-basic-Git-workflow"><a href="#Understanding-the-basic-Git-workflow" class="headerlink" title="Understanding the basic Git workflow"></a>Understanding the basic Git workflow</h1><p>Git has several stages in the basic workflow:</p>
<p><code>Working copy</code>: the project source code and configurations</p>
<p><code>Staging</code>: add the changes that you want to make a part of the next commit</p>
<p><code>Local repository</code>: the full history of your projects as a series of commits, contained within a folder called <code>.git</code> in the root folder of your project.</p>
<h1 id="Why-have-a-staging-area"><a href="#Why-have-a-staging-area" class="headerlink" title="Why have a staging area?"></a>Why have a staging area?</h1><p>The staging area allows you a little more room to consider what the next commit should contain. &nbsp;Its much simpler to change your mind about what will go into the commit by un-staging changes. &nbsp;You also do not have to be concerned about re-writing commit history.</p>
<p>Once you have made a commit, then you should avoid making changes to that commit. &nbsp;Its usually better to fix anything in another commit than to change the first one. </p>
<p>Once you share a commit with others, eg. via Github or CI server, then you should consult with everyone concerned before making a change to a commit.</p>
<h1 id="A-Git-and-Github-workflow"><a href="#A-Git-and-Github-workflow" class="headerlink" title="A Git and Github workflow"></a>A Git and Github workflow</h1><p>You can version changes for your project to your local repository as often as you need without conflict as you are the only collaborator. &nbsp;This also means you can work off-line too.</p>
<p>When you want to collaborate on projects you can set up a shared repository that you work on as a team, pushing the commits you made in your local repository to the shared repository.</p>
<p>The most well known example of shared repositories is Github.</p>
<img src="http://1.bp.blogspot.com/-n8gwrM5Bf04/UfosDLuuDUI/AAAAAAAAKwg/2aE3V0NDk-g/s1600/git-and-github-workflow.png" class="img-code">
<p>In the example, John has started work on a project on his laptop and created a local repository using the command <code>git init</code>.</p>
<p>John then stages changes using <code>git add filename</code> or <code>git add .</code> if he wants to add everything.  When John is happy with the changes he has staged and has though of a good commit message, then he creates a new commit with the command <code>git commit -m &quot;meaningful commit message&quot;</code>.</p>
<p>John now wants to share code with others, so visits the <a href="https://github.com" target="_blank" rel="noopener">Github.com</a> website and creates a new repository (having first created an account and added his public key to his Github account).</p>
<p>John then tells his local repository about the new Github repository using the command <code>git remote add remote-alias-name github-repo-url</code> - where <code>remote-alias-name</code> is an alias used to refer to the remote repo and <code>git-repo-url</code> is the web address of the Github repository as stated on its github page.</p>
<p>John can then push his changes contained within the local repository to the Github repository using the command <code>git push remote branch</code> - where <code>remote</code> is the alias for the github repository URL and <code>branch</code> is <code>master</code> as no other branches have been created at this point. </p>
<h2 id="Collaborating-via-Github"><a href="#Collaborating-via-Github" class="headerlink" title="Collaborating via Github"></a>Collaborating via Github</h2><p>Carlos sees this new repository created by John on Github and decides to get a copy by using the command <code>git clone remote-repo-url</code> - where <code>remote-repo-url</code> is the web address of the Github repository as stated on its github page.</p>
<p>By cloning the Github repository made by John, Carlos has a new local repository and can see the full history of commits. &nbsp;Carlos can edit the working copy as well as stage and commit his own changes to this new repository. &nbsp;Carlos cannot push changes back to the repository on Github though, so if he did git push it would fail. &nbsp;To update the github repository, John would need to add Carlos as a contributor first.</p>
<p>Sam has also seen the Github repository that John created and rather than take a copy using git clone, she has used the Github website to create a fork. &nbsp;A fork is an exact copy of a Github repository, in this case Sam now has an exact copy of Johns repo but under her Github account and fully accessible by her.</p>
<p>Sam gets a copy of her forked repo on her laptop by using the command <code>git clone remote-repo-url</code>. </p>
<p>Now Sam can edit the code in her working copy and commit those changes to her local repository.  She can also push those committed changes to her forked repository on Github.</p>
<p>If Sam wants to share her new commits with John, then from the web page of her forked Github repository she can <a href="https://help.github.com/articles/using-pull-requests" target="_blank" rel="noopener">create a pull request</a>. &nbsp;This sends a message to John to let him know that there are changes in the forked repository that he may want to pull into his Github repository.</p>
<p>Should John accept the pull request made by Sam, then he will also need to update his local repository using the command <code>git pull remote branch</code></p>
<p>Once you are sharing changes thorugh remote repositories, you need to make sure you keep your local repositories up to date with other peoples changes that are pulled into those remote repositories, otherwise it may prevent you from pushing your changes…</p>
<h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Using Git and Github may feel a little strange at first, but once you have some practice and if you keep your workflow simple then using Git will become very natural and fast.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Learning to use Git to version your development projects can seem a little strange at first, although once you have a few basics it quickly becomes a natural and fast tool to use.</p>
<p>Here are some of the basics of the Git and Github workflow in word and pictures, created from my mission to teach the world (starting with London) to use Git effectively. &nbsp;If you just want an overview of the basic commands, see my <a href="http://jr0cket.github.io/developer-guides/git-quickstart-guide.pdf" target="_blank" rel="noopener">Git Quickstart Guide</a>.</p>]]>
    
    </summary>
    
      <category term="github" scheme="http://jr0cket.co.uk/tags/github/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Designing Your Own Commit Graph With Git]]></title>
    <link href="http://jr0cket.co.uk/2013/06/designing-your-own-commit-graph-with-git.html.html"/>
    <id>http://jr0cket.co.uk/2013/06/designing-your-own-commit-graph-with-git.html.html</id>
    <published>2013-06-22T18:40:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Git log is a very powerful tool for tracking all your changes, even across different branches and multiple repositories.  However <span style="font-family: Courier New, Courier, monospace;">git log</span> default output is verbose and not a great way to visualise the commit history.</p>
<p>Fortunately Git is very customisable, both for humans and tools.  This article covers one way to creating your own customised output for git log that helps you work with branches and track changes through local and remote (eg. Github) repositories.</p>
<a id="more"></a>
<h1 id="Using-git-log-options"><a href="#Using-git-log-options" class="headerlink" title="Using git log options"></a>Using git log options</h1><p>In a <a href="http://blog.jr0cket.co.uk/2013/01/git-log-makes-multiple-repos-easier-to.html" target="_blank" rel="noopener">previous article</a> I covered the different git log options that could be combined into a good visualisation:</p>
<pre><code>git log --graph --decorate --relative-date --oneline
</code></pre><p>This is a very simple way to configure the log, but there is a lot more you can do to tweak this.</p>
<h1 id="Hacking-the-pretty-format"><a href="#Hacking-the-pretty-format" class="headerlink" title="Hacking the pretty format"></a>Hacking the pretty format</h1><p>For any git output you can use the <code>--pretty=format:</code> option to define your own visualisation of the information.  There are some built in formats you can use with this option or with a bit of googling its not to hard to create your own specific layouts and colours.</p>
<p>Lets look at an example git log configuration:</p>
<pre><code>git log --graph --date=relative 
        --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset&apos;
</code></pre><p>Show the git log graph with date relative times to the last commit made.  Commit numbers are in red, branches and remote repositories are in yellow, commits in white and relative commit times in green.</p>
<img src="http://4.bp.blogspot.com/-8qgVMXGUang/UcXd207WTwI/AAAAAAAAJyg/FXf3u6vSi4c/s1600/git-log-pretty-one.png" class="img-code">
<p>Lets add commit author details to the configuration too:</p>
<pre><code>git log --graph --date=relative 
        --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&apos;
</code></pre><p>The author information is added to the end of each line in blue.</p>
<img src="http://2.bp.blogspot.com/-k3GFOHCIE3Y/UcXeFBv-ZaI/AAAAAAAAJyo/PV1fyHbgbzU/s1600/git-log-pretty-two.png" class="img-code">
<p>This example shows you the full history of your git log </p>
<pre><code>git log --graph --full-history --all --color --date=short 
        --pretty=format:&apos;%Cred%x09%h %Creset%ad%Cblue%d %Creset %s %C(bold)(%an)%Creset&apos;
</code></pre><p>A simpler git log in graph form </p>
<pre><code>git log --graph 
        --pretty=format:&apos;%Cred%h%Creset - %C(yellow)%d%Creset %s %Cgreen%cr %C(cyan)[%aN]%Creset&apos;
</code></pre><p>You can also create a simple commit graph by date, without showing the numbers.  This is useful if you are just going off the branches or tags. </p>
<pre><code>git log --graph --date=short
        --pretty=format:&apos;%Cgreen%cd%Creset - %C(yellow)%d%Creset %s %C(cyan)[%aN]%Creset&apos; 
</code></pre><h1 id="Adding-Shortcuts-for-git-log-options"><a href="#Adding-Shortcuts-for-git-log-options" class="headerlink" title="Adding Shortcuts for git log options"></a>Adding Shortcuts for git log options</h1><p>You can add these commands and many more to your git config file as aliases to save your typing them all out and having to remember them too.  You can use git config or add them directly to your <code>~/.gitconfig</code> file as follows:</p>
<script src="//gist.github.com/4649149.js"></script>
<h1 id="Understanding-the-Git-Pretty-Format-codes"><a href="#Understanding-the-Git-Pretty-Format-codes" class="headerlink" title="Understanding the Git Pretty Format codes"></a>Understanding the Git Pretty Format codes</h1><p>There is a complete <a href="http://opensource.apple.com/source/Git/Git-19/src/git-htmldocs/pretty-formats.txt" target="_blank" rel="noopener">guide to git</a> formats and codes, however these are probably the main codes you need to know</p>
<ul>
<li><p>output text in the colour colour-name<br>  %Ccolour-name </p>
</li>
<li><p>reset the output text colour<br>  %Creset</p>
</li>
<li><p>commit number / hash (in short form due to the <code>--abbrev-commit</code>option)<br>  %h</p>
</li>
<li><p>repository (–decorate)<br>  %d</p>
</li>
<li><p>commit message<br>  %s</p>
</li>
<li><p>time stamp / commit relative<br>  %cr</p>
</li>
<li><p>author / account name<br>  %an</p>
</li>
</ul>
<h1 id="Abbreviating-Commit-numbers"><a href="#Abbreviating-Commit-numbers" class="headerlink" title="Abbreviating Commit numbers"></a>Abbreviating Commit numbers</h1><p>Since git version 1.7.6, git config has gained a <code>log.abbrevCommit</code> option which always abreviate commit numbers in any git output.  </p>
<pre><code>git config --global log.abbrevCommit true
</code></pre><p>If you are using the <code>--oneline</code> option on git log, then the commit number is abreviated regardless of this setting.</p>
<h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>Have fun configuring your git log as if you use git on the command line you will be working with the log quite often.  However, dont spend all your time tweaking the format of the log, you still need to write some code for your apps :)</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Git log is a very powerful tool for tracking all your changes, even across different branches and multiple repositories.  However <span style="font-family: Courier New, Courier, monospace;">git log</span> default output is verbose and not a great way to visualise the commit history.</p>
<p>Fortunately Git is very customisable, both for humans and tools.  This article covers one way to creating your own customised output for git log that helps you work with branches and track changes through local and remote (eg. Github) repositories.</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Starting Nodejs Development on Ubuntu]]></title>
    <link href="http://jr0cket.co.uk/2013/03/starting-nodejs-development-on-ubuntu.html.html"/>
    <id>http://jr0cket.co.uk/2013/03/starting-nodejs-development-on-ubuntu.html.html</id>
    <published>2013-03-25T14:37:00.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    <content type="html"><![CDATA[<img src="http://4.bp.blogspot.com/-bIFaJwok1vI/UVA3jCluB-I/AAAAAAAAJM0/-rtRbVUQ4no/s1600/Nodejs_logo_light.png" class="img-thumbnail"> 
<p><strong>Outdated: please disregard this article as it is out of date.  I install node in my local filespace on Ubuntu now as its so much easier to manage.  Basicaly I download the Linux binaries and put them in ~/apps/nodejs/current, then add ~/apps/nodejs/current/bin to my path using my shell profile (~/.profile).  This makes using npm -g really easy and does not require the sudo command.</strong></p>
<p><a href="http://nodejs.org/" target="_blank" rel="noopener">nodejs</a> is a very popular framework for JavaScript development, but as I found out at the <a href="http://www.meetup.com/London-MongoDB-User-Group/events/106898042/" target="_blank" rel="noopener">MongoDB hackathon</a>  its not that straight forward to get going.  So here is a quick guide to get going with Node.js on <a href="http://www.ubuntu.com" target="_blank" rel="noopener">Ubuntu</a>.</p>
<a id="more"></a>
<h2 id="Installing-nodejs-on-Ubuntu"><a href="#Installing-nodejs-on-Ubuntu" class="headerlink" title="Installing nodejs on Ubuntu"></a>Installing nodejs on Ubuntu</h2><p>Whilst there is a nodejs package in Ubuntu, it is version 0.6.9 and therefore quite a way behind the current version on the nodejs website.  So lets do a manual install with the latest version, 0.10.1.</p>
<blockquote>
<p>I since found an <a href="http://slopjong.de/2012/10/31/how-to-install-the-latest-nodejs-in-ubuntu/" target="_blank" rel="noopener">alternative approach using ppa’s</a> but haven’t tried it out.</p>
</blockquote>
<img src="http://4.bp.blogspot.com/-WY7IRkhNpOU/UVA0m8Ly9cI/AAAAAAAAJMk/Sb1d7i8Mocs/s1600/nodejs-homepage-install.png" class="img-code">
<p>Download the install archive file and extract it.  I chose to do this in a folder called apps in my home folder.  Alternatively you could install it in <code>/opt/</code> or <code>/usr/local</code></p>
<pre><code>mkdir ~/apps/nodejs
tar zvxf node-v0.10.1.tar.gz
</code></pre><h2 id="Compile-nodejs"><a href="#Compile-nodejs" class="headerlink" title="Compile nodejs"></a>Compile nodejs</h2><p>As we are doing a manual install, we need to build nodejs to get the actual executable files.  This requires a C compiler on your laptop which is not installed by default.  So either use the Ubuntu software center to install the package <code>g++</code> or use the command line</p>
<pre><code>sudo apt-get install g++
</code></pre><p>To compile nodejs, first we run configuration to check all the neccessary external libraries are there and then we make node:</p>
<pre><code>./configure
make
</code></pre><h2 id="Adding-node-to-your-command-path"><a href="#Adding-node-to-your-command-path" class="headerlink" title="Adding node to your command path"></a>Adding node to your command path</h2><p>Add the following to your environment in your <code>~/.bashrc</code> file (or <code>.zshrc</code> file if you are running zshell).  I moved the node executable file created by the compile process into a folder called bin, so I knew which was the right file to run.  Then I added that folder to the path.</p>
<pre><code>export NODEJS_HOME=/home/jr0cket/apps/nodejs/bin
export PATH=$PATH:$NODEJS_HOME
</code></pre><p>I am using an environment variable called NODEJS_HOME as a convienience.  You can just add the whole path in one line.</p>
<h2 id="Installing-NPM-the-node-package-manager"><a href="#Installing-NPM-the-node-package-manager" class="headerlink" title="Installing NPM - the node package manager"></a>Installing NPM - the node package manager</h2><img src="http://3.bp.blogspot.com/-JJakqhflSfw/UVA4AMjSKAI/AAAAAAAAJM8/BbLzQXPlQbw/s1600/npm-logo.png" class="img-thumbnail"> 
<p>The node package manager is a great way to get additional libraries into  your node projects.  It does not come with node itself, so you have to install it seperately.  Npm also needs node installed first.</p>
<p>On the node package manager website, the install process is defined as the following command:</p>
<pre><code>curl https://npmjs.org/install.sh | sh
</code></pre><p>In my manual install (not using Ubuntu packages) then node and npm are created in different folders.  So I put the npm executable file in the same bin folder I created previously for node, which I had already added that to the executable path.</p>
<p>Once npm is installed you can search for and install packages.  If you the <code>-g</code> option for npm install then the modules will be installed globally, otherwise any modules will be local to your project in an npm-modules folder.</p>
<p>Search for modules:</p>
<pre><code>npm search mongodb native
</code></pre><p>Install modules locally or globally:</p>
<pre><code>npm install mongodb
npm install -g mongodb
</code></pre><h2 id="Testing-out-node-locally"><a href="#Testing-out-node-locally" class="headerlink" title="Testing out node locally"></a>Testing out node locally</h2><p>You can run an interactive session for nodejs (the node REPL) using the command:</p>
<pre><code>node
</code></pre><p>Then you can just enter JavaScript code and it is evaluated immediately.  You can also run code in files by using the command:</p>
<pre><code>node filename.js
</code></pre><p>So lets create a simple “Hello World” app for nodejs in a file called web.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express.createServer(express.logger());</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> port = process.env.PORT || <span class="number">5000</span>;</span><br><span class="line">app.listen(port, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Listening on "</span> + port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Running this with <code>node web.js</code> we get “Hello World” as the output.</p>
<h2 id="Testing-out-node-on-Heroku"><a href="#Testing-out-node-on-Heroku" class="headerlink" title="Testing out node on Heroku"></a>Testing out node on Heroku</h2><p>nodejs is one of the languages supported on Heroku (a cloud service that gives developers a sane way to deploy and scale their apps).  Deploying this nodejs app on Heroku is therefore really trivial.</p>
<p>Heroku can usually work out what to do with many projects, based on the language and framework used.  However, just to be specific lets create a <code>Procfile</code> to tell node which is our entry point to our application.  In  this case we want node to start with the file <code>web.js</code></p>
<pre><code>web: node web.js
</code></pre><p>Lets version the project with git</p>
<pre><code>git init
git add .
git commit -m &quot;Initial project setup&quot;
</code></pre><p>Then we can create an app on Heroku that we can deploy too - you will need an <a href="http://www.heroku.com" target="_blank" rel="noopener">Heroku account</a> and download the <a href="http://toolbelt.heroku.com" target="_blank" rel="noopener">Heroku toolbelt</a>.</p>
<pre><code>heroku create
</code></pre><p>Heroku adds a new remote to our git project called heroku, so we can push our code to our app.</p>
<p>Now that our project is ready to deploy, lets push all the code to the  heroku application you created using git push, specifying the branch you are pushing (usually <code>master</code>)</p>
<pre><code>git push heroku master
</code></pre><p>Now open the node website in a browser using the URL given after the upload of your code via git push, or just the command</p>
<pre><code>heroku open
</code></pre><img src="http://1.bp.blogspot.com/-m6l3bhlBB-Q/UVAoqU5PTeI/AAAAAAAAJMU/7OwfgCtBlTY/s1600/nodejs-website-helloworld.png" class="img-code">
<p>There is a nice <a href="https://devcenter.heroku.com/articles/nodejs" target="_blank" rel="noopener">article about nodejs on heroku</a> with examples of wiring node up to various data sources too.</p>
<h2 id="Learning-JavaScript-nodejs"><a href="#Learning-JavaScript-nodejs" class="headerlink" title="Learning JavaScript nodejs"></a>Learning JavaScript nodejs</h2><p>Now for the fun part, learning how to program in nodejs and seeing how much JavaScript I can remember.  Here are some resource I found in the few hours I spent trying to learn about nodejs.</p>
<p>David Crockford has lots of great resources to help you write great JavaScript: </p>
<ul>
<li><a href="http://javascript.crockford.com/" target="_blank" rel="noopener">JavaScript website</a></li>
<li><a href="http://www.youtube.com/results?search_query=crockford+on+javascript" target="_blank" rel="noopener">YouTube videos</a> </li>
<li><a href="http://yuiblog.com/crockford/" target="_blank" rel="noopener">Crockford on Javascript video series</a></li>
<li><a href="http://nodejs.org/" target="_blank" rel="noopener">NodeJS</a></li>
<li><a href="https://npmjs.org/" target="_blank" rel="noopener">Node Package Manager</a></li>
<li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/node-js-for-beginners/" target="_blank" rel="noopener">Nodejs for beginners</a></li>
<li><a href="http://howtonode.org/" target="_blank" rel="noopener">HowToNode</a> - community supported blog to teach fundamental concepts for writing effective code along with various other tips.</li>
<li><a href="http://requirejs.org/" target="_blank" rel="noopener">RequireJS</a> - optimising file and module loader for JavaScript, can combine all your code into one file for faster loading</li>
<li><a href="https://github.com/dannycoates/node-inspector" target="_blank" rel="noopener">Node-inspector</a> - Web Inspector based nodeJS debugger</li>
<li><a href="http://docs.nodejitsu.com/" target="_blank" rel="noopener">Nodejitsu</a> - a growing collection of node.js how-to articles from the community, range from basic to advanced.</li>
<li><a href="http://superherojs.com/" target="_blank" rel="noopener">Superhero.js</a> - a collection of articles, presentations and videos </li>
<li><a href="https://groups.google.com/forum/?fromgroups=#!forum/nodejs" target="_blank" rel="noopener">Nodejs google group</a>** </li>
<li><a href="http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js" target="_blank" rel="noopener">Suggestions of learning materials on Stack Exchange</a></li>
</ul>
<h3 id="Some-semi-related-links"><a href="#Some-semi-related-links" class="headerlink" title="Some semi-related links"></a>Some semi-related links</h3><ul>
<li><a href="http://blog.deadpansincerity.com/2011/05/setting-up-emacs-as-a-javascript-editing-environment-for-fun-and-profit/" target="_blank" rel="noopener">Setting up emacs as a javascript editing environment</a></li>
<li><a href="http://playground.webflow.com/" target="_blank" rel="noopener">Webflow CSS3 playground</a></li>
</ul>
<p>Good luck with your JavaScript and node projects.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://4.bp.blogspot.com/-bIFaJwok1vI/UVA3jCluB-I/AAAAAAAAJM0/-rtRbVUQ4no/s1600/Nodejs_logo_light.png" class="img-thumbnail"> 
<p><strong>Outdated: please disregard this article as it is out of date.  I install node in my local filespace on Ubuntu now as its so much easier to manage.  Basicaly I download the Linux binaries and put them in ~/apps/nodejs/current, then add ~/apps/nodejs/current/bin to my path using my shell profile (~/.profile).  This makes using npm -g really easy and does not require the sudo command.</strong></p>
<p><a href="http://nodejs.org/" target="_blank" rel="noopener">nodejs</a> is a very popular framework for JavaScript development, but as I found out at the <a href="http://www.meetup.com/London-MongoDB-User-Group/events/106898042/" target="_blank" rel="noopener">MongoDB hackathon</a>  its not that straight forward to get going.  So here is a quick guide to get going with Node.js on <a href="http://www.ubuntu.com" target="_blank" rel="noopener">Ubuntu</a>.</p>]]>
    
    </summary>
    
      <category term="ubuntu" scheme="http://jr0cket.co.uk/tags/ubuntu/"/>
    
      <category term="nodejs" scheme="http://jr0cket.co.uk/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://jr0cket.co.uk/tags/javascript/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Create Github Repos on the Command Line With Hub]]></title>
    <link href="http://jr0cket.co.uk/2013/02/create-github-repos-on-command-line.html.html"/>
    <id>http://jr0cket.co.uk/2013/02/create-github-repos-on-command-line.html.html</id>
    <published>2013-02-17T16:54:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    <content type="html"><![CDATA[<img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-thumbnail">
<p>Its easy to create a new repository on <a href="https://github.com/" target="_blank" rel="noopener">Github</a> website and then use your git tool or command line to clone it or add that remote repository to your project on your development machine. It would be even easier if you could just do it all from the command line with one command. Well, if you install <strong><a href="http://defunkt.io/hub/" target="_blank" rel="noopener">Hub</a></strong> then you can!</p>
<a id="more"></a>
<h1 id="Installing-Hub"><a href="#Installing-Hub" class="headerlink" title="Installing Hub"></a>Installing Hub</h1><p>Its easy to install <strong><a href="http://defunkt.io/hub/" target="_blank" rel="noopener">hub</a></strong> as its essentially a compiled Ruby script that used your git client to do a lot of the work for it.  If you are using <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">homebrew</a> on Mac OSX then you can run:</p>
<pre><code>brew install hub
</code></pre><p>I havent got round to using homebrew yet, so I just installed hub in my home binaries directory:</p>
<pre><code>curl http://defunkt.io/hub/standalone -sLo ~/bin/hub
</code></pre><p>Then I just make hub executable and I am good to go</p>
<img src="http://2.bp.blogspot.com/--PmUXufBddE/USEGAdGkGhI/AAAAAAAAJD8/HgWOMkVd8Bg/s1600/github-hub-install.png" class="img-code">
<p>I could alias hub as the git command as suggested by the hub website, however I want to see the advantages of hub before I fully commit to it. </p>
<h1 id="Creating-a-Github-repo-without-using-the-website"><a href="#Creating-a-Github-repo-without-using-the-website" class="headerlink" title="Creating a Github repo without using the website"></a>Creating a <a href="https://github.com/" target="_blank" rel="noopener">Github</a> repo without using the website</h1><p>In this example I am putting my configuration files onto <a href="https://github.com/" target="_blank" rel="noopener">Github</a> (because after I installed rvm it started rewriting things) so I can manage them better and share them with others.</p>
<p>As usual, I start by creating a local repository for my project files.  This case I am in the home directory. </p>
<img src="http://2.bp.blogspot.com/-GNsUIzUKsxU/USEE-qL762I/AAAAAAAAJC8/3G-sAxlLhJ4/s1600/github-hub-git-init.png" class="img-topic">
<p>To start with I am just going to add my global git configuration files to the repository.&nbsp; I’ll add more later.</p>
<img src="http://2.bp.blogspot.com/-neIzVzzUoJg/USEE-q3dtsI/AAAAAAAAJDI/-xASTudbyfg/s1600/github-hub-add-git-global-files.png" class="img-code">
<p>Using <code>git status</code> I can see I have the desired files ready to be committed.  So lets commit them to my local repository with a suitably clear message.</p>
<img src="http://1.bp.blogspot.com/--6TpvMsdlMc/USEE-jQi2KI/AAAAAAAAJDM/ffpK4A_I67c/s1600/github-hub-commit-git-global-files.png" class="img-code"> 
<p>Now my git global configuration files are committed locally, so if they change I will be able to compare then to what is in git.</p>
<p>So far I haven’t needed to use Hub, but now I want to share these configuration files via <a href="https://github.com/" target="_blank" rel="noopener">Github</a>.&nbsp; I could go onto the website and then come back to the command line and add a remote for the <a href="https://github.com/" target="_blank" rel="noopener">Github</a> repository I just added.&nbsp; Using hub, I can just stay in the command line.</p>
<p>Using hub create command I can create a repository on <a href="https://github.com/" target="_blank" rel="noopener">Github</a>, specifying the name of the repository and using the -d option I can also include a description </p>
<img src="http://1.bp.blogspot.com/-f1QQzjVV6Jw/USEFALeFKkI/AAAAAAAAJDY/JKx8RdRgDJw/s1600/github-use-hub-to-create-repo-from-local.png" class="img-code"> 
<p>A repository on <a href="https://github.com/" target="_blank" rel="noopener">Github</a> has been created and the remote address was automatically added to my local git project. Yay!</p>
<p>To make absolutely sure just this first time, I have a quick look on the <a href="https://github.com/" target="_blank" rel="noopener">Github</a> website and sure enough there is my new repository.</p>
<img src="http://1.bp.blogspot.com/-BPYXNYU2cRs/USEFAFe9VsI/AAAAAAAAJDo/OQ7jVN9HoYE/s1600/github-hub-github-repo-created-on-website.png" class="img-code"> 
<p>Okay, so now I have a shiny new repo on github, its time to push my changes to it from my local repository.&nbsp; Again, we are back to just using git commands.</p>
<img src="http://4.bp.blogspot.com/-u0yQgPNi2Yw/USEFAaUo7KI/AAAAAAAAJDg/o_NgrFROnB8/s1600/github-hub-push-git-global-files.png" class="img-code"> 
<p>To check everything is up to date on both the local and remote repositories, I do a quick git log and see (thanks to <a href="http://blog.jr0cket.co.uk/2013/01/git-log-makes-multiple-repos-easier-to.html" target="_blank" rel="noopener">my git log customisations</a>) that the remote repository (origin/master) is at the same commit version as my local repository (master).</p>
<img src="http://3.bp.blogspot.com/-hCvA5-QYM-U/USEE_Ufk1rI/AAAAAAAAJDE/Pku_XLfEXpI/s1600/github-hub-git-lg.png" class="img-code">
<h1 id="Summary-of-Hub"><a href="#Summary-of-Hub" class="headerlink" title="Summary of Hub"></a>Summary of Hub</h1><p>There is a lot more to hub that I will try out, but the most immediate use is to be able to create a <a href="https://github.com/" target="_blank" rel="noopener">Github</a> repository without having to switch from the command line.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-thumbnail">
<p>Its easy to create a new repository on <a href="https://github.com/" target="_blank" rel="noopener">Github</a> website and then use your git tool or command line to clone it or add that remote repository to your project on your development machine. It would be even easier if you could just do it all from the command line with one command. Well, if you install <strong><a href="http://defunkt.io/hub/" target="_blank" rel="noopener">Hub</a></strong> then you can!</p>]]>
    
    </summary>
    
      <category term="github" scheme="http://jr0cket.co.uk/tags/github/"/>
    
      <category term="hub" scheme="http://jr0cket.co.uk/tags/hub/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Global Git Ignores Make Collaborative Development Easier]]></title>
    <link href="http://jr0cket.co.uk/2013/02/global-git-ignores-make-collaborative-development-easier.html.html"/>
    <id>http://jr0cket.co.uk/2013/02/global-git-ignores-make-collaborative-development-easier.html.html</id>
    <published>2013-02-08T15:22:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Lots of developers are using git, especially when working on projects together.&nbsp; However there is not one single developer tool that every one uses, so there is potential for a lot of unwanted files to end up in your project.</p>
<p>Rather than pollute the .gitignore file for the project with every development tool under the sun, its much more effective to add development tool specific files to your own global ignore file <code>~/.gitignore_global</code>.</p>
<a id="more"></a>
<h1 id="Creating-my-own-global-ignores"><a href="#Creating-my-own-global-ignores" class="headerlink" title="Creating my own global ignores"></a>Creating my own global ignores</h1><p>In the <code>~/.gitconfig</code> of my home directory I have a section called <code>[core]</code> where a global excludes file is defined</p>
<pre><code>[core]
  excludesfile = /Users/jstevenson/.gitignore_global&lt;/span&gt;
</code></pre><p>By adding file name patters to the <code>.gitignore_global</code> file for Emacs, I can add my own personal excludes without adding unnecessary stuff to each project I work on.  It also means its one  less thing to remember when I am working with git projects.</p>
<p>In the root of your home directory, simple create or update the file <code>.gitignore_global</code> with all the file names and patterns that relate to the tools you use.</p>
<h1 id="Ignore-patterns"><a href="#Ignore-patterns" class="headerlink" title="Ignore patterns"></a>Ignore patterns</h1><p>To help you out, here are some ignore patterns for some of the most common developer tools.&nbsp; There are lots of ignore patterns on the <a href="https://github.com/github/gitignore/tree/master/Global" target="_blank" rel="noopener">Git Ignore github repository</a></p>
<h2 id="Emacs-ignore-patterns"><a href="#Emacs-ignore-patterns" class="headerlink" title="Emacs ignore patterns"></a>Emacs ignore patterns</h2><img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail">
<p>I use Emacs for much of my development projects, so here are some ignore patters I add to my <code>.gitignore_global</code> file</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*~</span><br><span class="line">\#*</span><br><span class="line">\#</span><br><span class="line">/.emacs.desktop</span><br><span class="line">/.emacs.desktop.lock</span><br><span class="line">.elc</span><br><span class="line">auto-save-list</span><br><span class="line">tramp</span><br><span class="line">.\#*</span><br></pre></td></tr></table></figure>
<h2 id="Org-mode"><a href="#Org-mode" class="headerlink" title="Org-mode"></a>Org-mode</h2><p>I also create a lot of developer content using Emacs Org-mode, so here are the ignore patterns I add for this.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.org-id-locations</span><br><span class="line">*_archive</span><br></pre></td></tr></table></figure>
<h2 id="Vi-Vim"><a href="#Vi-Vim" class="headerlink" title="Vi / Vim"></a>Vi / Vim</h2><p>.*.s[a-w][a-z]</p>
<h2 id="IntelliJ-ignore-patterns"><a href="#IntelliJ-ignore-patterns" class="headerlink" title="IntelliJ ignore patterns"></a>IntelliJ ignore patterns</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line">*.iws</span><br><span class="line">.idea/</span><br></pre></td></tr></table></figure>
<h2 id="Netbeans-ignore-patters"><a href="#Netbeans-ignore-patters" class="headerlink" title="Netbeans ignore patters"></a>Netbeans ignore patters</h2><img src="http://2.bp.blogspot.com/-EjfbbP6MpJo/URUV9U3X4ZI/AAAAAAAAJCY/RagOD9XWMZs/s1600/netbeans-logo.jpg" class="img-thumbnail"> 
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">nbproject/private/</span><br><span class="line">build/</span><br><span class="line">nbbuild/</span><br><span class="line">dist/</span><br><span class="line">nbdist/</span><br><span class="line">nbactions.xml</span><br><span class="line">nb-configuration.xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Eclipse ignore patters</span><br><span class="line"></span><br><span class="line">&#123;% img img-thumbnail http://1.bp.blogspot.com/-RmrjIrvG7dE/URUVuk2P5QI/AAAAAAAAJCQ/RGcprIpBxjc/s1600/Eclipse_Icon_by_flosweb.png %&#125;</span><br><span class="line"></span><br><span class="line">``` .gitignore_global</span><br><span class="line">*.pydevproject </span><br><span class="line">.project </span><br><span class="line">.metadata </span><br><span class="line">bin/** </span><br><span class="line">tmp/** </span><br><span class="line">tmp/**/* </span><br><span class="line">*.tmp </span><br><span class="line">*.bak </span><br><span class="line">*.swp </span><br><span class="line">*~.nib </span><br><span class="line">local.properties </span><br><span class="line">.classpath </span><br><span class="line">.settings/ </span><br><span class="line">.loadpath </span><br><span class="line">.externalToolBuilders/ </span><br><span class="line">*.launch </span><br><span class="line">.cproject</span><br><span class="line">.buildp</span><br></pre></td></tr></table></figure>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Lots of developers are using git, especially when working on projects together.&nbsp; However there is not one single developer tool that every one uses, so there is potential for a lot of unwanted files to end up in your project.</p>
<p>Rather than pollute the .gitignore file for the project with every development tool under the sun, its much more effective to add development tool specific files to your own global ignore file <code>~/.gitignore_global</code>.</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git Log Makes Multiple Repos Easier to Track]]></title>
    <link href="http://jr0cket.co.uk/2013/01/git-log-makes-multiple-repos-easier-to.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/git-log-makes-multiple-repos-easier-to.html.html</id>
    <published>2013-01-29T00:42:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail"> 
<p>Git is a great developer tool for managing and sharing code.  Its really easy to get started with, especially with services such as <a href="https://github.com/" target="_blank" rel="noopener">Github</a> and their excellent <a href="http://try.github.com/" target="_blank" rel="noopener">try.github.com</a> website.  I quickly became comfortable with the basic developer cycle: </p>
<pre><code>git init
git status 
git add filename
git commit -m &quot;useful message&quot;
git push
;; back to git status...
</code></pre><p>To keep track of changes when you just have a local repository is easy with <code>git status</code>.</p>
<a id="more"></a>
<h1 id="Git-log-for-tracking-multiple-repositories"><a href="#Git-log-for-tracking-multiple-repositories" class="headerlink" title="Git log for tracking multiple repositories"></a>Git log for tracking multiple repositories</h1><p>When you start sharing a remote repository then changes are distributed and developers start using <code>git log</code> to track changes across repositories.  The challenge with <code>git log</code> is that by default you have to scroll through a lot of text to see what is happening.  This gets a bit tedious really quickly.</p>
<img src="http://2.bp.blogspot.com/--Oj7Ocw5ddA/UQavWR8_1oI/AAAAAAAAI-M/g1hbsrRRbJ4/s1600/git-log-default-output.png" class="img-code">
<p>Luckily, the <code>git log</code> output is very configurable so its really easy to get a clearer picture.  The most useful options to git log include </p>
<p><code>--abbrev-commit</code> - only shows the last part of the very long commit name, the sha.  This is now a default option since Git 1.7.x</p>
<p><code>--graph</code> - show an ascii art graph of the commit history, also known as the commit graph.</p>
<p><code>--pretty=oneline</code> or <code>--oneline</code> - print each commit entry on a sigle line, which can be scrolled horizontally to see longer commit messages.  The one-line value is one of several built in formats to the –pretty option and in this case can be used as an option on its own.</p>
<p><code>--decorate</code> - shows the forks, branches and tag names relative to the commit history, helping you keep track of latest commit on each branch and across all your remote repositories.  Decorate therefore provides a quick way to see which commits have been merged or pushed.</p>
<p>Putting all these options together you get a much simpler and easier to follow view of the commit history.</p>
<img src="http://2.bp.blogspot.com/-s_hKo72A__c/UQcUcUJP71I/AAAAAAAAI_M/Zf0G9Zi_1b0/s1600/git-log-commit-graph-decorate-oneline-abbrev-commit.png" class="img-code"> 
<h1 id="Creating-git-aliases"><a href="#Creating-git-aliases" class="headerlink" title="Creating git aliases"></a>Creating git aliases</h1><p>Rather than type git log and all these options each time (or scroll through your shell history), you can create a git alias as a shortcut for this long command line</p>
<p>I create an alias called <code>lg</code> for git log as follows:</p>
<pre><code>git config --global alias.lg &apos;log --graph --oneline --decorate&apos;
</code></pre><p>This will add the alias called lg to your <code>~/.gitconfig</code> file.  You could also edit this file directly and add aliases manually.</p>
<pre><code>&lt;pre&gt;`[alias]
    lg = log --graph --oneline --decorate
</code></pre><h1 id="The-commit-graph"><a href="#The-commit-graph" class="headerlink" title="The commit graph"></a>The commit graph</h1><p>Visualising the commit graph is my must-have tool when using git, I use it nearly as often as <code>git status</code>.  The commit graph shows a history of commits and the position of repos in that history.  When there are branches, this is rendered as a tree-like structure and it is easy to see the relative status of your local and remote repositories attached to the project.</p>
<img src="http://1.bp.blogspot.com/-iDu7u9zb1oA/UQcU1yeQWyI/AAAAAAAAI_U/ML7tNMPDmRc/s1600/git-commit-graph-stylised.png" class="img-code">
<p>Most common status in git is to have your local repository ahead of the remote masters in terms of commits, with <strong>HEAD</strong> pointing to you local repo. Its quite common to do a group of related commits locally before pushing then to a shared remote repo.  When the remote repo is behind your local repo, this is quite obvious from the commit graph, as its on an earlier commit version and therefore a different line of the graph.</p>
<p>You can see when a push happens to a remote repository from your local repo, as the branch merges into the trunk.  When everything that has been committed locally has been pushed then you can see the remote branch at the same commit version as the local.</p>
<p>In the situation where you have multiple repositories, for different stages of the development workflow (for example testing, staging, CI), the commit graph really makes the status of your different repositories really clear.  You can see at a glance the commit version each repo is on.  The commit graph also helps you understand which commits to push to which repos.  This is also invaluable when merging two longer running branches (should you get to that situation).</p>
<h1 id="Designing-your-own-commit-graph"><a href="#Designing-your-own-commit-graph" class="headerlink" title="Designing your own commit graph"></a>Designing your own commit graph</h1><p>In the next article I will cover how to create your own design for the git commit graph, creating several aliases for different levels of information </p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail"> 
<p>Git is a great developer tool for managing and sharing code.  Its really easy to get started with, especially with services such as <a href="https://github.com/" target="_blank" rel="noopener">Github</a> and their excellent <a href="http://try.github.com/" target="_blank" rel="noopener">try.github.com</a> website.  I quickly became comfortable with the basic developer cycle: </p>
<pre><code>git init
git status 
git add filename
git commit -m &quot;useful message&quot;
git push
;; back to git status...
</code></pre><p>To keep track of changes when you just have a local repository is easy with <code>git status</code>.</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git Interactive Cheetsheet for Visually Oriented Developers]]></title>
    <link href="http://jr0cket.co.uk/2013/01/git-interactive-cheetsheet-for-visually.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/git-interactive-cheetsheet-for-visually.html.html</id>
    <published>2013-01-28T14:43:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Sometimes reading a big book or looking at a long list of commands is the last thing you want to do when discovering how to use a new tool.  So it was great to find a very visual way to show the git commands and how they work.</p>
<a id="more"></a>
<h1 id="Git-Interactive-Cheetsheet"><a href="#Git-Interactive-Cheetsheet" class="headerlink" title="Git Interactive Cheetsheet"></a>Git Interactive Cheetsheet</h1><p>The <a href="http://ndpsoftware.com/git-cheatsheet.html" target="_blank" rel="noopener">Git Interactive Cheetsheet</a> from <a href="http://ndpsoftware.com/" target="_blank" rel="noopener">NDP Software</a> does exactly that.  By clicking on different stages of your development workflow, you can see the related commands that you can use.  Hover over a specific command and you get a short description of what it will do.  The site also shows you the direction in which those commands work, supporting your understanding of those commands.</p>
<img src="http://2.bp.blogspot.com/-J9v-PxiEsUc/UQaNN7xzNxI/AAAAAAAAI9s/RvGXB5Q68fw/s1600/git-interactive-cheetsheet-local-repo-commands.png" class="img-code">
<h1 id="In-Summary"><a href="#In-Summary" class="headerlink" title="In Summary"></a>In Summary</h1><p>It would be great if more tools have this kind of visualisation around them, especially involving the developer workflow that they support.</p>
<p>I have created some basic visualisation of developer workflows using Inkscape, an open source drawing tool.  The results can be seen at my developer guides on Github pages.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Sometimes reading a big book or looking at a long list of commands is the last thing you want to do when discovering how to use a new tool.  So it was great to find a very visual way to show the git commands and how they work.</p>]]>
    
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown Driven Developer Sites on Heroku - Easily Create an Online Workshop]]></title>
    <link href="http://jr0cket.co.uk/2013/01/markdown-driven-developer-sites-on.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/markdown-driven-developer-sites-on.html.html</id>
    <published>2013-01-21T13:58:00.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    <content type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-yIBn-HYfxeA/UI_UGVJF6AI/AAAAAAAAIdo/MLPDWYCbX2Q/s1600/heroku-logo-light-300x100.png" class="img-thumbnail"> 
<p><a href="http://www.heroku.com/" target="_blank" rel="noopener">Heroku</a> is a great platform to deploy your web apps, in a way that just works  for developers.  What isnt obvious is you can also deploy static sites too.</p>
<p>As Markdown is now common way for developers to  create documentation, why not use Heroku to deploy your markdown driven content site.</p>
<a id="more"></a>
<h2 id="Collaborating-force"><a href="#Collaborating-force" class="headerlink" title="Collaborating force"></a>Collaborating force</h2><p>The <a href="http://developer.salesforce.com/" target="_blank" rel="noopener">Salesforce developer evangelist team</a> are doing just this, creating workshops written in markdown.  The workshops are deployed on Heroku and we collaborate via Github.  This is a really effective way to collaborate as we are remote workers and often on our travels. </p>
<h2 id="Markdown-is-simple"><a href="#Markdown-is-simple" class="headerlink" title="Markdown is simple"></a>Markdown is simple</h2><img src="http://2.bp.blogspot.com/-vdbLJDFnR7Q/UPxhMffM05I/AAAAAAAAI8k/1HLAKXNX5jU/s1600/markdown-logo.gif" class="img-topic"> 
<p>Markdown is really easy to learn and really easy to read.  Its much better to read in its raw form than most Wiki Markup languages.  If you have a good editor (Emacs &amp; Emacs Live) then reading and writing markdown is a great experience.</p>
<p>Its also pretty easy to convert Markdown to different formats such as HTML and PDF.</p>
<p>I picked up all the markdown syntax from working with Github readme.md files and from writing markdown in Emacs.  SimpleCode.me also has a really good <a href="http://www.simplecode.me/2011/12/11/getting-started-with-markdown/" target="_blank" rel="noopener">getting started with markdown guide</a>. </p>
<h2 id="Creating-the-content-in-markdown"><a href="#Creating-the-content-in-markdown" class="headerlink" title="Creating the content in markdown"></a>Creating the content in markdown</h2><img src="http://2.bp.blogspot.com/-hiVZZWkLlbg/UPAGL_h-U4I/AAAAAAAAI5Q/J3CzFdhvziw/s1600/emacs-live-docs-themed.png" class="img-topic"> 
<p>Any editor can be used two work on the content for the workshops, this is another beauty of markdown.  I recommend Emacs with <a href="http://blog.jr0cket.co.uk/2013/01/emacs-live-great-clojure-developer.html" target="_blank" rel="noopener">Emacs Live setup</a> or you are using MacOSX, then <a href="http://mouapp.com/" target="_blank" rel="noopener">Mou</a> gives you live rendering of you content as you type.</p>
<p>To make the markdown render in HTML and PDF similar to the style used on github, a fairly simple css file is added to the project. </p>
<h2 id="Creating-your-app-on-Heroku"><a href="#Creating-your-app-on-Heroku" class="headerlink" title="Creating your app on Heroku"></a>Creating your app on Heroku</h2><p>As Heroku and Github are both going to be used then the projects are versioned with Git.  A git repository is created on Github at the start of a new workshop.  A github  organisation is used to keep al the projects together.  The new Github repository is cloned and development of the content commences.</p>
<blockquote>
<p>As its a static site then there is not much need for a .gitignore file, assuming you have <a href="http://jr0cket.co.uk/2012/12/gitignore-for-clojure-and-emacs-ignore.html">a ~/.gitignore_global file for any backup files</a> that your editor creates.  </p>
</blockquote>
<p>Once the workshop content is good enough to deploy, a new Heroku application is created.  A specific <a href="https://devcenter.heroku.com/articles/buildpacks" target="_blank" rel="noopener">build pack</a> is used to tell Heroku how to assemble and deploy the markdown as a web  application.  This build pack defines how the HTML is generated from  the markdown, based on a css file included in the project.  The whole  app runs on a HTTP server called SimpleHTTPServer, written in Python.</p>
<p>The app is created on Heroku app using the <a href="https://github.com/jamesward/heroku-buildpack-markdown" target="_blank" rel="noopener">markdown build pack</a> created by James Ward.  The command line for this is:</p>
<pre><code>heroku create workshop-name  --buildpack https://github.com/jamesward/heroku-buildpack-markdown.git
</code></pre><h2 id="Telling-Heroku-how-to-run-your-app"><a href="#Telling-Heroku-how-to-run-your-app" class="headerlink" title="Telling Heroku how to run your app"></a>Telling Heroku how to run your app</h2><p>A procfile is a simple text  file that tells Heroku what to do with you application when its ready to  run it.  For the markdown site we simply start up a simple HTTP server  which runs on python (we dont need all the bells and whistles of something like Apache).</p>
<p>The <code>web:</code> directive at the front tells heroku to create a process that listens to requests from the Internet.  As we are not  specifying a port number, it will pick up the default port to listen on  from the Heroku environment variables.</p>
<pre><code>web: python -m SimpleHTTPServer $PORT
</code></pre><h2 id="Deploying-the-markdown-site"><a href="#Deploying-the-markdown-site" class="headerlink" title="Deploying the markdown site"></a>Deploying the markdown site</h2><img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-topic"> 
<p>As soon as you are ready for your  markdown content to go live, simply push your local repository up to the  Heroku repostiory with the git push command.</p>
<pre><code>git push
</code></pre><p>If you have more than one remote repository specified in your git configuration, then all you need to do is specify the specific repository to push to.  By default the heroku create command adds a remote called heroku.</p>
<p>To check what your heroku repository is called you can use the command:</p>
<pre><code>git remote -v
</code></pre><p>To push to a remote repository called heroku, use the command:</p>
<pre><code>git push heroku master
</code></pre><h2 id="In-summary"><a href="#In-summary" class="headerlink" title="In summary"></a>In summary</h2><p>It is really easy to create content based on markup. Collaborating on this content is really easy when using Github and deploying this content as a static website is only a git push away with heroku.</p>
<p>Other aspects were are adding to this workshop creation process include:</p>
<ul>
<li>create a staging heroku app to allow testing of content once the site has gone live;</li>
<li>automatically generating a pdf copy of each page every time you deploy a new version.</li>
</ul>
<p>Thank you.</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://2.bp.blogspot.com/-yIBn-HYfxeA/UI_UGVJF6AI/AAAAAAAAIdo/MLPDWYCbX2Q/s1600/heroku-logo-light-300x100.png" class="img-thumbnail"> 
<p><a href="http://www.heroku.com/" target="_blank" rel="noopener">Heroku</a> is a great platform to deploy your web apps, in a way that just works  for developers.  What isnt obvious is you can also deploy static sites too.</p>
<p>As Markdown is now common way for developers to  create documentation, why not use Heroku to deploy your markdown driven content site.</p>]]>
    
    </summary>
    
      <category term="heroku" scheme="http://jr0cket.co.uk/tags/heroku/"/>
    
      <category term="markdown" scheme="http://jr0cket.co.uk/tags/markdown/"/>
    
      <category term="depreciated" scheme="http://jr0cket.co.uk/tags/depreciated/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The Git Father - a Forking Badass T-Shirt]]></title>
    <link href="http://jr0cket.co.uk/2013/01/the-git-father-forking-badass-t-shirt.html.html"/>
    <id>http://jr0cket.co.uk/2013/01/the-git-father-forking-badass-t-shirt.html.html</id>
    <published>2013-01-09T16:29:00.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>The Git Father. The only t-shirt to wear when teaching other people who to use git and Github. </p>
<img src="http://1.bp.blogspot.com/-l8pchRzUta0/UO2ZNVdVokI/AAAAAAAAI4I/BU5cyWtJmeA/s1600/the-git-father-forking-badass-clearvision.png" class="img-code"> 
<p><em>One day I will actually iron my t-shirts :)</em></p>
<p>Thanks to <a href="http://www.clearvision-cm.com/" target="_blank" rel="noopener">Clearvision</a> for creating such a great t-shirt.  Check out their <a href="http://www.go-git.com/" target="_blank" rel="noopener">Go Git website</a> for ideas on adopting git in your organisation.  </p>
<p>Thank you.<br><a href="http://www.twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>The Git Father. The only t-shirt to wear when teaching other people ]]>
    </summary>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Password Protected SSH Key for Github for Mac & Linux]]></title>
    <link href="http://jr0cket.co.uk/2012/12/password-protected-ssh-key-for-github.html.html"/>
    <id>http://jr0cket.co.uk/2012/12/password-protected-ssh-key-for-github.html.html</id>
    <published>2012-12-31T15:57:00.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    <content type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-vIpCWBThzsw/T8ZKPxPTC8I/AAAAAAAAIHU/di86sKgUYA8/s1600/public-private-keys.jpg" class="img-thumbnail"> 
<p>Secure Shell (SSH) is an invaluable tool to help developers manage code and data over different computers and services, eg. <a href="http://github.com" target="_blank" rel="noopener">Github</a>, <a href="http://www.heroku.com" target="_blank" rel="noopener">Heroku</a>.  By creating a public/private key it also means you dont have to enter a username &amp; password each time you use the service.  Ideally you should create a public/private key using a long passphrase, so that is what I will cover here.</p>
<a id="more"></a> 
<h2 id="Why-use-a-secure-key"><a href="#Why-use-a-secure-key" class="headerlink" title="Why use a secure key?"></a>Why use a secure key?</h2><p>To make using SSH a great experience to use and yet keeping it secure as possible requires you to set up an public / private key combination that is protected by a long pass-phrase.  Specifically you are protecting your private key as you distribute your public key (which is why its called public).  Imagine the pass-phrase as a kind of long password, which you will add to something called a keychain on your laptop so you only have to enter this long password once.</p>
<img src="http://1.bp.blogspot.com/-qlVcL6zWbjY/TzFMw8PPiGI/AAAAAAAAEbs/-Ozv0X_6mrQ/s1600/github-logo.png" class="img-topic">
<h2 id="I-don’t-want-to-keep-typing-my-long-password-on-every-commit"><a href="#I-don’t-want-to-keep-typing-my-long-password-on-every-commit" class="headerlink" title="I don’t want to keep typing my long password on every commit?"></a>I don’t want to keep typing my long password on every commit?</h2><p>Of course not, that would be a real pain.</p>
<p>When using a password protected SSH key with Mac OSX and Linux you can add your SSH key password to the keychain (keyring in Linux, but its the same thing) of your login account.</p>
<p>When you first connect to github using your newly added key you will be prompted with a dialog box to add the password for your SSH key to your keychain.  Enter the password for your keychain in this prompt, it should be the same as your computer login password (unless you specifically changed it).</p>
<h2 id="Creating-a-password-protected-SSH-key"><a href="#Creating-a-password-protected-SSH-key" class="headerlink" title="Creating a password protected SSH key"></a>Creating a password protected SSH key</h2><p>Creating an SSH key pair with a long pass-phrase is just the same process as that without, except you obviously specify the long password.</p>
<p>In the following example, I am specifying the email I used for the Github account I own, using the <code>-C</code> option for <code>ssh-keygen</code>.</p>
<p>I am also using a custom file name.  In doing so, I need to provide the full path to the file or otherwise ssh-keygen fails to create the file.  It seems that even the <code>~/</code> shortcut to your home folder also fails.</p>
<p>As I am using a custom name for the keys, then I will need specific a host configuration before I am done.</p>
<img src="http://3.bp.blogspot.com/-Y7vVzBfsOZE/UOG0phBIZHI/AAAAAAAAI2w/doqqeqnO3fQ/s1600/github-ssh-key-generation-secure.png" class="img-code">
<h2 id="Adding-a-Host-configuration"><a href="#Adding-a-Host-configuration" class="headerlink" title="Adding a Host configuration"></a>Adding a Host configuration</h2><p>If your public key is called id_rsa.pub then you should not need a host configuration.  As I am using a custom name to generate the SSH keys, I need to add a host definition to my SSH configuration.  Its pretty easy to add a new definition, simply edit the ~/.ssh/config file and add a definition as follows</p>
<img src="http://2.bp.blogspot.com/-Wt1uj7Hxnec/UKaKa29sKwI/AAAAAAAAIjA/XtmLKuvJQ-g/s1600/ssh-host-config-github-secure.png" class="img-code">
<h2 id="Adding-Keys-a-bad-Developer-experience"><a href="#Adding-Keys-a-bad-Developer-experience" class="headerlink" title="Adding Keys - a bad Developer experience"></a>Adding Keys - a bad Developer experience</h2><img src="http://3.bp.blogspot.com/-0xWwyDAsFGU/UKaiV_bcAWI/AAAAAAAAIjY/iMdnVj8lVNQ/s1600/github-profile-edit.png" class="img-code">
<p>The adding of keys to your Github account is a very poor experience for the developer, as it requires a cut-n-paste rather than allowing you to upload your key file.</p>
<p>Adding keys to <strong><a href="https://devcenter.heroku.com/articles/keys" target="_blank" rel="noopener">Heroku</a></strong> is much nicer, they have a <strong><a href="https://toolbelt.heroku.com/" target="_blank" rel="noopener">toolbelt</a></strong> that automatically detects your public key file and upload it. </p>
<p>I had a few problems when copy/pasting my key from the editors that come with the Mac, until I found reference to the command <code>pbcopy</code>.</p>
<p>Open up a terminal and enter the following command to copy your public key into the Mac’s clipboard.  Then simply paste the key into the Github webpage for adding a new key. </p>
<pre><code>pbcopy &lt; ~/.ssh/id_rsa.pub
</code></pre><p>Bitbucket is not much better, although at least they tell you about pbcopy in the documentation for adding a key.  When I used Assembla.com, at least you could upload your key public key as a file.</p>
<p>Once you have uploaded your public key, don’t forget to give it a quick test to make sure its all working.  Using the command line, use the ssh command to connect to github</p>
<pre><code>ssh -T git@github.com
</code></pre><img src="http://3.bp.blogspot.com/-pYOW0NB6RfA/UKaiX5iv1oI/AAAAAAAAIjg/SZBS1NMG11c/s1600/github-testing-successful.png" class="img-code">
<p>This command will use your SSH key to connect to Github and show you if you have successfully set up your key for your account on your Mac.  Unlike normal SSH access, you cant actually do anything once you connect.</p>
<p>Thank you.</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://2.bp.blogspot.com/-vIpCWBThzsw/T8ZKPxPTC8I/AAAAAAAAIHU/di86sKgUYA8/s1600/public-private-keys.jpg" class="img-thumbnail"> 
<p>Secure Shell (SSH) is an invaluable tool to help developers manage code and data over different computers and services, eg. <a href="http://github.com" target="_blank" rel="noopener">Github</a>, <a href="http://www.heroku.com" target="_blank" rel="noopener">Heroku</a>.  By creating a public/private key it also means you dont have to enter a username &amp; password each time you use the service.  Ideally you should create a public/private key using a long passphrase, so that is what I will cover here.</p>]]>
    
    </summary>
    
      <category term="github" scheme="http://jr0cket.co.uk/tags/github/"/>
    
      <category term="heroku" scheme="http://jr0cket.co.uk/tags/heroku/"/>
    
      <category term="security" scheme="http://jr0cket.co.uk/tags/security/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Continuous Integration With Travis-CI, Scala, Play2 and Heroku]]></title>
    <link href="http://jr0cket.co.uk/2012/12/continuous-integration-with-travis-ci.html.html"/>
    <id>http://jr0cket.co.uk/2012/12/continuous-integration-with-travis-ci.html.html</id>
    <published>2012-12-11T13:05:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    <content type="html"><![CDATA[<img src="http://2.bp.blogspot.com/-kIrzG80xsL4/UMcqsNDxzzI/AAAAAAAAIsU/hKMCeoPdGkk/s1600/lsug-logo.jpeg" class="img-thumbnail">
<p>During the London Scala community hackday at the Guardian, we first put together the <a href="http://lsug.org/" target="_blank" rel="noopener">LSug community webapp</a>.  For this we used Play2 framework, MongoDB, Github for pull requests and deployed onto Heroku.</p>
<p>Towards the end of the hackathon, someone suggested we also wired the project up to <a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis-CI</a>, although none of us knew much about using it.  As the hackday was all about discovering how to use new stuff, I decided to add Travis-CI and worry about setting it up when we got to it.</p>
<h1 id="What-is-Travis-CI"><a href="#What-is-Travis-CI" class="headerlink" title="What is Travis-CI ?"></a>What is Travis-CI ?</h1><img src="http://2.bp.blogspot.com/-5VmP6LuMgJQ/UMcriwrutXI/AAAAAAAAIsg/9z1McNPoKio/s1600/travis-logo.png" class="img-thumbnail"> 
<p><a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis-CI</a>** is a <a href="http://en.wikipedia.org/wiki/Continuous_integration" target="_blank" rel="noopener">continuous integration</a> service that allows you to run build jobs and tests automatically, straight from Github.  Its ideal for open source projects.</p>
<p>As its on the web then there is no installation required and its really easier to configure.  You simply point Travis-CI to your Github account and you can choose which projects you want Travis-CI to run on.  Travis-CI will scan you public repositories, as well as any Github organisations you are part of.  Its then an easy matter of switching on those repositories you want Travis-CI to monitor (eg. build, run tests, etc.)</p>
<h1 id="Travis-CI-in-action"><a href="#Travis-CI-in-action" class="headerlink" title="Travis-CI in action"></a>Travis-CI in action</h1><p>Whilst Travis-CI has been pointed to the the <a href="https://github.com/lsug-dojo/lsug-website/" target="_blank" rel="noopener">lsug-dojo/lsug-website repo on github</a> via my account, no one got round to adding a Travis-CI configuration file.  The down side of this is that those contributors to the lsug-dojo/lsug-website repository received an emailed error message each time something was pushed to the repository or a pull request was accepted.</p>
<p>Not having a working Travis-CI was also noticeable when reviewing pull requests, as Travis-CI talks to Github and lets it know that your projects have failed.  It then up to you wether you still want to merge.</p>
<img src="http://3.bp.blogspot.com/-qRhXKVybkpM/UMctV4nRu0I/AAAAAAAAIss/liJmosF0rNk/s1600/travis-ci-pull-requests-caution.png" class="img-code"> 
<p><a href="http://about.travis-ci.org/blog/2012-09-04-pull-requests-just-got-even-more-awesome/" target="_blank" rel="noopener">Screenshot taken from travis-ci blog </a></p>
<p>With a quick Google I found an <a href="https://github.com/gildegoma/travis-ci-ScalaOnPlay-sample/blob/master/.travis.yml" target="_blank" rel="noopener">example travis-ci configuration file for Play 2 framework</a>.  I just dropped in a new <code>.travis.yml</code> file into the lsug-website github repository and that triggered another travis-ci build.  This time the test ran and passed!!</p>
<img src="http://4.bp.blogspot.com/-NckYSnj2G8w/UMctWvTZ0bI/AAAAAAAAIsw/5tHd9x3zVbo/s1600/travis-ci-pull-requests-good.png" class="img-code"> 
<p><a href="http://about.travis-ci.org/blog/2012-09-04-pull-requests-just-got-even-more-awesome/" target="_blank" rel="noopener">Screenshot taken from travis-ci blog</a></p>
<p>One benefit of using Travis-CI is to encourage the use of tests, it also gives information about the state of the github repository.  This is especially useful when working with pull requests.</p>
<p>This is the first time I have used Travis-CI and it was really easy to configure.  If you have any comments or ideas about this, please share them with the group or myself directly.</p>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://2.bp.blogspot.com/-kIrzG80xsL4/UMcqsNDxzzI/AAAAAAAAIsU/hKMCeoPdGkk/s1600/lsug-logo.jpeg" class="img-thumbnail">
<p>During t]]>
    </summary>
    
      <category term="ci" scheme="http://jr0cket.co.uk/tags/ci/"/>
    
      <category term="scala" scheme="http://jr0cket.co.uk/tags/scala/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/categories/dev-tools/"/>
    
  </entry>
  
</feed>
