<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[jr0cket]]></title>
  <subtitle><![CDATA[community developer]]></subtitle>
  <link href="categories/git/atom.xml" rel="self"/>
  <link href="http://jr0cket.co.uk/"/>
  <updated>2022-01-02T20:20:15.306Z</updated>
  <id>http://jr0cket.co.uk/</id>
  
  <author>
    <name><![CDATA[John Stevenson]]></name>
    <email><![CDATA[john@jr0cket.co.uk]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Ssh or Https - That Is the Github Question]]></title>
    <link href="http://jr0cket.co.uk/2016/05/ssh-or-https-that-is-the-github-question.html"/>
    <id>http://jr0cket.co.uk/2016/05/ssh-or-https-that-is-the-github-question.html</id>
    <published>2016-05-08T08:58:29.000Z</published>
    <updated>2022-01-02T20:20:15.306Z</updated>
    <content type="html"><![CDATA[<img src="/images/github-logo.png" class="img-thumbnail">
<p>When you clone, push and pull changes between <a href="https://github.com" target="_blank" rel="noopener">Github</a> repositories and your computer there are two network protocols to choose from, HTTPS &amp; SSH.  But which one should you use and why does it matter?</p>
<p>Here is a quick guide to both HTTPS &amp; SSH and the reasons why you may want to choose one over the other.</p>
<a id="more"></a>
<h1 id="Common-requirements"><a href="#Common-requirements" class="headerlink" title="Common requirements"></a>Common requirements</h1><p>Regardless of which network protocol you use with Github, you need to identify yourself to git first.  You can identify yourself by using the two following git commands:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;YOUR NAME&quot;</span><br><span class="line">git config --global user.email &quot;YOUR EMAIL ADDRESS&quot;</span><br></pre></td></tr></table></figure>
<p>The email address should be the same used to create your Github account</p>
<blockquote>
<p>For more details on this, see the Github help article on <a href="https://help.github.com/articles/set-up-git/" target="_blank" rel="noopener">seting up git</a>.</p>
</blockquote>
<h1 id="Github-recommends-HTTPS"><a href="#Github-recommends-HTTPS" class="headerlink" title="Github recommends HTTPS"></a>Github recommends HTTPS</h1><p>HTTPS is recommended by Github because its a port that is open in all network firewalls, therefore Github is universally accessible when using HTTPS.  There is also very little setup involved, so using HTTPS is very easy.  All you need is a Github account and to configure Git with your name and email address (as detailed above in the common requirements section).</p>
<p>However, each time you <strong>clone</strong>, <strong>fetch</strong>, <strong>pull</strong> or <strong>push</strong> to a remote Github repository using HTTPS you need to supply your GitHub username and password.  This means either typing them on the command line each time or adding them to your favorite Github tool (which hopefully caches them in an encrypted form on the filespace).</p>
<h2 id="Caching-your-credentials"><a href="#Caching-your-credentials" class="headerlink" title="Caching your credentials"></a>Caching your credentials</h2><p>It is possible to cache your username and password for a period of time, so you only have to enter them once in a while.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Set git to use the credential memory cache</span><br><span class="line">git config --global credential.helper cache</span><br><span class="line"></span><br><span class="line"># Set the cache to timeout after 1 hour (setting is in seconds)</span><br><span class="line">git config --global credential.helper &apos;cache --timeout=3600&apos;</span><br></pre></td></tr></table></figure>
<p>You can of course use a much higher timeout value if needed.</p>
<blockquote>
<p>See the <a href="https://help.github.com/articles/caching-your-github-password-in-git/" target="_blank" rel="noopener">Github help article on caching your Github password in Git</a></p>
</blockquote>
<p>It is also possible to permenatly store your credentials on disk using <code>git config credential.helper store</code>, however this is a bad option as it will save your password in plain text so anyone that gets access to your computer account can read it.  If you use <a href="https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/" target="_blank" rel="noopener">2Factor authentication for your Github account</a> (I hope you do) then you will also need to <a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use/" target="_blank" rel="noopener">create a personal access token</a> and use that instead of your password.</p>
<h2 id="Exposing-your-account"><a href="#Exposing-your-account" class="headerlink" title="Exposing your account"></a>Exposing your account</h2><p>With HTTPS you are using the same username and password for your account, so if those details are seen or copied by someone, then that person has access to your entire account.  They can change your account password and lock you out of not just your repositories but everything you have done on Github.  They can also be malicious and submit pull requests or issues as your identity, tainting your online presence.</p>
<h1 id="I-recommend-SSH"><a href="#I-recommend-SSH" class="headerlink" title="I recommend SSH"></a>I recommend SSH</h1><img src="/images/github-clone-or-download-ssh.png" class="img-topic">
<p>As long as you look after your SSH keys, specifically your private key, then I find SSH more secure and convienient that HTTPS.  Although SSH can be blocked, nearly all of the networks Iâ€™ve used in the last 5 years have had the SSH port open.</p>
<p>With SSH you create a public/private key pair for each computer you are going to use to connect to Github.  You copy the public key to your Github account and when you push a change to github it is signed with your private key so Github knows that its you that is pushing it.  This does add a little setup, but then you never have to provide your username and password when accessing Github repositories.</p>
<h2 id="Keys-are-more-secure"><a href="#Keys-are-more-secure" class="headerlink" title="Keys are more secure"></a>Keys are more secure</h2><p>SSH Keys are more secure in that they do not provide access to your Github account.  If someone does get hold of your private key (ie. they stole your computer &amp; hacked into your account) then they could so some nasty things to your repositories (eg.  a force push of an empty repository that wipes your change history).</p>
<p>If your key is stolen you can still access your Github account and update your Github profile to delete any lost or stolen keys.</p>
<h2 id="Generating-keys"><a href="#Generating-keys" class="headerlink" title="Generating keys"></a>Generating keys</h2><img src="/images/public-private-keys.jpg" class="img-topic">
<p>Its easy to generate a new public/private key pair for SSH using the command <code>ssh-keygen</code> that is available on all good operating systems.  When creating a key pair for SSH I recommend adding a comment that is the email address from your Github account</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C my-github@email.com</span><br></pre></td></tr></table></figure>
<blockquote>
<p>See my article on <a href="http://jr0cket.co.uk/2012/12/password-protected-ssh-key-for-github.html.html">creating password protected SHH keys</a> for more details</p>
</blockquote>
<h2 id="Using-SSH-when-its-blocked-by-the-network"><a href="#Using-SSH-when-its-blocked-by-the-network" class="headerlink" title="Using SSH when its blocked by the network"></a>Using SSH when its blocked by the network</h2><p>SSH can be tunneled over HTTPS if the network you are on blocks the SSH port.  Simply edit your <code>~/.ssh/config</code> file and add this section:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure>
<p>Now every time you use SSH to connect to Github it will use the HTTPS port (443).</p>
<blockquote>
<p>For more details, se the Github help arcticle on <a href="https://help.github.com/articles/using-ssh-over-the-https-port/" target="_blank" rel="noopener">using SSH over HTTP</a></p>
</blockquote>
<h1 id="In-summary"><a href="#In-summary" class="headerlink" title="In summary"></a>In summary</h1><p>My preference is to use SSH with a passphrase protected key.  It only takes a couple of minutes to set up and you have a secure way to use Github that does not expose your account credentials.  Adding 2Factor authentication is simpler with SSH too.  Even if SSH is blocked on your network its easy to configure SSH to work over HTTPS, giving you the best of both types of connections.</p>
<p>If you use HTTPS its essential to use <a href="https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/" target="_blank" rel="noopener">2Factor authentication</a> to protect your Github account.  If you want to store your credentials for HTTPS permenatly, ensure your password is stored in an encrypted form. </p>
<blockquote>
<p>You should use <a href="https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/" target="_blank" rel="noopener">2Factor authentication</a> for your Github account to give an added layer of protection regardless of if you use SSH or HTTPS</p>
</blockquote>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/github-logo.png" class="img-thumbnail">
<p>When you clone, push and pull changes between <a href="https://github.com" target="_blank" rel="noopener">Github</a> repositories and your computer there are two network protocols to choose from, HTTPS &amp; SSH.  But which one should you use and why does it matter?</p>
<p>Here is a quick guide to both HTTPS &amp; SSH and the reasons why you may want to choose one over the other.</p>]]>
    
    </summary>
    
      <category term="github" scheme="http://jr0cket.co.uk/tags/github/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GitIgnore for Clojure and Emacs - Ignore Emacs Backup & Temp Files]]></title>
    <link href="http://jr0cket.co.uk/2012/12/gitignore-for-clojure-and-emacs.html.html"/>
    <id>http://jr0cket.co.uk/2012/12/gitignore-for-clojure-and-emacs.html.html</id>
    <published>2012-12-13T08:00:00.000Z</published>
    <updated>2022-01-02T20:20:15.298Z</updated>
    <content type="html"><![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Even though I use <code>.gitignore</code> files to control common files that should not be committed to a git repository, its very easy to forget about the backup or temporary files that my development tools generate.  As these auto-generated files are development tool specific, they are not always included in a <code>.gitignore</code> file.</p>
<p>Especially when you are under pressure to commit changes or deploy your code its easy to include a few things you dont need, especially when using the commands <code>git add .</code> or <code>git commit -am &quot;&quot;</code>.</p>
<p>So when I discovered the idea of using a <code>.gitignore_global</code> file, I quicky adopted this and saved myself a lot of time with this simple approach.</p>
<a id="more"></a>
<p>Whilst I could simply add the patterns to the git repository <code>.gitignore</code> file, however this is not very effective for three reasons.</p>
<ol>
<li><p>Iâ€™m adding my own preferences to a project Iâ€™m sharing with others, who may have different toolset.</p>
</li>
<li><p>I have to add this to each new project I create / clone / fork.</p>
</li>
<li><p>Pull requests can be confusing or simply rejected by unneccessary changes to <code>.gitignore</code> files</p>
</li>
</ol>
<p>After a little more discovery with Git, I found that <code>.gitignore_global</code> is a better way to exclude files that were specific to my tools and environment than individual project <code>.gitignore</code> files.</p>
<h1 id="Creating-my-own-global-ignores"><a href="#Creating-my-own-global-ignores" class="headerlink" title="Creating my own global ignores"></a>Creating my own global ignores</h1><p>Emacs is the tool I used for my Clojure development, as well as writning contnet in markdown and Org-mode.  As all these types of files are versioned in Git, then there is a lot of potential for backup files to sneak in.</p>
<p>So in the <code>~/.gitconfig</code> of my home directory I have a section called [core] where a global excludes file is defined</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">    excludesfile = /Users/jstevenson/.gitignore_global</span><br><span class="line">    editor = emacsclient</span><br></pre></td></tr></table></figure>
<p>By adding file name patters to the <code>.gitignore_global</code> file for Emacs, I can add my own personal excludes without adding unneccessary stuff to each project I work on.  It also means its one less thing to remember when I am working with git projects.</p>
<img src="http://1.bp.blogspot.com/-PLeobToC6lc/TzFJCfBSLPI/AAAAAAAAEbE/zSx1cOgHzZE/s1600/emacs128x128icon.png" class="img-thumbnail"> 
<p>My <code>~/.gitignore_global</code> file now contains the following filename patterns, the last three patterns are specifically for the Emacs temporary and backup files.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*~</span><br><span class="line">.DS_Store</span><br><span class="line">*~</span><br><span class="line">*#</span><br><span class="line">.#*</span><br></pre></td></tr></table></figure>
<h1 id="Keeping-project-gitignore-files-clean"><a href="#Keeping-project-gitignore-files-clean" class="headerlink" title="Keeping project .gitignore files clean"></a>Keeping project .gitignore files clean</h1><p>Now when I work with Clojure projects using Emacs, I can commit away without having to worry about my editor add things that I carelessly add when in a hacking frenzy!</p>
<p>This also keeps the <code>.gitignore</code> files specific to a project much smaller and project specific.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pom.xml</span><br><span class="line">*jar</span><br><span class="line">/classes/</span><br><span class="line">/.lein-deps-sum</span><br><span class="line">/.lein-failures</span><br><span class="line">/.lein-env</span><br><span class="line">/checkouts</span><br><span class="line">/.env</span><br><span class="line">/target</span><br></pre></td></tr></table></figure>
<p>Finally, by minimising the changes in the project <code>.gitignore</code> file this limits the amount of times that file needs to be committed to the version control system.  It is less likely that a change in the <code>.gitignore</code> file end up in code change commits.</p>
<blockquote>
<p>See the <a href="https://github.com/github/gitignore" target="_blank" rel="noopener">github/gitignore repository</a> for examples of language and build tool specific <code>gitignore</code> patterns.</p>
</blockquote>
<p>Thank you.<br><a href="https://twitter.com/jr0cket" target="_blank" rel="noopener">@jr0cket</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="http://git-scm.com/images/logo.png" class="img-thumbnail">
<p>Even though I use <code>.gitignore</code> files to control common files that should not be committed to a git repository, its very easy to forget about the backup or temporary files that my development tools generate.  As these auto-generated files are development tool specific, they are not always included in a <code>.gitignore</code> file.</p>
<p>Especially when you are under pressure to commit changes or deploy your code its easy to include a few things you dont need, especially when using the commands <code>git add .</code> or <code>git commit -am &quot;&quot;</code>.</p>
<p>So when I discovered the idea of using a <code>.gitignore_global</code> file, I quicky adopted this and saved myself a lot of time with this simple approach.</p>]]>
    
    </summary>
    
      <category term="emacs" scheme="http://jr0cket.co.uk/tags/emacs/"/>
    
      <category term="clojure" scheme="http://jr0cket.co.uk/tags/clojure/"/>
    
      <category term="dev-tools" scheme="http://jr0cket.co.uk/tags/dev-tools/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/tags/git/"/>
    
      <category term="git" scheme="http://jr0cket.co.uk/categories/git/"/>
    
  </entry>
  
</feed>
